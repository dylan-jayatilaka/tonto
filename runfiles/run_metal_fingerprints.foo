! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_molecule.foo 3361 2009-09-24 15:40:02Z dylan_ $

program run_METAL_FINGERPRINTS

   implicit none

   command_line :: COMMAND_LINE
   output :: TEXTFILE*
   option,value, cif,cxh :: STR
   directory,word,etime,ctime :: STR
   found :: BIN
   metal_atom :: VEC{INT}@
   a,i :: INT
   m,ma :: MOLECULE*

   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE

   ! Initialise standard I/O files.
   ! Always have this.
   std_time.start_timing
   stdin.create_stdin;   stdin.open
   stdout.create_stdout ! ; stdout.open
   stderr.create_stderr; stderr.open

   ! Get the command line
   command_line.process_options
   DIE_IF(command_line.has_arguments,"illegal arguments; use options only")

   ! Default options
   cif = "input.cif"
   cxh = "output"

   ! Analyze command line options
   do a = 1,command_line.n_options

      ! Get options
      option = command_line.option(a)
      value  = command_line.option_value(a)

      ! Analyze options
      select case (option)
         case("cif");  cif = value
         case("cxh");  cxh = value
         case default; DIE("unknown option: "//trim(option))
      end

   end

   ! Initialize molecule
   m.BASE:create
   GAUSSIAN_DATA:set_indices(GAUSSIAN_DATA_L_MAX)

   ! Tonto banner
   MOLECULE.MAIN:put_banner

   ! Script banner
   stdout.flush
   stdout.text("====================================")
   stdout.text("Standalone Hirshfeld surface program")
   stdout.text("====================================")
   stdout.flush
   stdout.text(". This program generates a Hirshfeld surface and its")
   stdout.text("  corresponding fingerprint directly from a cif file")
   stdout.flush
   stdout.text(". It only works for Z'==1 now ... ")

   ! Set basis_set library folder
   directory = "./basis_sets"
   m.basis.set_library_directory(directory)
   m.slaterbasis.set_library_directory(directory)
   m.coppensbasis.set_library_directory(directory)

   ! Set Thakkar basis set
   m.BASE:set_slaterbasis_name("Thakkar")
   
   ! Create CIF object
   m.cif.create
   m.cif.set_file_name(cif)

   ! Set CIF to use bond-length normalization
   m.cif.CH_bond_length = 1.083
   m.cif.NH_bond_length = 1.009
   m.cif.OH_bond_length = 0.983
   m.cif.BH_bond_length = 1.180 
   m.cif.CH_bond_length.convert_from("angstrom")
   m.cif.NH_bond_length.convert_from("angstrom")
   m.cif.OH_bond_length.convert_from("angstrom")
   m.cif.BH_bond_length.convert_from("angstrom")

   ! Find CIF data block
   m.CE:find_CIF_crystal_data_block(m.cif,found)
   DIE_IF(NOT found,"no data block found in the CIF file!")

   ! Read/process CIF
   m.XTAL:read_CIF_atoms(m.cif)   
   m.XTAL:read_CIF_crystal(m.cif) 

   ! Write outthe CIF file
   m.CX_uses_angstrom = TRUE
   output.create(trim(cxh)//".cxc")
   output.open(for="write")
   m.CE:put_CX_data(output,m.cif)       
   output.destroy

   ! List of metal atoms
   metal_atom = m.crystal.asymmetric_unit_atom.list_of_metal_atoms

   ! Find metal atoms in asymmetric unit
   do i = 1,metal_atom.dim

      ! Get the metal atom index
      a = metal_atom(i)

      ! Metal atom molecule
      ma.BASE:create_from_molecule(m,m.atom(a).tag,[a])

      ! Initialize cluster & defragment CIF fragment
      ! Note: Z' = 1 only so far
      ma.cluster.create(m.crystal)
      ma.cluster.set_generation_method("fragment")
      ma.cluster.defragment = TRUE
      ma.cluster.make_info
      ma.cluster.put
      ma.XTAL:create_cluster
   
      ! Put defragmented molecule
      ma.BASE:put
   
      ! Initialize cluster for HS
      ma.cluster.destroy
      ma.cluster.create(m.crystal)
      ma.cluster.set_generation_method("for_hirshfeld_surface")
      ma.cluster.atom_density_cutoff = 1.0e-8
      ma.cluster.defragment = FALSE
      ma.cluster.make_info
      ma.XTAL:create_cluster
   
      ! Initialize interpolator for HS
      ma.interpolator.create
      ma.interpolator.set_interpolation_method("linear")
      ma.interpolator.set_domain_mapping("sqrt")
      ma.interpolator.set_table_eps(TOL(10))
      ma.interpolator.set_table_spacing(TOL(1))
      ma.interpolator.put
      ma.BASE:destroy_interpolators
   
      ! Create CX_isosurface
      ma.isosurface.create(m.atom)
      ma.isosurface.plot_grid.set_defaults(m.saved.atom)
      ma.isosurface.plot_grid.n_x = 2**ISOSURFACE_MINIMUM_SCAN_LEVEL + 1
      ma.isosurface.plot_grid.set_points_widths_origin
   
      ! Initialize CX_isosurface
      ma.isosurface.iso_kind = "stockholder_weight"  
      ma.isosurface.triangulation_method = "recursive_marching_cube"
      ma.isosurface.iso_value = 0.5 
      ma.isosurface.surface_property = "none"
      ma.isosurface.minimum_scan_division = 1
      ma.isosurface.voxel_proximity_factor = 5
      ma.isosurface.CX_output_distance_properties = TRUE
      ma.isosurface.CX_output_shape_properties=TRUE
    
      ! Initialize CX_isosurface.plot_grid
      ma.isosurface.plot_grid.reset_defaults ! don't reset bounding box or axes
      ma.isosurface.plot_grid.use_bcube_with_shape_axes
      ma.isosurface.plot_grid.set_cube_scale_factor(ONE)
      ma.isosurface.plot_grid.desired_separation = 0.2
      ma.isosurface.plot_grid.put
   
      ! Make isosurface
      ma.PLOT:isosurface_plot
   
      ! Output cxs surface file ... in angstrom
      ma.CX_uses_angstrom = TRUE
      output.create(trim(cxs)//trim(ma.name))
      output.open(for="write")
      ma.CE:put_CX_data(output,m.cif)       
      output.destroy

      ! Destroy for next cluster
      ma.cluster.destroy

   end

   ! Clean-up
   metal_atom.destroy
   MOLECULE.MAIN:cleanup

   ! Job timing
   stdout.flush
   word  = "job "//'"'// trim(m.name) //'"'
   ctime = std_time.elapsed_time_message(word)
   etime = std_time.elapsed_cpu_time_message(word)
   stdout.text(etime)
   stdout.text(ctime)

   ! Clean-up files
   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdout)
   TEXTFILE:destroy(stdin)

   ! Memory report
   TONTO_REPORT

   ! Clean-up tonto system
   TONTO_DESTROY

end
