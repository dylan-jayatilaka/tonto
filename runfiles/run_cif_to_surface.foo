! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! modified from run_metal_surface.foo by Dylan Jayatilaka and Peter
! Spackman 2014

program run_CIF_TO_SURFACE

    USE h5output

    implicit none

    command_line :: COMMAND_LINE
    option, value, cif,hdf :: STR
    directory :: STR
    property :: VEC{STR}(6)
    res :: REAL
    a, u, code :: INT
    found :: BIN
    m :: MOLECULE*

    ! Moment generating variables
    property_coefficients, coefficients :: VEC{CPX}*
    l_max :: INT
    radius :: REAL
    d_e_atoms, d_i_atoms, atoms_inside, atoms_outside, in, out :: VEC{INT}*
    invariants :: VEC{REAL}*
    surface :: MAT{REAL}*
    d_e, d_i, d_norm, d_norm_e, d_norm_i :: VEC{REAL}*
    spherical :: SPHERICAL*
    unit_cell :: VEC{STR}(len=2)* ! chemical symbols in unit cell
    loc_id :: INT
    ! Macro to create Tonto system object
    ! Initialise MPI parallel stuff too.
    TONTO_CREATE

    ! Initialise standard I/O files.
    ! Always have this.
    std_time.start_timing

    stdin.create_stdin; !stdin.open
    stdout.create_stdout ! ; stdout.open
    stderr.create_stderr; stderr.open

    ! Get the command line
    command_line.process_options
    DIE_IF(command_line.has_arguments,"illegal arguments; use options only")

    ! Default options
    cif = "input.cif"
    hdf = "output.hdf5"
    res = 0.5
    l_max = 10
    ! Analyze command line options
    do a = 1,command_line.n_options

        ! Get options
        option = command_line.option(a)
        value  = command_line.option_value(a)

            ! Analyze options
        select case (option)
            case("cif");  cif = value
            case("hdf");  hdf = value
            case("res");  res = value.to_real
            case("lmax");  l_max = value.to_int
            case default; DIE("unknown option: "//trim(option))
        end

    end

    property(1) = "d_e"
    property(2) = "d_i"
    property(3) = "d_norm_e"
    property(4) = "d_norm_i"
    property(5) = "d_norm"
    property(6) = "shape"

    ! Initialize molecule
    m.BASE:create
    GAUSSIAN_DATA:set_indices(GAUSSIAN_DATA_L_MAX)

    ! Tonto banner
    !MOLECULE.MAIN:put_banner

    ! Script banner
    stdout.flush
    stdout.text("====================================")
    stdout.text("Standalone Hirshfeld surface program")
    stdout.text("====================================")
    stdout.flush
    stdout.text(". This program generates a Hirshfeld surface and its")
    stdout.text("  corresponding fingerprint directly from a cif file")
    stdout.flush
    stdout.text(". It only works for Z'==1 now ... ")
    stdout.flush
    stdout.show("CIF file     =",cif)
    stdout.show("hdf file     =",hdf)
    stdout.show("l_max        =", l_max)

    ! Set basis_set library folder
    directory = "./basis_sets"
    m.basis.set_library_directory(directory)
    m.slaterbasis.set_library_directory(directory)
    m.coppensbasis.set_library_directory(directory)

    ! Set Thakkar basis set
    m.BASE:set_slaterbasis_name("Thakkar")
    ! Create CIF object
    m.cif.create
    m.cif.set_file_name(cif)

    ! Set CIF to use bond-length normalization
    m.cif.CH_bond_length = 1.083
    m.cif.NH_bond_length = 1.009
    m.cif.OH_bond_length = 0.983
    m.cif.BH_bond_length = 1.180
    m.cif.CH_bond_length.convert_from("angstrom")
    m.cif.NH_bond_length.convert_from("angstrom")
    m.cif.OH_bond_length.convert_from("angstrom")
    m.cif.BH_bond_length.convert_from("angstrom")

    ! Find CIF data block
    m.CE:find_CIF_crystal_data_block(m.cif,found)
    DIE_IF(NOT found,"no data block found in the CIF file!")

    ! Read/process CIF
    m.XTAL:read_CIF_atoms(m.cif)
    m.XTAL:read_CIF_crystal(m.cif)

    ! Initialize cluster for HS
    m.cluster.create(m.crystal)
    m.cluster.set_generation_method("for_hirshfeld_surface")
    m.cluster.atom_density_cutoff = 1.0e-8
    m.cluster.defragment = FALSE
    m.cluster.make_info
    !m.cluster.put
    m.XTAL:create_cluster

    ! Initialize interpolator for HS
    m.interpolator.create
    m.interpolator.set_interpolation_method("linear")
    m.interpolator.set_domain_mapping("sqrt")
    m.interpolator.set_table_eps(TOL(10))
    m.interpolator.set_table_spacing(TOL(1))
    m.BASE:destroy_interpolators

    ! Create CX_isosurface
    m.isosurface.create(m.atom)
    m.isosurface.plot_grid.set_defaults(m.saved.atom)
    m.isosurface.plot_grid.n_x = 2**ISOSURFACE_MINIMUM_SCAN_LEVEL + 1
    m.isosurface.plot_grid.set_points_widths_origin

    ! Initialize CX_isosurface
    m.isosurface.property = "stockholder_weight"
    m.isosurface.triangulation_method = "recursive_marching_cube"
    m.isosurface.iso_value = 0.5
    m.isosurface.surface_property = "none"
    m.isosurface.minimum_scan_division = 1
    m.isosurface.voxel_proximity_factor = 5
    m.isosurface.CX_output_distance_properties = TRUE
    m.isosurface.CX_output_shape_properties = FALSE

    ! Initialize CX_isosurface.plot_grid
    m.isosurface.plot_grid.reset_defaults ! don't reset bounding box or axes
    m.isosurface.plot_grid.use_bcube_with_shape_axes
    m.isosurface.plot_grid.set_cube_scale_factor(ONE)

    ! Desired separation is essentially the resolution of the calculated surface
    m.isosurface.plot_grid.desired_separation = res

    ! Make isosurface
    m.PLOT:isosurface_plot

    ! Output hdf surface file ... in angstrom
    !m.CX_uses_angstrom = TRUE
    !output.create(trim(hdf))
    !output.open(for="write")
    !m.CE:put_CX_data(output,m.cif)

    out.create(m.saved.cluster.nonfragment_atom_indices.dim)
    in.create(m.saved.cluster.fragment_atom_indices.dim)

    in = m.saved.cluster.fragment_atom_indices
    out = m.saved.cluster.nonfragment_atom_indices

    ! GET FINGERPRINT DISTANCES (D_E etc)

    d_i.create(m.isosurface.n_pt)
    d_e.create(m.isosurface.n_pt)
    d_norm_i.create(m.isosurface.n_pt)
    d_norm_e.create(m.isosurface.n_pt)
    d_norm.create(m.isosurface.n_pt)


    m.isosurface.make_fingerprint_distances(d_e,d_i,d_norm_e,d_norm_i,d_norm,in,out,m.isosurface.atom, angstrom = TRUE)

    ! DE AND DI FACE ATOMS
    d_e_atoms.create(m.isosurface.n_face)
    d_i_atoms.create(m.isosurface.n_face)
    m.isosurface.make_fingerprint_face_atoms(d_e_atoms,d_i_atoms,in,out)

    ! spherical harmonic decomposition
    spherical.create
    surface.create(m.isosurface.n_pt, 3)
    surface = transpose(m.isosurface.point) 
    radius = SPHERICAL:get_surface_decomposition(coefficients, property_coefficients, l_max, 434, surface, d_norm)

    ! DO THE STEPS THAT WILL BE TAKEN IN PUT_CX WHEN ANGSTROM IS TRUE
    m.isosurface.point = m.isosurface.point * ANGSTROM_PER_BOHR
    m.isosurface.face = m.isosurface.face - 1

    ! MAKE INVARIANTS
    spherical.make_invariants(coefficients, l_max, invariants)

    ! get the unit cell labels
    unit_cell.create(m.saved.cluster.crystal.n_unit_cell_atoms)

    ! ATOM SYMBOLS IN THE UNIT CELL
    do u = 1, m.saved.cluster.crystal.n_unit_cell_atoms
      a = m.saved.cluster.crystal.asym_atom_for_unit_cell_atom(u)
      unit_cell(u) = trim(m.saved.cluster.asymmetric_unit_atom(a).chemical_symbol)
    end

    ! ATOMS INSIDE AND OUTSIDE SURFACE 
    atoms_inside.create(m.saved.cluster.n_fragment_atoms)
    do a = 1, m.saved.cluster.n_fragment_atoms
      code = m.saved.cluster.occupation_list(a)    
      atoms_inside(a) = CLUSTER_UA_FROM_CODE(code) 
    end

    atoms_outside.create(m.saved.cluster.n_atoms - m.saved.cluster.n_fragment_atoms)

    do a = m.saved.cluster.n_fragment_atoms+1, m.saved.cluster.n_atoms
      code = m.saved.cluster.occupation_list(a)    
      atoms_outside(a - m.saved.cluster.n_fragment_atoms) = CLUSTER_UA_FROM_CODE(code) 
    end

    
    ! HDF5 STUFF
    call init_hdf
    call create_hdf_file(hdf, loc_id)

    ! SURFACE
    call create_dataset_mat(loc_id, "vertices", m.isosurface.point)
    call create_dataset_mat(loc_id, "indices", m.isosurface.face)
    call create_dataset_vec(loc_id, "atoms_inside_surface", atoms_inside)
    call create_dataset_vec(loc_id, "atoms_outside_surface", atoms_outside)
    call create_dataset_vec(loc_id, "d_e_face_atoms", d_e_atoms)
    call create_dataset_vec(loc_id, "d_i_face_atoms", d_i_atoms)

    ! SURFACE PROPERTIES
    call create_dataset_vec(loc_id, "d_e", d_e)
    call create_dataset_vec(loc_id, "d_i", d_i)
    call create_dataset_vec(loc_id, "d_norm", d_norm)
    call create_dataset_vec(loc_id, "d_norm_i", d_norm_i)
    call create_dataset_vec(loc_id, "d_norm_e", d_norm_e)

    ! CIF INFO
    call create_dataset_vec(loc_id, "unit_cell", unit_cell)
    call create_dataset_str(loc_id, "formula", m.crystal.CIF_chemical_formula)

    ! SPHERICAL HARMONICS STUFF
    call create_dataset_vec(loc_id, "coefficients",coefficients)
    call create_dataset_vec(loc_id,"property_coefficients ", property_coefficients)
    call create_dataset_vec(loc_id, "invariants", invariants)


    ! CLEANUP ALL THE HEAP ALLOCATED ARRAYS
    coefficients.destroy
    invariants.destroy
    property_coefficients.destroy
    d_norm_e.destroy
    d_norm_i.destroy
    d_norm.destroy
    d_i.destroy
    d_e.destroy
    out.destroy
    in.destroy


    call close_hdf

    TONTO_REPORT
    ! Destroy for next cluster
    m.cluster.destroy

    m.MAIN:cleanup
    ! Clean-up files
    TEXTFILE:destroy(stdout)
    TEXTFILE:destroy(stderr)
    TEXTFILE:destroy(stdin)

    ! Memory report
    TONTO_REPORT

    ! Clean-up tonto system
    TONTO_DESTROY

end
