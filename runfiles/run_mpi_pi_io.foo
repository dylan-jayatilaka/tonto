! Copyright (C) Dylan Jayatilaka, 2007
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: $


program run_PI_IO

!  This program generates pi by Reimann integration.
!  It uses the formula pi = \int_0^1 4/(1+x^2) dx.

   implicit none

   pi,h,x :: REAL  
   i,n :: INT

   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   ! Initialise standard I/O files too.
   TONTO_CREATE ! Always have these lines
   stdout.create_stdout; stdout.open  
   stdin.create_stdin;   stdin.open
   stderr.create_stderr; stderr.open

   ! Set how many Riemann blocks
   n = 100000000
   stdin.read(n)
   stdout.show("No. of intervals = ",n)

   ! Start the timer
   std_time.start_timing  

   ! Pi = Integral[0,1] 4/(1+x^2) dx
   pi = ZERO    
   h  = ONE/n  
   parallel do i = 1,n ! <<< Parallel loop
      x  = h * (i-HALF)           
      pi = pi + h * FOUR/(ONE+x*x) 
   end

   ! Sum all processor answers in "pi"
   PARALLEL_SUM(pi)                

   ! Report answer
   stdout.show("Pi = ",pi)         
   
   ! Stop timing & report time
   std_time.stop_timing
   stdout.text(std_time.elapsed_time_message)
   stdout.text(std_time.elapsed_cpu_time_message)

   ! Clean up standard files and Tonto system object
   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdin)
   TEXTFILE:destroy(stdout)
   TONTO_DESTROY

end
