! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_vec{int}.foo 2676 2005-02-17 14:33:58Z dylan $

program run_VEC{INT}

   implicit none

   mask :: VEC{BIN}@
   perm :: VEC{INT}@
   indices,ind :: VEC{INT}@
   list,list1,list2 :: VEC{INT}@
   test :: BIN

   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE

   ! IO files for error messages
   stderr.create_stderr
   stderr.open_for("write")

   stdout.destroy
   stdout.create_stdout

   list.create(10)
   indices.create(10)
   ind.create(3)

   list = [ 10, 7, 8, 2, 9, 5, 4, 3, 1, 5 ]

   stdout.flush
   stdout.text("A list of numbers:")
   stdout.put(list,by_column=TRUE)

   stdout.text("Sorted list:")
   list.quick_sort(indices)
   stdout.put(list(indices),by_column=TRUE)

   stdout.text("Reverse sorted list:")
   list.quick_sort(indices,decreasing_order=TRUE)
   stdout.put(list(indices),by_column=TRUE)

   stdout.text("list, prune 7:")
   list.prune(7)
   stdout.put(list,by_column=TRUE)

 ! stdout.text("spread(list,2,3):")
 ! stdout.put(spread(list,2,3))
 ! stdout.text("spread(9,3,5),1,list-dim):")
 ! stdout.put(spread([9,3,5],1,list.dim))
 ! stdout.text("any(spread(list,2,3)/=spread([9,3,5],1,list.dim)):")
 ! stdout.put(spread(list,2,3)/=spread([9,3,5],1,list.dim))
 ! stdout.text("list mask before prune (9,3,5):")
 ! mask = any(spread(list,2,3)==spread([9,3,5],1,list.dim),dim=2)
 ! stdout.put(mask,by_column=TRUE)
 ! stdout.text("packed:")
 ! stdout.put(pack(list,mask),by_column=TRUE)
 ! stdout.text("list, prune (9,3,5):")
 ! stop

   stdout.text("list .intersect. [9,3,5]:")
   list1 = list.intersection_with([9,3,5])
   stdout.put(list1,by_column=TRUE)

   stdout.show("list:",list)
   stdout.show("indices:",list)
   stdout.show("list, indices ... common?    ",list.has_elements_common_with(indices))
   stdout.show("list, indices ... not common?",list.has_no_elements_common_with(indices))
   stdout.text("list, indices, common elements:")
   stdout.put(list.elements_common_with(indices),by_column=TRUE)

   ind = [ 10, 12, 8 ]

   stdout.show("list, ind ... common?    ",list.has_elements_common_with(ind))
   stdout.show("list, ind ... not common?",list.has_no_elements_common_with(ind))

   stdout.text("list, ind, common elements:")
   stdout.put(list.elements_common_with(ind),by_column=TRUE)
   stdout.text("list, ind, uncommon elements:")
   stdout.put(list.elements_uncommon_with(ind),by_column=TRUE)

   list1.create(4)
   list2.create(4)
   perm.create(4)
   list1 = [ 10, 10, 8, 8  ]
   list2 = [  8,  8, 10, 10]
   list1.is_permutation_of(list2,test,perm)
   stdout.text("list1.is_permutation_of(list2,test,perm)")
   stdout.show("list1          :",list1)
   stdout.show("list2          :",list2)
   stdout.show("is permutation?:",test)
   stdout.show("list2          :",list2)
   stdout.show("list2(perm)    :",list2(perm))

   ! Clean-up files
   TEXTFILE:destroy(stdout)
   TEXTFILE:destroy(stderr)

   ! Clean-up tonto system
   TONTO_DESTROY

end
