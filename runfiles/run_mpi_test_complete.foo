! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_mpi_test.foo 3505 2011-06-26 18:16:54Z dylan_ $

program run_MPI_TEST_COMPLETE

   USE SYSTEM_MODULE

   implicit none
   

   test_parallel :: TEST_PARALLEL
   int_a,int_b,rank :: INT
   str_a,str_b :: STR
   bin_a,bin_b :: BIN
   real_a,real_b :: REAL
   cpx_a,cpx_b :: CPX
   int_va,int_vb :: VEC{INT}@
   str_va,str_vb :: VEC{STR}@
   bin_va,bin_vb :: VEC{BIN}@
   real_va,real_vb :: VEC{REAL}@
   cpx_va,cpx_vb :: VEC{CPX}@
   int_ma,int_mb :: MAT{INT}@
   str_ma,str_mb :: MAT{STR}@
   bin_ma,bin_mb :: MAT{BIN}@
   real_ma,real_mb :: MAT{REAL}@
   cpx_ma,cpx_mb :: MAT{CPX}@
   parallel :: SYSTEM@
   
#ifdef MPI      
   test_parallel.send_testing_suite
   
   
   !allocate(parallel)
   !
   !! Test that parallel can initialize and finalize.
   !print*, "Hello World I am pre in parallel"
   !parallel.init
   !parallel.comm_rank(rank)
   !print*, "Hello World I am in parallel processor", rank
   !
   !
   !! Test the ability to send integers between processors
   !int_a = 9
   !int_b = 7
   !if(rank == 0 ) then
   !   parallel.send(int_a,1)
   !print*,"My send buffer is: ",int_a,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(int_b,0)
   !print*,"My recv buffer is: ",int_b,"From rank: ", rank
   !end if

   !! Test the ability to send strings between processors
   !str_a = "null"
   !str_b = "cool"
   !if(rank == 0 ) then
   !   parallel.recv(str_a,1)
   !print*,"My recv buffer is: ",str_a,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.send(str_b,0)
   !print*,"My send buffer is: ",str_b,"From rank: ", rank
   !end if

   !! Test the ability to send binary between processors
   !bin_a = TRUE 
   !bin_b = FALSE
   !if(rank == 0 ) then
   !   parallel.send(bin_a,1)
   !print*,"My send buffer is: ",bin_a,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(bin_b,0)
   !print*,"My recv buffer is: ",bin_b,"From rank: ", rank
   !end if

   !! Test the ability to send reals between processors
   !real_a = 4.5
   !real_b = 45.213
   !if(rank == 0 ) then
   !   parallel.send(real_a,1)
   !print*,"My send buffer is: ",real_a,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(real_b,0)
   !print*,"My recv buffer is: ",real_b,"From rank: ", rank
   !end if

   !! Test the ability to send complexes between processors
   !cpx_a = cmplx(4.5,23)
   !cpx_b = cmplx(13,3.14)
   !if(rank == 0 ) then
   !   parallel.send(cpx_a,1)
   !print*,"My send buffer is: ",cpx_a,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(cpx_b,0)
   !print*,"My recv buffer is: ",cpx_b,"From rank: ", rank
   !end if

   !! Test the ability to send vector integers between processors
   !int_va = [1,5]
   !int_vb = [0,0]
   !if(rank == 0 ) then
   !   parallel.send(int_va,1)
   !print*,"My vector send buffer is: ",int_va,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(int_vb,0)
   !print*,"My vector recv buffer is: ",int_vb,"From rank: ", rank
   !end if

   !! Test the ability to send vector strings between processors
   !str_va = ["nl","nu","ll"]
   !str_vb = ["a   ","cool","dog "]
   !if(rank == 0 ) then
   !   parallel.recv(str_va,1)
   !print*,"My vector recv buffer is: ",str_va,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.send(str_vb,0)
   !print*,"My vector send buffer is: ",str_vb,"From rank: ", rank
   !end if

   !! Test the ability to send vector binary between processors
   !bin_va = [TRUE,FALSE,FALSE,TRUE]
   !bin_vb = [FALSE,FALSE,FALSE,FALSE]
   !if(rank == 0 ) then
   !   parallel.send(bin_va,1)
   !print*,"My vector send buffer is: ",bin_va,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(bin_vb,0)
   !print*,"My vector recv buffer is: ",bin_vb,"From rank: ", rank
   !end if

   !! Test the ability to send vector reals between processors
   !real_va = [4.5,0.0,72.0]
   !real_vb = [0,0,0]
   !if(rank == 0 ) then
   !   parallel.send(real_va,1)
   !print*,"My vector send buffer is: ",real_va,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(real_vb,0)
   !print*,"My vector recv buffer is: ",real_vb,"From rank: ", rank
   !end if

   !! Test the ability to send vector complexes between processors
   !cpx_va = [cmplx(4.5,23),cmplx(22.5,14)]
   !cpx_vb = [cmplx(13,3.14),cmplx(0,0)]
   !if(rank == 0 ) then
   !   parallel.send(cpx_va,1)
   !print*,"My vector send buffer is: ",cpx_va,"From rank: ", rank
   !else if(rank == 1) then
   !   parallel.recv(cpx_vb,0)
   !print*,"My vector recv buffer is: ",cpx_vb,"From rank: ", rank
   !end if


   ! Test the ability to send matrix integers between processors
!   int_ma = [1,5]
!   int_mb = [0,0]
!   if(rank == 0 ) then
!      parallel.send(int_ma,1)
!   print*,"My matrix send buffer is: ",int_ma,"From rank: ", rank
!   else if(rank == 1) then
!      parallel.recv(int_mb,0)
!   print*,"My matrix recv buffer is: ",int_mb,"From rank: ", rank
!   end if
!
!   ! Test the ability to send matrix strings between processors
!   str_ma = ["nl","nu","ll"]
!   str_mb = ["a   ","cool","dog "]
!   if(rank == 0 ) then
!      parallel.recv(str_ma,1)
!   print*,"My matrix recv buffer is: ",str_ma,"From rank: ", rank
!   else if(rank == 1) then
!      parallel.send(str_mb,0)
!   print*,"My matrix send buffer is: ",str_mb,"From rank: ", rank
!   end if
!
!   ! Test the ability to send matrix binary between processors
!   bin_ma = [TRUE,FALSE,FALSE,TRUE]
!   bin_mb = [FALSE,FALSE,FALSE,FALSE]
!   if(rank == 0 ) then
!      parallel.send(bin_ma,1)
!   print*,"My matrix send buffer is: ",bin_ma,"From rank: ", rank
!   else if(rank == 1) then
!      parallel.recv(bin_mb,0)
!   print*,"My matrix recv buffer is: ",bin_mb,"From rank: ", rank
!   end if
!
!   ! Test the ability to send matrix reals between processors
!   real_ma = [4.5,0.0,72.0]
!   real_mb = [0,0,0]
!   if(rank == 0 ) then
!      parallel.send(real_ma,1)
!   print*,"My matrix send buffer is: ",real_ma,"From rank: ", rank
!   else if(rank == 1) then
!      parallel.recv(real_mb,0)
!   print*,"My matrix recv buffer is: ",real_mb,"From rank: ", rank
!   end if
!
!   ! Test the ability to send matrix complexes between processors
!   cpx_ma = [cmplx(4.5,23),cmplx(22.5,14)]
!   cpx_mb = [cmplx(13,3.14),cmplx(0,0)]
!   if(rank == 0 ) then
!      parallel.send(cpx_ma,1)
!   print*,"My matrix send buffer is: ",cpx_ma,"From rank: ", rank
!   else if(rank == 1) then
!      parallel.recv(cpx_mb,0)
!   print*,"My matrix recv buffer is: ",cpx_mb,"From rank: ", rank
!   end if

!   parallel.finalize
!   print*, "Hello World I am NOT in parallel"
   




#endif
end program run_MPI_TEST_COMPLETE

