! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_molecule.foo 3361 2009-09-24 15:40:02Z dylan_ $

program run_MOLECULE

   implicit none

   command_line :: COMMAND_LINE
   option,value, infile,outfile,basis_library_dir :: STR
   i :: INT
   m :: MOLECULE*

   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE

   ! IO files for error messages

   stderr.create_stderr
   stderr.open_for("write")

   stdout.create_stdout

   ! Get command line
   command_line.process_options
   DIE_IF(command_line.has_arguments,"illegal arguments; use -options only e.g. -help")

   ! Default option values
   infile  = " "
   outfile = " "
   basis_library_dir = " "

   ! Analyze command line options
   do i = 1,command_line.n_options

      ! Get options
      option = command_line.option(i)
      value  = command_line.option_value(i)

      ! Analyze options
      select case (option)

      case("i","-input")
         infile  = value

      case("o","-output")
         outfile = value

      case("b","-basis-library")
         basis_library_dir = value

      case("h","-help")
         stdout.text("Usage:")
         stdout.flush
         stdout.text("  tonto [-h] [-i INPUT] [-o OUTPUT] [-v]")
         stdout.flush
         stdout.text("Optional arguments:")
         stdout.flush
         stdout.text("-h, --help")
         stdout.flush
         stdout.text("  Show this help message and exit")
         stdout.flush
         stdout.text("-i INPUT, --input INPUT")
         stdout.flush
         stdout.text("  Set input file to INPUT [default='stdin']")
         stdout.flush
         stdout.text("-o OUTPUT, --output OUTPUT")
         stdout.flush
         stdout.text("  Set output file to OUTPUT [default='stdout']")
         stdout.flush
         stdout.text("-b OUTPUT, --basis-library BASIS_LIBRARY_DIR")
         stdout.flush
         stdout.text("  Set output file to BASIS_LIBRARY_DIR [default='"// VEC_BASIS_LIBRARY_DIRECTORY//"']")
         stdout.flush
         stdout.text("-v, --version ")
         stdout.flush
         stdout.text("  Return the version of tonto and stop")

      case("v","-version")
         stdout.text("This is Tonto version"//TONTO_VERSION//" "//GIT_VERSION)
         stop

      case default
         DIE("unknown option: "//trim(option))

      end

   end

   ! Clean
   command_line.destroy_ptr_part

   ! Initialise standard I/O files.
   if (outfile/=" ") then
      stdout.destroy
      stdout.create(outfile)
      tonto.set_stdout_file(stdout)
   end
   stdout.open_for("write")

   if (infile/=" ") then
      stdin.create(infile)
   else
      stdin.create_stdin
   end

   if(basis_library_dir == " ") then
      call get_environment_variable(BASIS_LIBRARY_ENV_NAME, basis_library_dir, status=i)
   end if

   stdin.open_for("read")

   ! Run the molecule
   m.MAIN:run(basis_library_dir)

   ! Clean-up molecule
   m.MAIN:cleanup

   ! Clean-up files
   TEXTFILE:destroy(stdout)
   TEXTFILE:destroy(stdin)
   TEXTFILE:destroy(stderr)

   ! Clean-up tonto system
   TONTO_DESTROY


end
