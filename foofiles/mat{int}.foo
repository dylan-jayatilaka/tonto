!---------------------------------------------------------------------------
!
!  MAT{INT}: Integer matrix operations ...
!
! Copyright (C) Dylan Jayatilaka, 1996
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAT{INT}

   implicit none

#undef  ZERO
#define ZERO 0
#undef  ONE
#define ONE 1

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given dimensions
   end

   create(lb1,ub1,lb2,ub2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given bounds
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

! Old

   create(dim1,dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Create a matrix with the given dimensions
   end

   create(bounds) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Create a matrix with the specified "bounds" for each dimension
   end

   create(lb1,ub1,lb2,ub2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Create a matrix with the given dimensions
   end

   create(bounds1,bounds2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Create a matrix with the specified bounds for each dimension
   end

   create(bounds) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Create a matrix with the given bounds for all dimensions
   end

   destroy ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Destroy the object
   end

!  ====
!  Copy
!  ====

   create_copy(matrix) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Create a replica copy of matrix
   end

!  ============================
!  Size-of and shape operations 
!  ============================

   is_same_shape_as(a) result (res) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}), pure
   ! Returns TRUE if the matrix "a" has the same shape as "self"
   end

   is_transposed_shape_of(a) result (res) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}), pure
   ! Returns TRUE if the matrix "a" is the transposed shape of self
   end

   is_square result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Returns TRUE if the matrix is square
   end

! =======================
! Shrinking and expansion
! =======================

   shrink(dim1,dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Shrinks self to dimension dim1xdim2.  Contents are retained.
   end

   expand(dim1,dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Expands self to dimension dim1xdim2.  Contents are retained.
   end

   shrink_columns(dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Shrinks columns of self to dimension dim2. Contents are retained.
   end

   expand_columns(dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Expands the columns self to dim2.  Contents are retained.
   end

   append_columns(cols) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Append the columns "cols" onto the end of self.
   end

   append_column(col) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Append the column "col" onto the end of self.
   end

!  ====================
!  Comparison functions
!  ====================

   equals(b) result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Check if the matrix is the same as "b".
   end

   same_as(b) result (res) ::: PURE
   ! Check if the matrix is the same as "b".
      self :: IN
      b :: MAT{INT}, IN
      res :: BIN

   ENSURE(.is_same_shape_as(b),"incompatible dimensions")

      res = all(self==b)

   end

!  ================
!  Range operations
!  ================

   all_in_range(range) result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Return TRUE if all values of self are within the specified "range".
   end

   in_range(range) result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Return element ij as TRUE if self(i,j) is within the specified "range".
   end

   element_range result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Return the range (smallest and largest value) of self.
   end

!  =================
!  Inquiry functions
!  =================

   is_diagonal result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" is a diagonal matrix
   end

   has_unit_diagonal result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" has 1's as diagonal elements
   end

   has_minus_unit_diagonal result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" has -1's as diagonal elements
   end

   is_unit_matrix result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" is the unit matrix
   end

   is_inversion_matrix result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" is an inversion matrix
   ! i.e. minus the unit matrix
   end

   is_symmetric result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" is a symmetric matrix
   end

   is_antisymmetric result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" is an antisymmetric matrix
   end

   is_zero result (res) ::: pure
   ! Return TRUE if "self" is the zero matrix, i.e. every element is zero.
      self :: IN
      res :: BIN

      res = all(self==0)

   end

!  =================
!  Column operations 
!  =================

   has_column(c) result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Returns TRUE if the matrix "self" has a column "c". 
   end

   index_for_column(c) result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the index of the first column in "self" which matches "c",
   ! or else 0 is returned if there was no match.
   end

   indices_for_column(c) result (res) ::: leaky, get_from(MAT{INTRINSIC}), PURE
   ! Return the indices of columns in "self" matching "c", 
   ! or else 0 is returned if there was no match.
   end


   swap_columns(col1,col2) ::: get_from(MAT{INTRINSIC}), PURE
   ! Swap columns "col1" and "col2" of self
   end

   swap_columns(list) ::: get_from(MAT{INTRINSIC}), PURE
   ! Sequentially swap all columns in a column "list",
   ! self(:,i)      = self(:,list(i))
   ! self(:,col(i)) = self(:,i)
   end

   reverse_column_order ::: get_from(MAT{INTRINSIC}), PURE
   ! Reverse the order of the columns of self.
   end


   column_norms result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the norms of every column
   end

   get_column_norms(res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the norms of every column
   end

   get_column_dot_products(res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the dot products of every column with itself.
   ! Good for testing distances without using a sqrt.
   end

   index_of_minimum_column_norm result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Return the column index of the column with the *minimum* norm.
   end

   max_abs_column_difference result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the maximum of the absolute difference between all the column vector
   ! pairs of the matrix.
   end


   mean_column_vector result (res) ::: pure
   ! Return the mean of the column vectors.
      self :: IN
      res :: VEC{REAL}(.dim1)

      res = REALIFY(.sum_column_vectors)/.dim2

   end

   sum_column_vectors result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Sum the column vectors (i.e. rows) in "self".
   end

!  ==============
!  Row operations
!  ==============

   sum_row_vectors result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Sum the row vectors (i.e. columns) in "self".
   end

   row_norms result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the norms of every row
   end

   swap_rows(row1,row2) ::: get_from(MAT{INTRINSIC}), PURE
   ! Swap columns "row1" and "row2" of self
   end

   swap_rows(list) ::: get_from(MAT{INTRINSIC}), PURE
   ! Sequentially swap all rows in a row "list",
   ! self(i,:)       = self(list(i),:)
   end

!  ==========================================
!  Matrix algebra and vector space operations
!  ==========================================

   determinant result (res) ::: get_from(MAT{INTRINSIC}), recursive, PURE
   ! Return the determinant
   end

   adjugate(i,j) result (res) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Return the adjugate of a matrix
   end


   dot(l,r) result (res) ::: get_from(MAT{INTRINSIC}, LR?=>VEC{INT}, RES?=>INT), PURE
   ! Multiply the matrix self by vector "l" on the left and vector "r" on the
   ! right ie:  res = l^dagger self r. Useful for non-unit metric dot_products.
   end


   rotate(v) ::: get_from(MAT{INTRINSIC}), PURE
   ! Rotate vector "v" by self
   end


   to_unit_matrix ::: get_from(MAT{INTRINSIC}), pure
   ! Set "self" to the unit matrix
   end


   set_to(a) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}), PURE
   ! Set self to "a"
   end

   set_to_transpose_of(a) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}), PURE
   ! Self becomes the transpose of "a"
   end

   to_transpose ::: get_from(MAT{INTRINSIC}), PURE
   ! Self becomes its own transpose.
   end


   plus(a) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}), PURE
   ! Add to self the matrix "a"
   end

   minus(a) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}), PURE
   ! Subtract from self the matrix "a"
   end

   to_scaled(a,fac) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}, FAC?=>INT), PURE
   ! Set "self" to matrix "at" scaled by "fac"
   end

   plus_scaled(a,fac) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}, FAC?=>INT), PURE
   ! Add to "self" matrix "a" scaled by "fac"
   end

   minus_scaled(a,fac) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}, FAC?=>INT), PURE
   ! Subtract from "self" matrix "a" scaled by "fac"
   end


   to_product_of(a,b,transpose_a,transpose_b) ::: get_from(MAT{INTRINSIC}, AB?=>INT), PURE
   ! Set "self" to the matrix product of "a" and "b". If present, "transpose_a"
   ! and "transpose_b" can be set to TRUE if "a" and "b" need to be transposed.
   end

   plus_product_of(a,b,transpose_a,transpose_b) ::: get_from(MAT{INTRINSIC}, AB?=>INT), PURE
   ! Add to "self" the matrix product of "a" and "b". If present, "transpose_a"
   ! and "transpose_b" can be set to TRUE if "a" and "b" need to be transposed.
   end

   to_scaled_product_of(a,b,fac,transpose_a,transpose_b) ::: get_from(MAT{INTRINSIC}, AB?=>INT, FAC?=>INT), PURE
   ! Set "self" to the matrix product of "a" and "b" scaled by "fac". If
   ! present, "transpose_a" and "transpose_b" can be set to TRUE if "a" and "b"
   ! need to be transposed.
   end

   plus_scaled_product_of(a,b,fac,transpose_a,transpose_b) ::: get_from(MAT{INTRINSIC}, AB?=>INT, FAC?=>INT), PURE
   ! Add to "self" the matrix product of "a" and "b" scaled by "fac". If
   ! present, "transpose_a" and "transpose_b" can be set to TRUE if "a" and "b"
   ! neeb to be transposed.
   end


   to_product_with_diagonal(a,diag,transpose_a) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}, DIAG?=>VEC{INT}), PURE
   ! Set "self" to the matrix product of "a" with diagonal matrix "diag" (stored
   ! as a vector).  If present, ""transpose_a" can be set to TRUE if "a" needs
   ! to be transposed.
   end

   to_product_with_diagonal(dg,a,transpose_a) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}, DG?=>VEC{INT}), PURE
   ! Set "self" to the matrix product of diagonal matrix "dg" (stored as a
   ! vector) and "a".  If present, "transpose_a" can be set to TRUE if "a" needs
   ! to be transposed.
   end

!  ================
!  Trace operations
!  ================

   trace result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Return the trace of self
   end

   trace_product_with(a,transpose_a) result (res) ::: get_from(MAT{INTRINSIC}, A?=>MAT{INT}, RES?=>INT, CAST=>), pure
   ! Return the trace of the product of "self" with matrix "a",
   ! and if "transpose_a" is present and TRUE, then transpose "a".
   end

   trace_product_with(a,b,c) result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the trace of the product of "self" with matrices "a", "b" and "c".
   end

   trace_product_with(a,b,c,d,e) result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Return the trace of the product of "self" with matrices "a", "b" ... "e".
   end

!  ==========================
!  Operations on the diagonal
!  ==========================

   set_from_diagonal(d) ::: get_from(MAT{INTRINSIC}, D?=>VEC{INT}), PURE
   ! Converts the diagonal vector "d" to matrix "self".
   end

   set_diagonal_to(d) ::: get_from(MAT{INTRINSIC}, D?=>VEC{INT}), PURE
   ! Set the diagonal of "self" to vector "d"
   end

   set_diagonal_to(val) ::: get_from(MAT{INTRINSIC}, VAL?=>INT), PURE
   ! Set the diagonal of "self" to "val"
   end

   put_diagonal_to(d) ::: get_from(MAT{INTRINSIC}, D?=>VEC{INT}, CAST?=>), PURE
   ! Get the diagonal elements of "self" in vector "d"
   end

   increment_diagonal_by(val) ::: get_from(MAT{INTRINSIC}, VAL?=>INT), PURE
   ! Add "val" to the diagonal of "self"
   end

   scale_diagonal_by(fac) ::: get_from(MAT{INTRINSIC}, FAC?=>INT), PURE
   ! Weight the diagonal elements of "self" by "fac"
   end

   zero_diagonal ::: get_from(MAT{INTRINSIC}), PURE
   ! Zero the diagonal elements of "self"
   end

   zero_off_diagonal ::: get_from(MAT{INTRINSIC}), PURE
   ! Zero the off diagonal elements of "self"
   end

   max_diagonal_element result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Get the maximum element on the diagonal of the matrix
   end

   max_abs_diagonal_element result (res) ::: get_from(MAT{INTRINSIC}), PURE
   ! Get the maximum absolute value of the diagonal elements of the self matrix
   end

!  ========================
!  Symmetrising and folding
!  ========================

!   symmetrize ::: get_from(MAT{INTRINSIC})
!   ! Set self to half of itself plus half its transpose, i.e.
!   ! self = 1/2 (self + self^T)
!   end
!
!   antisymmetrize ::: get_from(MAT{INTRINSIC})
!   ! Set self to half of itself minus half its transpose, i.e.
!   ! self = 1/2 (self - self^T)
!   end
!
!   symmetric_fold ::: get_from(MAT{INTRINSIC})
!   ! Add the upper triangle of "self" into the lower triangle
!   end
!
!   antisymmetric_fold ::: get_from(MAT{INTRINSIC})
!   ! Subtract the upper triangle of "self" into the lower triangle
!   end
!
!   symmetric_reflect ::: get_from(MAT{INTRINSIC})
!   ! Make the upper triangle of "self" the same as the lower triangle
!   end
!
!   antisymmetric_reflect ::: get_from(MAT{INTRINSIC})
!   ! Make the upper triangle of "self" the negative of the lower triangle and
!   ! make the diagonal zero.
!   end
!
!   symmetric_fold_to_triangle(tr) ::: get_from(MAT{INTRINSIC})
!   ! Add the upper triangle of "self" into the lower triangle and return
!   ! the lower triangle "tr" as a vector across rows.
!   end

!  ======================================
!  Compression and uncompression routines
!  ======================================

   zip_lower_triangle_to(tr) ::: get_from(MAT{INTRINSIC}), pure
   ! Converts the lower triangle of "self" to the vector "tr"
   ! using row order.
   end

   symmetric_unzip_triangle(tr) ::: get_from(MAT{INTRINSIC}), pure
   ! Converts the triangle "tr" into the symmetric matrix "self".
   end

   tri_size result (ltr) ::: get_from(MAT{INTRINSIC}), pure
   ! Returns the size of the lower triangle needed to store self.
   end

!  =============
!  String widths
!  =============
   
   str_lengths(spaces) result (res) ::: get_from(MAT{INTRINSIC}), pure
   ! Returns the minimal string lengths, with optional extra "spaces"
   end 

   get_max_str_length(msl,spaces) ::: get_from(MAT{INTRINSIC}), pure
   ! Return "msl" the maximum of the string lengths, and including
   ! extra "spaces"
   end

!  ======================
!  Binning and histograms
!  ======================

   to_histogram_from_data(X,Y,X_min,X_max,X_bin,Y_min,Y_max,Y_bin) ::: leaky
   ! Set "self" to a histogram matrix whose ij-th element contains a 
   ! *count* of the values in array "data" whose elements correspond to
   ! the ij-th bin of "X" and "Y", where a 2D bin is a range of values
   ! in "X" (and "Y) of side length "X_bin" (and "Y_bin") beginning at
   ! "X_min" (and "Y_min") and ending at "X_max" (or "Y_max"). The
   ! dimension of self is calculated here.
   ! NOTE: Don't use binned data to calculate properties unless you
   ! really need to coarse grain.
      self :: PTR
      X,Y :: VEC{REAL}, IN
      X_min,X_max,X_bin :: REAL, IN
      Y_min,Y_max,Y_bin :: REAL, IN

   ENSURE(X_max>X_min,"X_max is smaller than X_min!")
   ENSURE(Y_max>Y_min,"Y_max is smaller than Y_min!")
   ENSURE(X_bin<(X_max-X_min),"X_bin size is larger than [X_min,X_max]")
   ENSURE(Y_bin<(Y_max-Y_min),"X_bin size is larger than [X_min,X_max]")

      n_X,n_Y, i,j,k :: INT
      X_ran,Y_ran :: REAL

      ! The range of value ...
      X_ran = X_max - X_min
      Y_ran = Y_max - Y_min

      ! The number of bins ...
      n_X = ceiling(X_ran/X_bin)
      n_Y = ceiling(Y_ran/Y_bin)

      ! Create the histogram (leaky)
      self.create(n_X,n_Y)
      self = 0

      ! Now do the binning ...
      do k = 1,X.dim

         ! Get the bins
         i = ceiling(min(X(k)-X_min,X_ran)/X_bin)
         j = ceiling(min(Y(k)-Y_min,Y_ran)/Y_bin)

         ! Accumulate
         self(i,j) = self(i,j) + 1

      end

   end

   bin_XY_data(X,Y,bin_side_length,data_count) ::: leaky
   ! Set self to a matrix whose ij-th element contains the number of
   ! data points [X(k),Y(k)] which lie in the ij-th bin. A bin is
   ! simply a range of values of side length "bin_side_length"
   ! covering the set of points from [X_min,Y_min] to [X_max,Y_max].
   ! The dimension of self is calculated within this routine. If
   ! "data_count" is present, then the bin count associated with each
   ! data item [X(k),Y(k)] is returned in an array.
      self :: PTR
      X,Y :: VEC{REAL}, IN
      bin_side_length :: REAL, IN
      data_count :: VEC{INT}*, optional

   ENSURE(X.dim==Y.dim,"incompatible data points")

      X_min,X_max,X_mid,X_ran :: REAL
      Y_min,Y_max,Y_mid,Y_ran :: REAL
      X_range,Y_range :: VEC{REAL}(2)
      dim,n_X,n_Y,i,j,k :: INT

      dim = X.dim

      X_min = minval(X); Y_min = minval(Y)
      X_max = maxval(X); Y_max = maxval(Y)

      X_mid = HALF*(X_min+X_max)
      Y_mid = HALF*(Y_min+Y_max)

      X_ran = X_max-X_min
      Y_ran = Y_max-Y_min

      n_X = ceiling(X_ran/bin_side_length)
      n_Y = ceiling(Y_ran/bin_side_length)

      X_min = X_mid - (n_X/TWO)*bin_side_length
      Y_min = Y_mid - (n_Y/TWO)*bin_side_length

      X_ran = X_ran/n_X
      Y_ran = Y_ran/n_Y

      ! Now do the binning ...
      self.create(n_X,n_Y)
      if (present(data_count)) data_count.create(dim)

      do i = 1,n_X
      do j = 1,n_Y

         X_range(1) = X_min + (i-1)*bin_side_length
         X_range(2) = X_range(1)  + bin_side_length

         Y_range(1) = Y_min + (j-1)*bin_side_length
         Y_range(2) = Y_range(1)  + bin_side_length

         self(i,j) = count(X.in_range(X_range) AND Y.in_range(Y_range))

         if (present(data_count)) then
         do k = 1,dim
            if (X(k).is_in_range(X_range) AND Y(k).is_in_range(Y_range)) then
            data_count(k) = self(i,j)
            end
         end
         end

      end
      end
   end

   bin_XY_data(X,Y,XY_min,XY_max,bin_side_length,data_count) ::: leaky
   ! Set self to a matrix whose ij-th element contains the number of data points
   ! [X(k),Y(k)] which lie in the ij-th bin. A bin is simply a range of values
   ! of side length "bin_side_length" covering the set of points from
   ! [X_min,Y_min] to [X_max,Y_max]. The dimension of self is calculated within
   ! this routine. If "data_count" is present, then the bin count associated
   ! with each data item [X(k),Y(k)] is returned in an array.
      self :: PTR
      X,Y :: VEC{REAL}, IN
      XY_min,XY_max,bin_side_length :: REAL, IN
      data_count :: VEC{INT}*, optional

   ENSURE(X.dim==Y.dim,"incompatible data points")

      X_min,X_max,X_mid,X_ran :: REAL
      Y_min,Y_max,Y_mid,Y_ran :: REAL
      X_range,Y_range :: VEC{REAL}(2)
      dim,n_X,n_Y,i,j,k :: INT

      dim = X.dim

      X_min = XY_min; Y_min = XY_min
      X_max = XY_max; Y_max = XY_max

      X_mid = HALF*(X_min+X_max)
      Y_mid = HALF*(Y_min+Y_max)

      X_ran = X_max-X_min
      Y_ran = Y_max-Y_min

      n_X = ceiling(X_ran/bin_side_length)
      n_Y = ceiling(Y_ran/bin_side_length)

      X_min = X_mid - (n_X/TWO)*bin_side_length
      Y_min = Y_mid - (n_Y/TWO)*bin_side_length

      X_ran = X_ran/n_X
      Y_ran = Y_ran/n_Y

      ! Now do the binning ...
      self.create(n_X,n_Y)
      if (present(data_count)) data_count.create(dim)

      do i = 1,n_X
      do j = 1,n_Y

         X_range(1) = X_min + (i-1)*bin_side_length
         X_range(2) = X_range(1)  + bin_side_length

         Y_range(1) = Y_min + (j-1)*bin_side_length
         Y_range(2) = Y_range(1)  + bin_side_length

         self(i,j) = count(X.in_range(X_range) AND Y.in_range(Y_range))

         if (NOT present(data_count)) cycle

         do k = 1,dim
            if (X(k).is_in_range(X_range) AND Y(k).is_in_range(Y_range)) then
            data_count(k) = self(i,j)
            end
         end

      end
      end
   end

!  ==========
!  Misc stuff
!  ==========

   make_diagonally_dominant(permutation) ::: get_from(MAT{INTRINSIC})
   ! Rearrange the order of the columns of self so that the largest magnitude
   ! elements in each column occur along the diagonal. If "permutation" is
   ! present, it is the array which achieves this ordering, i.e. at the end of
   ! the routine, what is done is: self = self(:,permutation).
   end

! Remove?

   to_gaussian_xyz_powers(l_max)
   ! Make "self(1:3,i)", the three xyz powers of all cartesian gaussian
   ! functions "i" of angular momentum up to "l_max", where "i" is the standard
   ! lexical index of the cartesian gaussian. (This routine essentially defines
   ! the standard order).  The shape of "self" is: [3, l_max.n_comp_sum ].
      self :: OUT
      l_max :: INT, IN
   ENSURE(.dim1==3,"wrong 1st dimension, self")
   ENSURE(.dim2==(l_max+1)*(l_max+2)*(l_max+3)/6,"wrong 2nd dimension, self")
      i,L,a,b,c :: INT
      i = 1          ! This is the total lexical index
      do L = 0,l_max ! Loop over all shells with momentum L
                    ! Loop over powers a, b, c
       do a = L,floor((L+2)*THIRD),-1
         do b = min(L-a,a),floor((L-a+1)*HALF),-1
           c = L-a-b
           if (a==b AND b==c) then
             self(:,i)   = [a,a,a]
             i = i+1
           else if (a>b AND b==c) then
             self(:,i)   = [a,b,b]
             self(:,i+1) = [b,a,b]
             self(:,i+2) = [b,b,a]
             i = i+3
           else if (a==b AND b>c) then
             self(:,i)   = [a,a,c]
             self(:,i+1) = [a,c,a]
             self(:,i+2) = [c,a,a]
             i = i+3
           else
             self(:,i)   = [a,b,c]
             self(:,i+1) = [a,c,b]
             self(:,i+2) = [b,a,c]
             self(:,i+3) = [c,a,b]
             self(:,i+4) = [b,c,a]
             self(:,i+5) = [c,b,a]
             i = i+6
           end
         end
       end
      end
   end

   to_gaussian_xyz_powers(l_max,index)
   ! Make "self(1:3,i)", the three xyz powers of all cartesian gaussian
   ! functions "i" of angular momentum up to "l_max", where "i" is the standard
   ! lexical index of the cartesian gaussian. (This routine essentially defines
   ! the standard order).  The shape of "self" is: [3, l_max.n_comp_sum ].
   ! Array "index" maps the three xyz powers of each cartesian gaussian back to
   ! its lexical index *within a shell of the same angular momentum* i.e. not
   ! the total lexical index. NOTE: "index" has lower bounds of 0, and so is
   ! passed as a pointer.
      self :: OUT
      l_max :: INT, IN
      index :: MAT3{INT}*
   ENSURE(.dim1==3,"wrong 1st dimension, self")
   ENSURE(.dim2==(l_max+1)*(l_max+2)*(l_max+3)/6,"wrong 2nd dimension, self")
   ENSURE(lbound(index,1)==0,"wrong lower bound, index")
   ENSURE(lbound(index,2)==0,"wrong lower bound, index")
   ENSURE(lbound(index,3)==0,"wrong lower bound, index")
   ENSURE(ubound(index,1)==l_max,"wrong upper bound, index")
   ENSURE(ubound(index,2)==l_max,"wrong upper bound, index")
   ENSURE(ubound(index,3)==l_max,"wrong upper bound, index")
      i,L,k,a,b,c :: INT
      i = 1              ! This is the total lexical index
      do L = 0,l_max     ! Loop over all shells with momentum L
       k = 1            ! This is the local shell lexical index
       !                  Loop over powers a, b, c
       do a = L,floor((L+2)*THIRD),-1
         do b = min(L-a,a),floor((L-a+1)*HALF),-1
           c = L-a-b
           if (a==b AND b==c) then
             self(:,i)   = [a,a,a]
             index(a,a,a) = k
             i = i+1
             k = k+1
           else if (a>b AND b==c) then
             self(:,i)   = [a,b,b]
             self(:,i+1) = [b,a,b]
             self(:,i+2) = [b,b,a]
             index(a,b,b) = k
             index(b,a,b) = k+1
             index(b,b,a) = k+2
             i = i+3
             k = k+3
           else if (a==b AND b>c) then
             self(:,i)   = [a,a,c]
             self(:,i+1) = [a,c,a]
             self(:,i+2) = [c,a,a]
             index(a,a,c) = k
             index(a,c,a) = k+1
             index(c,a,a) = k+2
             i = i+3
             k = k+3
           else
             self(:,i)   = [a,b,c]
             self(:,i+1) = [a,c,b]
             self(:,i+2) = [b,a,c]
             self(:,i+3) = [c,a,b]
             self(:,i+4) = [b,c,a]
             self(:,i+5) = [c,b,a]
             index(a,b,c) = k
             index(a,c,b) = k+1
             index(b,a,c) = k+2
             index(c,a,b) = k+3
             index(b,c,a) = k+4
             index(c,b,a) = k+5
             i = i+6
             k = k+6
           end
         end
       end
      end
   end

   floyd_warshall result (res) ::: pure
   ! find the all pairs shortest path
      self :: IN
      res :: MAT{INT}@
      i, j, k :: INT
      allocate(res(size(self,1), size(self,2)))
      res(:,:) = self(:,:)
      do k = 1, .dim1
      do i = 1, .dim1
      do j = 1, .dim1
         res(i,j) = min(res(i,j), res(i,k) + res(k,j))
      end do
      end do
      end do
   end




end
