!---------------------------------------------------------------------------
!
! VEC{EVEC{INTRINSIC}} : an array of elements each of which is 
! a vector of intrinsic elements, possible of different length
!
! Copyright (C) Dylan Jayatilaka, 2020
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{EVEC{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(bounds) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower and upper bounds in "bounds"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   create(dim,dimv) ::: leaky, PURE
   ! Allocate vector of vectors
      self :: allocatable, OUT
      dim,dimv :: INT, IN

      .create([1,dim],[1,dimv])

   end

   create(bounds1,bounds2) ::: leaky, PURE
   ! Create space for a vector of vectors
      self :: allocatable, OUT
      bounds1 :: VEC{INT}(2), IN
      bounds2 :: VEC{INT}(2), IN

      .create(bounds1)
      .create_vec(bounds2)

   end

   create_vec(bounds) ::: leaky, PURE
   ! Allocate the vector parts of "self"
      self :: INOUT
      bounds :: VEC{INT}(2), IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(bounds)
      end

   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   max_element_dim result (res) ::: pure
   ! Return the maximum element dimension
      self :: IN
      res :: INT

      s :: INT

      res = 0

      do s = 1,.dim
         res = max(res,self(s).element.dim)
      end

   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}, INIT?=>0), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

   append_fifo(value,length) ::: leaky, PURE
   ! Expands self and insert "value"; if equal to "length", push the
   ! first/oldest vectors down/up the list
      self :: allocatable, INOUT
      length :: INT, IN
      value :: VEC{INTRINSIC}, IN

   ENSURE(.dim<=length,"self is larger than length")

      dim :: INT

      dim = .dim

      if (dim==length) then

         ! Move down & add to end
         self(1:length-1) = self(2:length)
         self(dim).element = value

      else

         ! Expand by one and add
         .expand(dim+1)
         self(dim+1).element = value

      end

   end

   append_listed_to(res,list) ::: leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
      self :: IN
      list :: VEC{INT}, IN
      res :: VEC{INTRINSIC}@, OUT

   ENSURE(list.dim>=1,"list must not have zero dimension")
   ENSURE(maxval(list)<=.dim,"some elements of list are too large")
   ENSURE(minval(list)>=1,"list elements must be +ve")

      i :: INT

      res = [ (self(list(i)).element(:), i = 1,list.dim) ]

   end

end

