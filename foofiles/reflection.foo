!-------------------------------------------------------------------------------
!
! REFLECTION: Reflection data for crystals
!
! Copyright (C) Daniel Grimwood, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module REFLECTION

   implicit none

   keys DEFAULT_NULL :: VEC{STR}*, private

   ! Particle wavelength for setting sin(theta)/lambda
   ! - it must be set to a sensible value
   ! - it must be in au
   wavelength0 :: REAL, private = -ONE

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object. This version does not nullify point parts.
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object. This version does not destroy pointer parts.
   end

!  ====
!  Copy
!  ====

   create_copy(object) ::: get_from(OBJECT), leaky, PURE
   ! Create a copy of object
   end

   copy(r) ::: pure
   ! Make a copy of the reflection "r"
      self :: INOUT
      r :: REFLECTION, IN

      self = r

   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: pure
   ! Set up a default object
      self :: INOUT

      .h = 0
      .k = 0
      .l = 0

      .theta   = ZERO
      .equivalence_factor = 1

      .F_exp   = ZERO
      .F_calc  = ZERO
      .F_pred  = ZERO
      .F_sigma = ZERO

      .I_exp   = ZERO
      .I_calc  = ZERO
      .I_pred  = ZERO
      .I_sigma = ZERO

      .group   = 0

   end

   set_wavelength(val) ::: selfless, public
   ! Set the wavelength in a.u.
      val :: REAL, IN

      wavelength0 = val

   end

   set_hkl(vec) ::: pure
   ! Set (h k l) to "vec"
      self :: INOUT
      vec :: VEC{INT}(3), IN

      .h = vec(1)
      .k = vec(2)
      .l = vec(3)

   end


   set_F_pred(val) ::: pure
   ! Set predicted structure factor magnitude F_pred to "val".
      self :: INOUT
      val :: REAL, IN

      .F_pred = val

   end

   set_F_calc(val) ::: pure
   ! Set calculated structure factor magnitude F_calc to "val".
      self :: INOUT
      val :: CPX, IN

      .F_calc = val

   end

   set_F_disp(val) ::: pure
   ! Set anomalous dispersion conntribution to F_calc.
      self :: INOUT
      val :: CPX, IN

      .F_disp = val

   end

   add_F_disp(val) ::: pure
   ! Set anomalous dispersion conntribution to F_calc
   ! *and* add the contribution into F_calc.
      self :: INOUT
      val :: CPX, IN

      .F_disp = val
      .F_calc = .F_calc + val

   end

   set_F_exp(val) ::: pure
   ! Set experimental structure factor magnitude F_exp to "val".
   ! Also set F_corr in case we do not want to add dispersion.
   ! Do not do any sanity checks.
      self :: INOUT
      val :: REAL, IN

      .F_exp  = val
      .F_corr = val 

   end

   set_F_sigma(val) ::: pure
   ! Set the experimentally determined F_sigma to "val".
   ! Do not do any sanity checks.
      self :: INOUT
      val :: REAL, IN

      .F_sigma = val

   end

   reset_F_exp_F_sigma ::: pure
   ! Reset F_exp and F_sigma to sensible values.
   ! NOTE: -ve F_sigma must have been previously pruned.
      self :: INOUT

      if (.F_exp<ZERO) then

         .F_sigma = .F_sigma + abs(.F_exp) 
         .F_exp   = ZERO

      end

   !  .derive_Is_from_Fs

   end

!   derive_Is_from_Fs ::: private, pure
!   ! I_sigma is calculated by taking the *largest* difference between
!   ! I_exp and the square of the F_exp range-mapped range.
!   ! NOTE: F_exp must be positive at this stage, and F_sigma adjusted
!      self :: INOUT
!
!      s_p,s_m :: REAL
!
!      .I_exp = .F_exp*.F_exp
!
!      if (.F_exp>.F_sigma) then
!         s_p = -.I_exp + (.F_exp + .F_sigma)**2
!         s_m =  .I_exp - (.F_exp - .F_sigma)**2
!      else
!         s_p = -.I_exp + (.F_exp + .F_sigma)**2
!         s_m =  .I_exp
!      end
!
!      .I_sigma = max(s_p,s_m)
!
!   end


   set_I_pred(val) ::: pure
   ! Set predicted structure factor intensity I_pred to "val".
      self :: INOUT
      val :: REAL, IN

      .I_pred = val

   end

   set_I_calc(val) ::: pure
   ! Set calculated structure factor intensity I_calc to "val".
      self :: INOUT
      val :: REAL, IN

      .I_calc = val

   end

   set_I_exp(val) ::: pure
   ! Set the experimental F2 value, called I_exp.
   ! Do no sanity checks.
      self :: INOUT
      val :: REAL, IN

      .I_exp = val

   end

   set_I_sigma(val) ::: pure
   ! Read in the experimental F2_sigma i.e. I_sigma
   ! Do not perform any sanity checks.
      self :: INOUT
      val :: REAL, IN

      .I_sigma = val

   end

   reset_I_exp_I_sigma ::: pure
   ! Reset I_exp and I_sigma to sensible values.
   ! NOTE: -ve I_sigma must have been previously pruned.
      self :: INOUT

      if (.I_exp<ZERO) then 

         .I_sigma = abs(.I_exp) + .I_sigma
         .I_exp   = ZERO

      end

      .derive_Fs_from_Is

   end

   derive_Fs_from_Is ::: private, pure
   ! The F_sigma value is calculated by solving the quadratic which
   ! gives the *largest* sigma value, which when added to .F_exp and
   ! squared gives .I_exp+.I_sigma.
   ! NOTE: I_exp must be positive at this stage, and I_sigma adjusted
   ! NOTE: After this I_exp/I_sigma are set to zero
      self :: INOUT

      s_p,s_m :: REAL

      .F_exp = sqrt(.I_exp)

      ! s_p/s_m are upper/lower error ranges
      if (.I_exp>.I_sigma) then
         s_p = -.F_exp + sqrt(.I_exp+.I_sigma)
         s_m =  .F_exp - sqrt(.I_exp-.I_sigma)
      else
         s_p = -.F_exp + sqrt(.I_exp+.I_sigma)
         s_m =  .F_exp
      end

      .F_sigma = max(s_p,s_m)

      .I_exp   = ZERO
      .I_sigma = ZERO

   end


   miller_indices result (vec) ::: pure
   ! Return the Miller indices (h k l)
      self :: IN
      vec :: VEC{INT}(3)

      vec(1) = .h
      vec(2) = .k
      vec(3) = .l

   end

   hkl result (vec) ::: pure
   ! Set (h k l) to "vec"
      self :: IN
      vec :: VEC{INT}(3)

      vec(1) = .h
      vec(2) = .k
      vec(3) = .l

   end

   hkl_str result (res) ::: pure
   ! Set (h k l) to "vec"
      self :: IN
      res :: STR

      res = trim(.h.to_str)//" "//trim(.k.to_str)//" "//trim(.h.to_str)

   end

!  ============
!  I/O Routines
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the
   ! "keyword" is inputted from "stdin".
   ! NOTE: These need reflections need pruning & finalizing
   !       to remove negative values
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case ("}            "); ! exit surrounding loop
      case ("f_exp=          "); .read_F_exp
      case ("f_pred=         "); .read_F_pred
      case ("f_sigma=        "); .read_F_sigma
      case ("group=          "); .read_group
      case ("h=              "); .read_h
      case ("indices=        "); .read_indices
      case ("i_exp=          "); .read_I_exp
      case ("i_pred=         "); .read_I_pred
      case ("i_sigma=        "); .read_I_sigma
      case ("junk=           "); .read_junk
      case ("k=              "); .read_k
      case ("l=              "); .read_l
      case ("units=          "); .read_units
      case default;         UNKNOWN(word)
      end

   end

   read_units ::: get_from(OBJECT), private
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT), private
   ! Read in a junk string, useful for ignoring a field
   end

   read_group
   ! Read the group index that this reflection belongs to.
      stdin.read(.group)
   end

   read_h
   ! Read in the "h" Miller index
      stdin.read(.h)
   end

   read_k
   ! Read in the "k" Miller index
      stdin.read(.k)
   end

   read_l
   ! Read in the "l" Miller index
      stdin.read(.l)
   end

   read_indices
   ! Read in the h k l Miller indices as a triple
      stdin.read(.h)
      stdin.read(.k)
      stdin.read(.l)
   end

   read_F_exp
   ! Read in the experimentally determined structure factor
      self :: INOUT

      val :: REAL

      stdin.read(val)

      .set_F_exp(val)

   end

   read_F_sigma
   ! Read in the experimentally determined standard devaiation in
   ! the structure factor
      self :: INOUT

      val :: REAL

      stdin.read(val)

      .set_F_sigma(val)

   end

   read_I_exp
   ! Read in the experimentay F2 i.e. I_exp 
   ! NOTE: F_exp is overwritten!
   ! NOTE: The sign of I_exp is preserved on F_exp
      self :: INOUT

      val :: REAL

      stdin.read(val)

      .set_I_exp(val)

   end

   read_I_sigma
   ! Read in the experimentay F2_sigma i.e. I_ sigma
   ! You must have already inputted the I_exp= value. The sigma value is
   ! calculated by solving the quadratic which gives the *largest* sigma
   ! value, which when added to .F_exp and squared gives .I_exp+.I_sigma.
      self :: INOUT

      val :: REAL

      stdin.read(val)

      .set_I_sigma(val)

   end

   read_F_pred
   ! Read in a predicted (real) structure factor
      stdin.read(.F_pred)
   end

   read_I_pred
   ! Read in a predicted intensity
   ! NOTE: if it is negative, the sign is preserved on F_pred, for
   ! later rejection.
   ! NOTE: F_pred is overwritten!
      stdin.read(.I_pred)
      if (.I_pred<ZERO) then; .F_pred = -sqrt(-.I_pred)
      else;                   .F_pred =  sqrt( .I_pred)
      end
   end

!  ====================
!  Key related routines
!  ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

!  ================
!  Inquiry Routines
!  ================

   wavelength result (res) ::: selfless, pure
   ! The wavelength
      res :: REAL

      res = wavelength0

   end

   indices result (res) ::: pure
   ! The wavelength
      self :: IN
      res :: VEC{INT}(3)

      res = [.h,.k,.l]

   end

   delta_F result (res) ::: elemental
   ! Return the Delta F for the predicted structure factor.
      self :: IN
      res :: REAL
      res = (.F_pred - .F_exp)
   end

   abs_delta_F result (res) ::: elemental
   ! Return the abs(Delta F) for the predicted structure factor.
      self :: IN
      res :: REAL
      res = abs(.F_pred - .F_exp)
   end

   abs_delta_F2 result (res) ::: elemental
   ! Return the abs(Delta (F2)) for the predicted structure factor.
      self :: IN
      res :: REAL

      res = abs(.F_pred*.F_pred - .F_exp*.F_exp)

   end

   F_z result (res) ::: elemental
   ! Return the z statistic for the predicted structure factor.
      self :: IN
      res :: REAL

      res = (.F_pred - .F_exp) / .F_sigma

   end

   I_z result (res) ::: elemental
   ! Return the z statistic for the predicted intensity.
      self :: IN
      res :: REAL
      res = (.I_pred - .I_exp) / .I_sigma
   end

   abs_F_z result (res) ::: elemental
   ! Return the abs of the z statistic for the predicted structure factor.
      self :: IN
      res :: REAL
      res = (.F_pred - .F_exp) / .F_sigma
      res = abs(res)
   end

   abs_I_z result (res) ::: elemental
   ! Return the abs of the z statistic for the predicted intensity.
      self :: IN
      res :: REAL
      res = (.I_pred - .I_exp) / .I_sigma
      res = abs(res)
   end

   F_z2 result (res) ::: elemental
   ! Return the z**2 statistic for the predicted structure factor.
      self :: IN
      res :: REAL
      z :: REAL
      z = (.F_pred - .F_exp) / .F_sigma
      res = z*z
   end

   I_z2 result (res) ::: elemental
   ! Return the z**2 statistic for the predicted intensity.
      self :: IN
      res :: REAL
      z :: REAL
      z = (.I_pred - .I_exp) / .I_sigma
      res = z*z
   end


   F2_z result (res) ::: elemental
   ! Return the z statistic for F2, the structure factor squared.
      self :: IN
      res :: REAL

      res = (.F_pred*.F_pred - .F_exp*.f_exp) / (.F_sigma*.F_sigma)

   end

   F2_z2 result (res) ::: elemental
   ! Return the square of the z statistic for F2.
      self :: IN
      res :: REAL

      res = (.F_pred*.F_pred - .F_exp*.f_exp) / (.F_sigma*.F_sigma)
      res = res*res

   end


   F_ratio result (res) ::: elemental
   ! Return the ratio F_exp/F_pred
      self :: IN
      res :: REAL
      res = .F_exp/.F_pred
   end

   I_ratio result (res) ::: elemental
   ! Return the ratio I_exp/FIpred
      self :: IN
      res :: REAL
      res = .I_exp/.I_pred
   end

   F_r result (res) ::: elemental
   ! Return the r factor for the predicted structure factor.
      self :: IN
      res :: REAL
      res = (.F_pred - .F_exp) / .F_exp
   end

   I_r result (res) ::: elemental
   ! Return the r factor for the predicted intensity.
      self :: IN
      res :: REAL
      res = (.I_pred - .I_exp) / .I_exp
   end


   F_exp result (res) ::: elemental
   ! Return the F_exp ... for get_from
      self :: IN
      res :: REAL

      res = .F_exp

   end

   I_exp result (res) ::: elemental
   ! Return the I_exp ... for get_from
      self :: IN
      res :: REAL

      res = .I_exp

   end

   F2_exp result (res) ::: elemental
   ! Return the F_exp^2 ... for get_from
      self :: IN
      res :: REAL

      res = .F_exp
      res = res*res

   end

   F_exp_on_sigma result (res) ::: elemental
   ! Return the F_exp/F_sigma
      self :: IN
      res :: REAL
      res = abs(.F_exp/.F_sigma)
   end

   I_exp_on_sigma result (res) ::: elemental
   ! Return the I_exp/I_sigma
      self :: IN
      res :: REAL
      res = abs(.I_exp/.I_sigma)
   end

   F_exp_on_sigma_2 result (res) ::: elemental
   ! Return the F_exp/F_sigma
      self :: IN
      res :: REAL
      res = (.F_exp/.F_sigma)
      res = res*res
   end

   F_exp_on_sigma_4 result (res) ::: elemental
   ! Return the F_exp/F_sigma
      self :: IN
      res :: REAL
      res = (.F_exp/.F_sigma)
      res = res*res*res*res
   end


   F_sigma result (res) ::: elemental
   ! Return the F_sigma ... for get_from
      self :: IN
      res :: REAL

      res = .F_sigma

   end

   F2_sigma result (res) ::: elemental
   ! Return the F2_sigma
      self :: IN
      res :: REAL

      res = .F_sigma*.F_sigma

   end

   I_sigma result (res) ::: elemental
   ! Return the F_sigma ... for get_from
      self :: IN
      res :: REAL

      res = .I_sigma

   end


   F_phase result (res) ::: elemental
   ! Return the phase angle of the calculated complex structure factor.
      self :: IN
      res :: REAL

      res = atan2(aimag(.F_calc),real(.F_calc))

      if (res<ZERO) res = TWO*PI + res

   end

   F_phase_in_degrees result (res) ::: elemental
   ! Return the phase angle of the calculated complex structure factor.
   ! In degrres.
      self :: IN
      res :: REAL

      res = atan2(aimag(.F_calc),real(.F_calc))*DEGREE_PER_RADIAN

      if (res<ZERO) res = 360.0d0 + res

   end

   stl result (res) ::: elemental
   ! Return the value of sin(theta)/lambda in au^-1 for reflection n.
   ! NOTE: wavelength must have been previously set!
      self :: IN
      res :: REAL

      res = self%stl

   end


   F2_calc_abs result (res) ::: elemental
   ! Return the F_pred ... for get_from
      self :: IN
      res :: REAL

      res = abs(.F_calc)
      res = res*res

   end

   F_calc_abs result (res) ::: elemental
   ! Return the magnitude of F_calc
      self :: IN
      res :: REAL

      res = abs(.F_calc)

   end


   F_pred result (res) ::: elemental
   ! Return the F_pred ... for get_from
      self :: IN
      res :: REAL
      res = .F_pred
   end

   I_pred result (res) ::: elemental
   ! Return the I_pred ... for get_from
      self :: IN
      res :: REAL
      res = .I_pred
   end

! For pruning

   has_small_F_calc_abs(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a small/zero F_calc w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = abs(.F_calc) <= cutoff

   end

   has_zero_F_calc_abs(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a zero F_calc w.r.t. "cutoff"
   ! For pruning systematic absences.
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = abs(.F_calc) <= cutoff

   end

   has_small_F_pred(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a small/zero F_pred w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = abs(.F_pred) <= cutoff

   end

   has_weak_F_exp(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection is weak in F_exp w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .F_exp_on_sigma <= cutoff

   end

   has_weak_I_exp(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection is weak in I_exp w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .I_exp_on_sigma <= cutoff

   end

   has_small_F_exp(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a small F_exp w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .F_exp <= cutoff

   end

   has_small_I_exp(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a small I_exp w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .I_exp <= cutoff

   end

   has_small_F_sigma(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a small F_sigma w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .F_sigma <= cutoff

   end

   has_small_I_sigma(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a zero I_sigma w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .I_sigma <= cutoff

   end

   has_large_F_z(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a large F_z w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .F_z >= cutoff

   end

   has_large_abs_F_z(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a large |F_z| w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = abs(.F_z) >= cutoff

   end

   has_large_I_z(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a large I_z w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .I_z >= cutoff

   end

   has_large_abs_I_z(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a large |I_z| w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = abs(.I_z) >= cutoff

   end

   has_high_stl(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a high s.t.l w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .stl >= cutoff

   end

   has_low_stl(cutoff) result (res) ::: elemental
   ! Return TRUE if the reflection has a low s.t.l w.r.t. "cutoff"
      self :: IN
      cutoff :: REAL, IN
      res :: BIN

      res = .stl < cutoff

   end

!  =========================
!  Methods that do something
!  =========================

   remove_anom_from_F_exp(scale_factor) ::: PURE
   ! Remove the anomalous dispersion correction from F_exp
   ! assuming the phase from F_calc is correct.
      self :: INOUT
      scale_factor :: REAL, IN

      phase :: REAL
      F_corr,II :: CPX

      ! Phase of F_calc
      phase = .F_phase

      ! Corrected complex F_corr
      F_corr = .F_exp*exp(II*phase) - .F_calc*scale_factor

      ! Magnitude of complex F_corr, the experimentally
      ! corrected F_exp.
      .F_corr = abs(F_corr)

   end

   remove_anom_from_F_calc ::: PURE
   ! Remove the anomalous dispersion correction from F_calc
   ! assuming the phase from F_calc is correct.
      self :: INOUT

      .F_calc = .F_calc - .F_disp

   end

end
