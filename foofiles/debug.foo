!---------------------------------------------------------------------------
!
! DEBUG: Debug print options ...
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: object.foo 3026 2007-03-04 10:45:02Z dylan_ $
!---------------------------------------------------------------------------

virtual module DEBUG

   implicit none

contains

!  ==============
!  Debug printing
!  ==============

   set_debug_on(name) ::: leaky
   ! Add a debug descriptor to the list.

      name :: STR

      if (FALSE) self = self

      debug_list.append(name)

   end

   set_debug_off(name) ::: leaky
   ! Remove a debug descriptor from the list.

      name :: STR

      if (FALSE) self = self

      debug_list.prune(name)

   end

   read_debug_on ::: leaky
   ! Read a debug descriptor and add it to the list.

      name :: STR

      if (FALSE) self = self

      stdin.read(name)

      debug_list.append(name)

   end

   read_debug_off ::: leaky
   ! Read a debug descriptor and remove it from the list.

      name :: STR

      if (FALSE) self = self

      stdin.read(name)

      debug_list.prune(name)

   end

   debugging(name) result (res)
   ! Return TRUE if the debug switch "name" has been set.
      name :: STR
      res :: BIN

      if (FALSE) self = self

      res = FALSE

      if (debug_list.disassociated) return

      res = any(name==debug_list)

   end

   put_debug_list
   ! Put of the list of debug switches

      if (FALSE) self = self

      if (debug_list.disassociated) return

      stdout.put(debug_list)

   end

   put_debug(X,name) ::: template
   ! Put *number* "X" to output, with descriptor "name", if the debug switch for
   ! it has been set.
      X :: X?
      name :: STR

      if (NOT .:debugging(name)) return

      stdout.save

      stdout.set_real_style("e")
      stdout.show(trim(name)//" = ",X)

      stdout.unsave

   end

   put_debug(X,name) ::: template
   ! Put *array* "X" to output, with descriptor "name", if the debug switch for
   ! it has been set.
      X :: X?
      name :: STR

      if (NOT .:debugging(name)) return

      stdout.save

      stdout.set_real_style("e")

      stdout.flush
      stdout.text(trim(name)//":")
      stdout.put(X)

      stdout.unsave

   end

   put_debug_2D(X,name) ::: template
   ! Put *matrix* "X" to output as a raw 2D array, with descriptor
   ! "name", if the debug switch for it has been set.
      X :: X?
      name :: STR

      i,j,dim1,dim2 :: INT
      fmt :: STR

      if (NOT .:debugging(name)) return

      dim1 = X.dim1
      dim2 = X.dim2
      
      fmt.to_fortran_format(dim2,"e",stdout.real_width,stdout.real_precision)

      do i = 1,dim1
         write(stdout.unit,trim(fmt)) (X(i,j), j = 1,dim2)
      end

   end

   put_debug(X,name) ::: template
   ! Put *object* "X" to output, with descriptor "name", if the debug switch for
   ! it has been set.
      X :: X?
      name :: STR

      if (NOT .:debugging(name)) return

      stdout.save

      stdout.set_real_style("e")

      stdout.text(trim(name)//":")
      X.put

      stdout.unsave

   end

   put_debug(X,name) ::: template
   ! Put *opmatrix* "X" to output, with descriptor "name", if the debug switch for
   ! it has been set.
      X :: OPMATRIX
      name :: STR

      if (NOT .:debugging(name)) return

      stdout.save

      stdout.set_real_style("e")

      if (X.restricted.allocated) then
         stdout.flush
         stdout.text(trim(name)//", restricted:")
         stdout.put(X.restricted)
      end

      if (X.alpha.allocated) then
         stdout.flush
         stdout.text(trim(name)//", alpha:")
         stdout.put(X.alpha)
      end

      if (X.beta.allocated) then
         stdout.flush
         stdout.text(trim(name)//", beta:")
         stdout.put(X.beta)
      end

      if (X.general.allocated) then
         stdout.flush
         stdout.text(trim(name)//", general:")
         stdout.put(X.general)
      end

      if (X.restricted_complex.allocated) then
         stdout.flush
         stdout.text(trim(name)//", restricted_complex:")
         stdout.put(X.restricted_complex)
      end

      if (X.alpha_complex.allocated) then
         stdout.flush
         stdout.text(trim(name)//", alpha_complex:")
         stdout.put(X.alpha_complex)
      end

      if (X.beta_complex.allocated) then
         stdout.flush
         stdout.text(trim(name)//", beta_complex:")
         stdout.put(X.beta_complex)
      end

      if (X.general_complex.allocated) then
         stdout.flush
         stdout.text(trim(name)//", general_complex:")
         stdout.put(X.general_complex)
      end

      stdout.unsave

   end

end

