!===================================================================
!
! SLATERSHELL: used to describe contracted slater shells.
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!===================================================================

module SLATERSHELL

   implicit none

   keys :: VEC{STR}@, private 

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts
      self :: INOUT

      .n.destroy
      .z.destroy
      .c.destroy
      .orb_kind.destroy
      .occupancy.destroy

   end

!  ===========
!  Set methods
!  ===========

   set_l(l) ::: PURE
   ! Set the l value
      self :: INOUT
      l :: INT, IN

      .l = l
      .l_chr = SLATERSHELL::l_chr(.l)

      .set_n_comp

   end

   set_n_comp ::: PURE
   ! Set the number of components
      self :: INOUT

      .n_comp = 2*.l+1

   end

! ===========
! I/O methods
! ===========

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Data is inputted from "stdin", unless
   ! "keyword" is a sequence of blank separated strings.  In this
   ! case, the sequence is processed as if it were a separate file.
      self :: INOUT
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case ("}                  ")  ! exit case
      case ("c=                 "); .read_c
      case ("junk=              "); .read_junk
      case ("orb_kinds=         "); .read_orb_kinds
      case ("l=                 "); .read_l
      case ("l_int=             "); .read_l_int
      case ("l_chr=             "); .read_l_chr
      case ("l,orb_kinds,n,z,c*="); .read_l_orb_kinds_n_z_c_ptr
      case ("n=                 "); .read_n
      case ("n_prim=            "); .read_n_prim
      case ("n_orb=             "); .read_n_orb
      case ("n,z,c*=            "); .read_n_z_c_ptr
      case ("occupancy=         "); .read_occupancy
      case ("units=             "); .read_units
      case ("z=                 "); .read_z
      case  default;                UNKNOWN(word)
      end

   end

   read_units ::: get_from(OBJECT), private
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT), private
   ! Read in a junk string, useful for ignoring a field
   end

   read_l ::: get_from(SHELL)
   ! Read in the l symbol
   end

   read_l_int ::: get_from(SHELL)
   ! Read in the l integer. No way to get "L" shells in this input mode.
   end

   read_l_chr ::: get_from(SHELL), private
   ! Read in the l symbol
   end

   read_n_prim 
   ! Read in the number of contraction coefficients
      self :: INOUT

      stdin.read(.n_prim)
      ENSURE(.n_prim>0,"n_prim must be positive")

   end

   read_n_orb
   ! Read in the number of generally contracted orbitals
      self :: INOUT

      stdin.read(.n_orb)
      ENSURE(.n_orb>0,"n_orb must be positive")

   end

   read_n ::: leaky
   ! Read in the "n" quantum numbers. NOTE: n_prim must already have been input.
      self :: INOUT

   ENSURE(.n_prim>0,"n_prim not set; use n_prim= before this command")

      .n.destroy
      .n.create(.n_prim)
      stdin.read(.n)

   end

   read_c ::: leaky
   ! Read in the "c" contraction coefficients. NOTE: n_orb must
   ! already have been input.
      self :: INOUT

   ENSURE(.n_prim>0,"n_prim not set; use n_prim= before this command")
   ENSURE(.n_orb>0,"n_orb not set; use n_orb= before this command")

      .c.destroy
      .c.create(.n_prim,.n_orb)
      stdin.read(.c)

   end

   read_z ::: leaky
   ! Read in the "z" slater function exponents. NOTE: n_prim must
   ! already have been input.
      self :: INOUT

   ENSURE(.n_prim>0,"n_prim not set; use n_prim= before this command")

      .z.destroy
      .z.create(.n_prim)
      stdin.read(.z)

   end

   read_orb_kinds ::: leaky
   ! Read in the orbital labels ("1s", "2s", "2p" ....); also set zero
   ! occupancies, if kinds are not set
      self :: INOUT

      .orb_kind.destroy
      stdin.read_all(.orb_kind)

      if (.n_orb>0) then
         ENSURE(.n_orb==.orb_kind.dim,"n_orb is not orb_kind.dim")
      else
         .n_orb = .orb_kind.dim
      end

      if (.occupancy.allocated) then
         ENSURE(.n_orb==.occupancy.dim,"n_orb is not occupancy.dim")
      else
         .occupancy.create(.n_orb)
         .occupancy = 0
      end

   end

   read_occupancy ::: leaky
   ! Read in the occupancies; also set blank kinds, if kinds are not set.
      self :: INOUT

      .occupancy.destroy
      stdin.read_all(.occupancy)

      if (.n_orb>0) then
         ENSURE(.n_orb==.orb_kind.dim,"n_orb is not orb_kind.dim")
      else
         .n_orb = .orb_kind.dim
      end

      if (.orb_kind.allocated) then
         ENSURE(.n_orb==.orb_kind.dim,"n_orb is not orb_kind.dim")
      else
         .orb_kind.create(.n_orb)
         .orb_kind = " "
      end

   end

   read_l_orb_kinds_n_z_c_ptr ::: leaky
   ! Read in everything: l, kind, and then n,z,c in a table, as in an
   ! Ajit Thakkar table
      self :: INOUT

      .read_l_chr
      .read_orb_kinds
      .read_n_z_c_ptr

   end

   read_n_z_c_ptr ::: leaky
   ! Read in the "n", "z" and then "c" coefficients, across a line.
      self :: INOUT

   ENSURE(.n_orb>0,"n_orb not set; use n_orb= before this command")
   ENSURE(.n_prim==0,"n_prim already defined!")

      tmp :: VEC{REAL}@
      i,k :: INT

      stdin.read_all(tmp)
      ENSURE(mod(tmp.dim,(.n_orb+2))==0,"number of data not divisible by n_orb")

      .n_prim =  tmp.dim/(.n_orb+2)
      .n.destroy; .c.destroy; .z.destroy
      .n.create(.n_prim)
      .z.create(.n_prim)
      .c.create(.n_prim,.n_orb)

      k = 0
      do i = 1,.n_prim
         ENSURE(tmp(k+1).is_int,"n number is not integer")
         .n(i)   = nint(tmp(k+1))
         .z(i)   = tmp(k+2)
         .c(i,:) = tmp(k+2+1:k+2+.n_orb)
         k = k + 2 + .n_orb 
      end
      tmp.destroy

   end

! ====================
! Key related routines
! ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

! ===============
! Inquiry Methods
! ===============

   l_chr(l) result (res) ::: get_from(SHELL), selfless, private, PURE
   ! Return a character representation for angular mtm "l"
   ! Of course, "L" shells are never returned: they have mixed mtm.
   end

   same_as(b) result (res) ::: pure
   ! Return TRUE if "self" is the same as "b".
      self :: IN
      b :: SLATERSHELL, IN
      res :: BIN

   ENSURE(.n.allocated, "no n quantum numbers")
   ENSURE(.c.allocated, "no contraction coefficients")
   ENSURE(.z.allocated, "no exponents")
   ENSURE(b.n.allocated,"no n quantum numbers to compare to")
   ENSURE(b.c.allocated,"no contraction coefficients to compare to")
   ENSURE(b.z.allocated,"no exponents to compare to")

      res = .l == b.l &
            AND .n.same_as(b.n) &
            AND .c.same_as(b.c) &
            AND .z.same_as(b.z)
      if (res AND .orb_kind.allocated)  res =  .orb_kind.same_as(b.orb_kind)
      if (res AND .occupancy.allocated) res = .occupancy.same_as(b.occupancy)

   end

   no_of_basis_functions result (res) ::: pure
   ! Work out and return the TOTAL number of generally contracted basis
   ! functions , counting the agular part also.
      self :: IN
      res :: INT
      res = .n_comp*.n_orb
   end

   no_of_primitives result (res) ::: pure
   ! Work out and return the TOTAL number of primitives, counting the angular
   ! part also.
      self :: IN
      res :: INT
      res = .n_comp*.n_prim
   end

! ==============================
! Density and derivative density
! ==============================

   density_at_radius(R) result (res) ::: PURE
   ! Returns the value of the coppens orbital at radius "R".
   ! SOme work can be save if the prefactor array is made.
      self :: IN
      R :: REAL, IN
      res :: REAL

      i :: INT
      orb :: REAL
      val :: VEC{REAL}@

      val.create(.n_prim)
      where (.n==1); val =             exp(-.z*R) 
      elsewhere;     val = R**(.n-1) * exp(-.z*R) 
      end

      res = ZERO
      do i = 1,.n_orb
         orb = sum(.c(:,i)*val)
         res = res + .occupancy(i)*orb*orb
      end

      ! Divide by 4*pi since the radial wavefunction
      ! is multiplied by Y(lm) which is (4pi)^(1/2)
      res = res/(FOUR*PI)

      val.destroy

   end

   densities_at_radii(R) result (res) ::: PURE
   ! Returns the values of the coppens density at all the radii "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      i,p :: INT
      orb :: REAL
      val :: VEC{REAL}@

      val.create(.n_prim)

      do p = 1,R.dim

         where (.n==1); val =                exp(-.z*R(p))
         elsewhere;     val = R(p)**(.n-1) * exp(-.z*R(p))
         end

         res(p) = ZERO
         do i = 1,.n_orb
            orb    = sum(.c(:,i)*val)
            res(p) = res(p) + .occupancy(i)*orb*orb
         end

      end

      ! Divide by 4*pi since the radial wavefunction
      ! is multiplied by Y(lm) which is (4pi)^(1/2)
      res = res / (FOUR*PI)

      val.destroy

   end


   density_d1_at_radius(R) result (res) ::: PURE
   ! Returns the 1st radial derivative of the orbital at all the radii "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      i :: INT
      Rp,orb,dorb :: REAL
      val1,val2,val3 :: VEC{REAL}@

   ! f(R)  = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R) = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])

      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)

      Rp = R
      val3 = -.z*Rp
      where (.n==2); val2 =              exp(val3) 
      elsewhere;     val2 = Rp**(.n-2) * exp(val3) 
      end         

      val1 = val2 * Rp
      val2 = val2 * (.n - ONE - val3)
      res = ZERO
      do i = 1,.n_orb
         orb  = sum(.c(:,i)*val1)
         dorb = sum(.c(:,i)*val2)
         res = res + TWO*.occupancy(i)*orb*dorb
      end

      val3.destroy
      val2.destroy
      val1.destroy

   end

   densities_d1_at_radii(R) result (res) ::: PURE
   ! Returns the 1st radial derivative of the orbital at all the radii "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      i,p :: INT
      Rp,orb,dorb :: REAL
      val1,val2,val3 :: VEC{REAL}@

   ! f(R)  = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R) = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])

      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)

      do p = 1,R.dim

         Rp = R(p)
         val3 = -.z*Rp

         where (.n==2); val2 =              exp(val3) 
         elsewhere;     val2 = Rp**(.n-2) * exp(val3)
         end

         val1 = val2 * Rp
         val2 = val2 * (.n - ONE - val3)
         res(p) = ZERO
         do i = 1,.n_orb
            orb  = sum(.c(:,i)*val1)
            dorb = sum(.c(:,i)*val2)
            res(p) = res(p) + TWO*.occupancy(i)*orb*dorb
         end

      end

      val3.destroy
      val2.destroy
      val1.destroy

   end


   density_d2_at_radius(R) result (res) ::: PURE
   ! Returns the 2nd radial derivative of the orbital at all the radii "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      i :: INT
      Rp,Rp2,orb,dorb,ddorb :: REAL
      tmp3,val1,val2,val3 :: VEC{REAL}@

   ! f(R)   = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R)  = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         +
   !                       (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} ( (
   !                       (n_i-2) R^(n_i-3) exp(-z_i R)
   !                       -z_i R^(n_i-2) exp(-z_i R)
   !                       ) [(n_i-1) - z_i R ]
   !                       -
   !                        z_i R^(n_i-2) exp(-z_i R) )
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])^2
   !         +
   !         (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-3) exp(-z_i R) ((n_i-2 - z_i R ) [n_i-1 - z_i R ] - z_i R )

      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)
      tmp3.create(.n_prim)

      Rp = R
      Rp2 = Rp*Rp
      val3 = -.z*Rp

      where (.n==3); tmp3 =              exp(val3) 
      elsewhere;     tmp3 = Rp**(.n-3) * exp(val3) 
      end

      val1 = (.n - ONE - val3)
      val2 = tmp3 * Rp * val1
      val3 = tmp3 * (val1*val1 - val1 - val3)
      val1 = tmp3 * Rp2

      res = ZERO
      do i = 1,.n_orb
         orb   = sum(.c(:,i)*val1)
         dorb  = sum(.c(:,i)*val2)
         ddorb = sum(.c(:,i)*val3)
         res = res + TWO*.occupancy(i)*(dorb*dorb + orb*ddorb)
      end

      tmp3.destroy
      val3.destroy
      val2.destroy
      val1.destroy

   end

   densities_d2_at_radii(R) result (res) ::: PURE
   ! Returns the 2nd radial derivative of the orbital at all the radii "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      i,p :: INT
      Rp,Rp2,orb,dorb,ddorb :: REAL
      tmp3,val1,val2,val3 :: VEC{REAL}@

   ! f(R)   = \sum_i n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))^2
   ! f'(R)  = \sum_i 2 n_i (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])
   !         +
   !                       (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} ( (
   !                       (n_i-2) R^(n_i-3) exp(-z_i R)
   !                       -z_i R^(n_i-2) exp(-z_i R)
   !                       ) [(n_i-1) - z_i R ]
   !                       -
   !                        z_i R^(n_i-2) exp(-z_i R) )
   ! f''(R) = \sum_i 2 n_i {
   !         (\sum_j c_{ji} R^(n_i-2) exp(-z_i R)[(n_i-1) - z_i R ])^2
   !         +
   !         (\sum_j c_{ji} R^(n_i-1) exp(-z_i R))
   !         (\sum_j c_{ji} R^(n_i-3) exp(-z_i R) ((n_i-2 - z_i R ) [n_i-1 - z_i R ] - z_i R )

      val1.create(.n_prim)
      val2.create(.n_prim)
      val3.create(.n_prim)
      tmp3.create(.n_prim)

      do p = 1,R.dim

         Rp = R(p)
         Rp2 = Rp*Rp

         val3 = -.z*Rp
         where (.n==3); tmp3 =              exp(val3) ! save this
         elsewhere;     tmp3 = Rp**(.n-3) * exp(val3) ! save this
         end

         val1 = (.n - ONE - val3)
         val2 = tmp3 * Rp * val1
         val3 = tmp3 * (val1*val1 - val1 - val3)
         val1 = tmp3 * Rp2

         res(p) = ZERO
         do i = 1,.n_orb
            orb    = sum(.c(:,i)*val1)
            dorb   = sum(.c(:,i)*val2)
            ddorb  = sum(.c(:,i)*val3)
            res(p) = res(p) + TWO*.occupancy(i)*(dorb*dorb + orb*ddorb)
         end

      end

      tmp3.destroy
      val3.destroy
      val2.destroy
      val1.destroy
   end

! =============
! Normalisation
! =============

   unnormalise ::: pure
   ! Set the value of the coefficient to correspond to un-normalised Slater
   ! functions -- assuming they are normalised. This saves in computation time.
      self :: INOUT

      i,n2 :: INT
      fac :: REAL

      do i = 1,.n_prim
         n2 = 2*.n(i)
         fac = sqrt(TWO*.z(i)/n2.factorial) * (TWO*.z(i))**.n(i)
         .c(i,:) = .c(i,:) * fac
      end

   end

   renormalise ::: pure
   ! Set the value of the coefficient to correspond to normalised slater
   ! functions --- assuming they are w.r.t. unnormalised functions. 
      self :: INOUT

      i,n2 :: INT

      do i = 1,.n_prim
         n2 = 2*.n(i)
         .c(i,:) = .c(i,:) / (sqrt(TWO*.z(i)/n2.factorial) * (TWO*.z(i))**.n(i))
      end

   end

!  ====
!  Dump
!  ====

   do_dump ::: private
   ! Dump object data as text
      self :: IN

      stdout.dump("l",.l)
      stdout.dump("l_chr",.l_chr)
      stdout.dump("n_comp",.n_comp)
      stdout.dump("n_orb",.n_orb)
      stdout.dump("n_prim",.n_prim)
      stdout.dmpa("n",.n)
      stdout.dmpa("z",.z)
      stdout.dmpa("c",.c)
      stdout.dmpa("orb_kind",.orb_kind)
      stdout.dmpa("occupancy",.occupancy)

   end

   dump(object_name,all) ::: get_from(OBJECT, TYPE?=>SLATERSHELL)
   ! Dump object data as text
   end

   dmpa(object_name) ::: get_from(OBJECT, TYPE?=>SLATERSHELL)
   ! Dump allocatable object data as text
   end

! ======
! Output
! ======

   put
   ! Put the orbital information to "stdout"
      self :: IN

      stdout.flush
      stdout.show("L quantum no.     =",.l)
      stdout.show("No. of orbitals   =",.n_orb)
      stdout.show("No. of primitives =",.n_prim)

   end

end
