!-------------------------------------------------------------------------------
!
! GEMINAL_MF_SPECTRUM
!
! Copyright (C) Patrick Cassam-Chenai and Dylan Jayatilaka, 2003
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: geminal_mf_spectrum.foo 3801 2012-09-09 00:29:30Z dylan_ $
!
!-------------------------------------------------------------------------------

module GEMINAL_MF_SPECTRUM

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

!===============================================================================
!                             Create and Destroy Routines
!===============================================================================

   create(name,nuc,n_geminals,i_geminals,n_bf) ::: leaky
   ! Create the geminal contraction "i_geminals" and the ground state geminal
   ! for the spectator contractions,  each geminal having
   ! coeficients matrix of dimension "n_bf".
      self :: PTR
      name :: STR
      nuc :: REAL
      n_geminals,i_geminals,n_bf :: INT

      nullify(self)
      allocate(self)
      .nullify_ptr_part
!10-07-09      .two_orthogonality = FALSE
      .tol=REAL_EPSILON
      .ld_tol=LINEAR_DEPENDENCE_TOL
      .ig_tol=INTERNAL_GEMINAL_TOL
      .set_defaults(n_geminals,i_geminals,n_bf,name,nuc)
      .set_singlet_defaults
   !   .set_singlet_agp
    !  .set_singlet_random

   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   nullify_ptr_part
   ! Nullify the pointer parts of self
      nullify(.contraction_wfs)
      nullify(.contraction_energies)
      nullify(.bra)
      nullify(.ket)
      nullify(.special_ket)
   end

   destroy_ptr_part  ::: leaky
   ! Destroy the pointer parts of self
      .bra.destroy
      .ket.destroy
      .special_ket.destroy
   end

   create_copy(b) ::: leaky
   ! Create a copy of "b".
     self :: PTR
     b :: GEMINAL_MF_SPECTRUM, IN

     .create(b.name,b.nuclear_repulsion_energy,b.n_geminals,b.i_geminals,b.n_bf)
     .copy(b)

   end

   copy(b) ::: leaky
   ! Copy a basis "b" to "self". Make sure pointer parts are first
   ! destroyed or nullified, as you want.
      b :: GEMINAL_MF_SPECTRUM, IN
      self = b
      if (b.bra.associated) .bra.create_copy(b.bra)
      if (b.ket.associated) .ket.create_copy(b.ket)
      if (b.special_ket.associated) .special_ket.create_copy(b.special_ket)
      if (b.contraction_wfs.associated) .contraction_wfs.create_copy(b.contraction_wfs)
      if (b.contraction_energies.associated) .contraction_energies.create_copy(b.contraction_energies)
   end

!  ===========
!  Set methods
!  ===========

   set_defaults(n_geminals,i_geminals,n_bf,name,nuclear_repulsion_energy,n_bas) 
   ! Set values to a geminal_mf_spectrum object.
     n_geminals,i_geminals,n_bf,n_bas :: INT, optional
     name :: STR, optional
     nuclear_repulsion_energy :: REAL, optional

     if (present(n_geminals)) .n_geminals = n_geminals
     if (present(i_geminals)) .i_geminals = i_geminals
     if (present(n_bf)) .n_bf = n_bf
     if (present(name)) .name = name
     if (present(nuclear_repulsion_energy)) .nuclear_repulsion_energy = nuclear_repulsion_energy
     if (present(n_bas)) .n_bas = n_bas

   end

   set_singlet_agp ::: leaky
   ! Create a default object with singlet geminals only. 
   ! the HF wave function is used in AGP form
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     i_geminals :: INT
     n_geminals,n_bf :: INT
     j,k,counter :: INT
     n_nonzero :: INT

     i_geminals = .i_geminals
     n_geminals = .n_geminals
     n_bf = .n_bf
     n_nonzero = (n_bf-n_geminals+1)*(n_bf-n_geminals+2)/2 ! avoid the ground state orbitals
     .n_bas=n_bf*(n_bf+1)/2
     .n_dependent=.n_bas-n_nonzero
      if (.bra.associated) .bra.destroy
      if (.ket.associated) .ket.destroy
      if (.special_ket.associated) .special_ket.destroy
      if (.contraction_wfs.associated) .contraction_wfs.destroy
      if (.contraction_energies.associated) .contraction_energies.destroy
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_ket.create(n_geminals)
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_geminals     ! create ground state bras and kets
        .bra(j).element.create(n_bf,n_bf)
        .ket(j).element.create(n_bf,n_bf)
        .special_ket(j).element.create(2)
        .ket(j).element = ZERO
        .bra(j).element = ZERO
        .special_ket(j).element = 0
     end
     counter=1
     do j = 1,n_geminals     ! set ground state bras and kets
       if(j==i_geminals)cycle
       counter=counter+1
       do k=1,n_geminals
        .bra(counter)[k,k] = ONE/real(counter-1)
        .ket(counter)[k,k] = ONE/real(counter-1)
       end
     end
     DIE_IF(NOT counter==n_geminals,"counter not equal to n_geminals")
     do k=1,n_geminals
       .bra(2)[k,k] = ONE/sqrt(real(n_geminals))
       .ket(2)[k,k] = ONE/sqrt(real(n_geminals))
     end
     do j = 1,.n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=1
     do j=1,n_geminals
       .contraction_wfs(counter)[j,j] = ONE/sqrt(real(n_geminals))
     end
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = j-1,1,-1
       if ( 1<=k AND k <= n_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     k = i_geminals
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     DIE_IF(counter/=n_nonzero,"counter not equal to n_nonzero") 
     do j =1, n_geminals
       if ( j==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = n_geminals,1,-1
       if ( k==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     do j = 1,n_geminals
     do k = j-1,1,-1
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas")
   end

   set_singlet_random ::: leaky
   ! Create a default object with singlet geminals only. 
   ! a random rotation of the HF canonical orbitals is performed
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     i_geminals :: INT
     n_geminals,n_bf :: INT
     j,k,counter :: INT
     n_nonzero :: INT
     R,S,T,U :: MAT{REAL}*
     V,eigenvalues :: VEC{REAL}*
     i :: INT
     val :: REAL

     i_geminals = .i_geminals
     n_geminals = .n_geminals
     n_bf = .n_bf
     n_nonzero = (n_bf-n_geminals+1)*(n_bf-n_geminals+2)/2 ! avoid the ground state orbitals
     .n_bas=n_bf*(n_bf+1)/2
     .n_dependent=.n_bas-n_nonzero
      if (.bra.associated) .bra.destroy
      if (.ket.associated) .ket.destroy
      if (.special_ket.associated) .special_ket.destroy
      if (.contraction_wfs.associated) .contraction_wfs.destroy
      if (.contraction_energies.associated) .contraction_energies.destroy
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_ket.create(n_geminals)
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_geminals     ! create ground state bras and kets
        .bra(j).element.create(n_bf,n_bf)
        .ket(j).element.create(n_bf,n_bf)
        .special_ket(j).element.create(2)
        .ket(j).element = ZERO
        .bra(j).element = ZERO
        .special_ket(j).element = 0
     end
     counter=1
     do j = 1,n_geminals     ! set ground state bras and kets
       if(j==i_geminals)cycle
       counter=counter+1
       .ket(counter)[j,j] = ONE
       .bra(counter)[j,j] = ONE
     end
     DIE_IF(NOT counter==n_geminals,"counter not equal to n_geminals")
     do j = 1,.n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=1
     .contraction_wfs(counter)[i_geminals,i_geminals] = ONE
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = j-1,1,-1
       if ( 1<=k AND k <= n_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     k = i_geminals
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     DIE_IF(counter/=n_nonzero,"counter not equal to n_nonzero") 
     do j =1, n_geminals
       if ( j==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = n_geminals,1,-1
       if ( k==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     do j = 1,n_geminals
     do k = j-1,1,-1
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas")
 ! Rotate
      U.create(.n_geminals,.n_geminals)
      T.create(.n_geminals,.n_geminals)
      S.create(n_bf,n_bf)
      R.create(n_bf,n_bf)
      eigenvalues.create(n_bf)
      do i = 1,n_geminals
      do j = 1,i
         call random_number(val)
         T(i,j) = val
         T(j,i) = val
      end
      end
      T.solve_symmetric_eigenproblem(eigenvalues,U)
      R=ZERO
      do i = 1,n_geminals
      do j = 1,i
         R(i,j) = U(i,j)
         R(j,i) = U(j,i)
      end
      end
      do i = n_geminals+1, n_bf
         R(i,i) = ONE
      end
      U.destroy
      T.destroy
    !  stdout.text("R")
    !  stdout.put(R)
      S=matmul(R,transpose(R))
      stdout.show("is unit matrix =",S.is_unit_matrix)
      V.create(n_bf)
      do i = 1,.n_bas
        do j=1,n_bf
        V=.contraction_wfs(i)[j,:]
        .contraction_wfs(i)[j,:].to_product_of(R,V)
        end
        do k=1,n_bf
        V=.contraction_wfs(i)[:,k]
        .contraction_wfs(i)[:,k].to_product_of(R,V)
        end
      end
      do i = .n_bas+1,.n_bas+n_geminals-1
        do j=1,n_bf
         V=.ket(i-.n_bas+1)[j,:]
        .ket(i-.n_bas+1)[j,:].to_product_of(R,V)
         V=.bra(i-.n_bas+1)[j,:]
        .bra(i-.n_bas+1)[j,:].to_product_of(R,V)
        end
        do k=1,n_bf
        V=.ket(i-.n_bas+1)[:,k]
        .ket(i-.n_bas+1)[:,k].to_product_of(R,V)
        V=.bra(i-.n_bas+1)[:,k]
        .bra(i-.n_bas+1)[:,k].to_product_of(R,V)
        end
      end
      eigenvalues.destroy
      R.destroy
      S.destroy
      V.destroy
   end

!pcc instead of a random rotation, a rotation optimized with respect
!to excited states energies should be implemented here. see work with
!G. Granucci
   set_singlet_mono ::: leaky
   ! Create a default object with singlet geminals monoexcited with respect to
   ! HFguess. 
   ! a random rotation of the HF canonical orbitals is performed
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     i_geminals :: INT
     n_geminals,n_bf :: INT
     j,k,counter :: INT
     R,S,T,U :: MAT{REAL}*
     V,eigenvalues :: VEC{REAL}*
     i :: INT
     val :: REAL

     i_geminals = .i_geminals
     n_geminals = .n_geminals
     n_bf = .n_bf
     .n_dependent=0
     .n_bas=n_bf-n_geminals+1
     .bra.destroy
     .ket.destroy
     .special_ket.destroy
     .contraction_wfs.destroy
     .contraction_energies.destroy
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_ket.create(n_geminals)
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_geminals     ! create ground state bras and kets
        .bra(j).element.create(n_bf,n_bf)
        .ket(j).element.create(n_bf,n_bf)
        .special_ket(j).element.create(2)
        .ket(j).element = ZERO
        .bra(j).element = ZERO
        .special_ket(j).element = 0
     end
     counter=1
     do j = 1,n_geminals     ! set ground state bras and kets
       if(j==i_geminals)cycle
       counter=counter+1
       .ket(counter)[j,j] = ONE
       .bra(counter)[j,j] = ONE
     end
     DIE_IF(NOT counter==n_geminals,"counter not equal to n_geminals")
     do j = 1,.n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=1
     .contraction_wfs(counter)[i_geminals,i_geminals] = ONE
     k = i_geminals
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas")
! Rotate
      U.create(.n_geminals,.n_geminals)
      T.create(.n_geminals,.n_geminals)
      S.create(n_bf,n_bf)
      R.create(n_bf,n_bf)
      eigenvalues.create(n_bf)
      do i = 1,n_geminals
      do j = 1,i
         call random_number(val)
         T(i,j) = val
         T(j,i) = val
      end
      end
      T.solve_symmetric_eigenproblem(eigenvalues,U)
      R=ZERO
      do i = 1,n_geminals
      do j = 1,i
         R(i,j) = U(i,j)
         R(j,i) = U(j,i)
      end
      end
      do i = n_geminals+1, n_bf
         R(i,i) = ONE
      end
      U.destroy
      T.destroy
    !  stdout.text("R")
    !  stdout.put(R)
      R.to_unit_matrix
      S=matmul(R,transpose(R))
      stdout.show("is unit matrix =",S.is_unit_matrix)
      V.create(n_bf)
      do i = 1,.n_bas
        do j=1,n_bf
        V=.contraction_wfs(i)[j,:]
        .contraction_wfs(i)[j,:].to_product_of(R,V)
        end
        do k=1,n_bf
        V=.contraction_wfs(i)[:,k]
        .contraction_wfs(i)[:,k].to_product_of(R,V)
        end
      end
      do i = .n_bas+1,.n_bas+n_geminals-1
        do j=1,n_bf
         V=.ket(i-.n_bas+1)[j,:]
        .ket(i-.n_bas+1)[j,:].to_product_of(R,V)
         V=.bra(i-.n_bas+1)[j,:]
        .bra(i-.n_bas+1)[j,:].to_product_of(R,V)
        end
        do k=1,n_bf
        V=.ket(i-.n_bas+1)[:,k]
        .ket(i-.n_bas+1)[:,k].to_product_of(R,V)
        V=.bra(i-.n_bas+1)[:,k]
        .bra(i-.n_bas+1)[:,k].to_product_of(R,V)
        end
      end
      eigenvalues.destroy
      R.destroy
      S.destroy
      V.destroy
   end

   set_singlet_defaults ::: leaky
   ! Create a default object with singlet geminals only. 
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     i_geminals :: INT
     n_geminals,n_bf :: INT
     j,k,counter :: INT
     n_nonzero :: INT

     i_geminals = .i_geminals
     n_geminals = .n_geminals
     n_bf = .n_bf
     n_nonzero = (n_bf-n_geminals+1)*(n_bf-n_geminals+2)/2 ! avoid the ground state orbitals
     .n_bas=n_bf*(n_bf+1)/2
     .n_dependent=.n_bas-n_nonzero
      if (.bra.associated) .bra.destroy
      if (.ket.associated) .ket.destroy
      if (.special_ket.associated) .special_ket.destroy
      if (.contraction_wfs.associated) .contraction_wfs.destroy
      if (.contraction_energies.associated) .contraction_energies.destroy
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_ket.create(n_geminals)
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_geminals     ! create ground state bras and kets
        .bra(j).element.create(n_bf,n_bf)
        .ket(j).element.create(n_bf,n_bf)
        .special_ket(j).element.create(2)
        .ket(j).element = ZERO
        .bra(j).element = ZERO
        .special_ket(j).element = 0
     end
     counter=1
     do j = 1,n_geminals     ! set ground state bras and kets
       if(j==i_geminals)cycle
       counter=counter+1
       .special_ket(counter).element = j
       .bra(counter)[j,j] = ONE
     end
     DIE_IF(NOT counter==n_geminals,"counter not equal to n_geminals")
     do j = 1,.n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=1
     .contraction_wfs(counter)[i_geminals,i_geminals] = ONE
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = j-1,1,-1
       if ( 1<=k AND k <= n_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     k = i_geminals
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     DIE_IF(counter/=n_nonzero,"counter not equal to n_nonzero") 
     do j =1, n_geminals
       if ( j==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = n_geminals,1,-1
       if ( k==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     do j = 1,n_geminals
     do k = j-1,1,-1
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas")
   end

   make_singlet_extremals ::: leaky
   ! Create singlet geminals by diagonalising the 2 electron
   ! reduced Hamiltonian of Bopp or electronic repulsion only
   ! depending on add-core flag in read_gmf_scheme. 
     n_bas :: INT
     rhm :: MAT{REAL}*
     extremal_gem :: MAT{REAL}*
     extremal_val :: VEC{REAL}*
 !    extremal_archive :: ARCHIVE

     .set_singlet_defaults
     n_bas=.n_bas
     rhm.create(n_bas,n_bas)
     .make_RHM(rhm)
     extremal_gem.create(n_bas,n_bas)
     extremal_val.create(n_bas)
     stdout.text(" ")
     stdout.text(" ")
     stdout.text("RHM ")
     stdout.text(" ")
     stdout.put(rhm)
     rhm.solve_symmetric_eigenproblem(extremal_val,extremal_gem)
     stdout.text("RHM eigenvalues")
     stdout.text(" ")
     stdout.put(extremal_val)
     stdout.text(" ")
     stdout.text(" ")
     stdout.text("RHM eigenvectors")
     stdout.text(" ")
     stdout.put(extremal_gem)
 !    extremal_archive.set(.name,"extremals")
 !    extremal_archive.write(extremal_gem)
     rhm.destroy
     extremal_gem.destroy
     extremal_val.destroy
   end

   set_singlet_readin::: leaky
   ! Create a handmade object with singlet geminals only from read in
   ! coefficients
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     i_geminals :: INT
     n_geminals,n_bf :: INT
     j,k,counter :: INT
     n_nonzero,n_bas :: INT
     ov :: MAT{REAL}*

     i_geminals = .i_geminals
     n_geminals = .n_geminals
     n_bf = .n_bf
     .n_bas=n_bf*(n_bf+1)/2
     n_nonzero = 1
     .n_dependent=.n_bas-n_nonzero
      if (.bra.associated) .bra.destroy
      if (.ket.associated) .ket.destroy
      if (.special_ket.associated) .special_ket.destroy
      if (.contraction_wfs.associated) .contraction_wfs.destroy
      if (.contraction_energies.associated) .contraction_energies.destroy
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_ket.create(n_geminals)
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_geminals     ! create ground state bras and kets
        .bra(j).element.create(n_bf,n_bf)
        .ket(j).element.create(n_bf,n_bf)
        .special_ket(j).element.create(2)
        .ket(j).element = ZERO
        .bra(j).element = ZERO
        .special_ket(j).element = 0
     end
       do j = 1,.n_bas     ! create coeficient matrices
         .contraction_wfs(j).element.create(n_bf,n_bf)
         .contraction_wfs(j).element = ZERO
       end
     counter=1       !set ground state bras, kets and contraction_wfs
     do j = 1,n_geminals 
       if (.i_geminals==j) then
         .read_geminal(j,.contraction_wfs(1).element)
       else
         counter=counter+1
         .read_geminal(j,.ket(counter).element)
         .read_geminal(j,.bra(counter).element)
       end
     end
     counter=1       !set excited contraction_wfs
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = j-1,1,-1
       if ( 1<=k AND k <= n_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     k = i_geminals
     do j = n_geminals+1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     do j =1, n_geminals
       if ( j==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = n_geminals+1, n_bf
     do k = n_geminals,1,-1
       if ( k==i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     do j = 1,n_geminals
     do k = j-1,1,-1
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
     end
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas")
     n_bas=.n_bas
     .n_bas=1
     ov.create(1,1)
     ov=ZERO
     ov= .overlap
     .n_bas=n_bas
     .contraction_wfs(1).element=.contraction_wfs(1).element/dsqrt(ov(1,1)) 
     ov.destroy 
   end

   set_active_singlet_defaults ::: leaky
   ! Create a default object with singlet geminals only. 
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     n_bf,n_bas :: INT
     j,k,counter :: INT

     n_bf = .n_bf
     n_bas=n_bf*(n_bf+1)/2
     .n_bas=n_bas
     .n_dependent = 0
      if (.contraction_wfs.associated) then
        .contraction_wfs.destroy
      end
      if (.contraction_energies.associated) .contraction_energies.destroy
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=0
     do j = 1, n_bf
       counter=counter+1
       .contraction_wfs(counter)[j,j] = ONE
     end
     do j = 1, n_bf
       do k = 1,j-1
         counter=counter+1
         .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
         .contraction_wfs(counter)[k,j] = ONE/sqrt(TWO)
       end
     end
     DIE_IF(counter/=n_bas,"counter not equal to n_bas") 
   end

   set_triplet_defaults ::: leaky
   ! Create triplet default wfs and ground state spectator wave functions.
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     i_geminals :: INT
     n_geminals,n_bf :: INT
     counter,j,k :: INT

     n_geminals = .n_geminals
     i_geminals = .i_geminals
     n_bf = .n_bf
     .n_bas = (n_bf-n_geminals+1)*(n_bf-n_geminals)/2 ! avoid the ground state orbitals
     .bra.create(n_geminals) ! create bra and ket arrays
     .ket.create(n_geminals)
     .special_ket.create(n_geminals)
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,n_geminals     ! create ground state bras and kets
        .bra(j).element.create(n_bf,n_bf)
        .ket(j).element.create(n_bf,n_bf)
        .special_ket(j).element.create(2)
        .ket(j).element = ZERO
        .bra(j).element = ZERO
        .special_ket(j).element = 0
     end
     counter=1
     do j = 1,n_geminals     ! set ground state bras and kets
       if(j==i_geminals)cycle
       counter=counter+1
       .special_ket(counter).element = j
       .bra(counter)[j,j] = ONE
     end
     DIE_IF(NOT counter==n_geminals,"counter not equal to n_geminals")
     do j = 1,.n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=0
     do j = n_geminals+1, n_bf
     do k = 1, j-1
       if ( 1<=k AND k <= n_geminals AND k/=i_geminals ) cycle 
       counter=counter+1
       .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
       .contraction_wfs(counter)[k,j] = -ONE/sqrt(TWO)
     end
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas") 
!debug      write(*,*) ".n_bas",.n_bas
!debug      stdout.text(".contraction_wfs(1)[:,:]")
!debug      stdout.put(.contraction_wfs(1)[:,:])
!debug      stdout.text(".contraction_wfs(2)[:,:]")
!debug      stdout.put(.contraction_wfs(2)[:,:])
!debug      stdout.text(std_time.elapsed_time_message("geminal job "))
!debug      stdout.text(std_time.elapsed_cpu_time_message("geminal job "))
!debug      ! Rotate
!debug      do i = 1,n_geminals
!debug        .special_ket(i).element = 0
!debug      end
!debug      U.create(.n_geminals,.n_geminals)
!debug      T.create(.n_geminals,.n_geminals)
!debug      S.create(n_bf,n_bf)
!debug      R.create(n_bf,n_bf)
!debug      eigenvalues.create(n_bf)
!debug      do i = 1,n_geminals
!debug      do j = 1,i
!debug         call random_number(val)
!debug         T(i,j) = val
!debug         T(j,i) = val
!debug      end
!debug      end
!debug      T.solve_eigenproblem(eigenvalues,U)
!debug      R=ZERO
!debug      do i = 1,n_geminals
!debug      do j = 1,i
!debug         R(i,j) = U(i,j)
!debug         R(j,i) = U(j,i)
!debug      end
!debug      end
!debug      do i = n_geminals+1, n_bf
!debug         R(i,i) = ONE
!debug      end
!debug      U.destroy
!debug      T.destroy
!debug    !  stdout.text("R")
!debug    !  stdout.put(R)
!debug      S=matmul(R,transpose(R))
!debug      stdout.show("is unit matrix =",S.is_unit_matrix)
!debug      V.create(n_bf)
!debug      do i = 1,.n_bas
!debug        do j=1,n_bf
!debug        V=.contraction_wfs(i)[j,:]
!debug        .contraction_wfs(i)[j,:].to_product_of(R,V)
!debug        end
!debug        do k=1,n_bf
!debug        V=.contraction_wfs(i)[:,k]
!debug        .contraction_wfs(i)[:,k].to_product_of(R,V)
!debug        end
!debug!        val = ZERO
!debug!        do j=1,n_bf
!debug!        do k=1,n_bf
!debug!          val=val+ .contraction_wfs(i)[j,k]*.contraction_wfs(i)[j,k]
!debug!        end
!debug!        end
!debug!        write(*,*) "i",i,val
!debug      end
!debug      do i = .n_bas+1,.n_bas+n_geminals-1
!debug        do j=1,n_bf
!debug         V=.ket(i-.n_bas+1)[j,:]
!debug        .ket(i-.n_bas+1)[j,:].to_product_of(R,V)
!debug         V=.bra(i-.n_bas+1)[j,:]
!debug        .bra(i-.n_bas+1)[j,:].to_product_of(R,V)
!debug        end
!debug        do k=1,n_bf
!debug        V=.ket(i-.n_bas+1)[:,k]
!debug        .ket(i-.n_bas+1)[:,k].to_product_of(R,V)
!debug        V=.bra(i-.n_bas+1)[:,k]
!debug        .bra(i-.n_bas+1)[:,k].to_product_of(R,V)
!debug        end
!debug!        val = ZERO
!debug!        do j=1,n_bf
!debug!        do k=1,n_bf
!debug!          val=val+ .bra(i-.n_bas+1)[j,k]*.bra(i-.n_bas+1)[j,k]
!debug!        end
!debug!        end
!debug!        write(*,*) "i",i,val
!debug      end
!debug!      R.destroy
!debug!      R.create(.n_bas,.n_bas)
!debug!      S.destroy
!debug!      S.create(.n_bas,.n_bas)
!debug!      T.destroy
!debug!      T.create(.n_bas,.n_bas)
!debug!      U.destroy
!debug!      U.create(.n_bas,.n_bas)
!debug!      R=matmul(transpose(.bra(2)[:,:]),.bra(2)[:,:])
!debug!      S=matmul(.bra(2)[:,:],transpose(.bra(2)[:,:]))
!debug!      do i = 1,.n_bas
!debug!      T=matmul(.contraction_wfs(i)[:,:],R)+matmul(S,.contraction_wfs(i)[:,:])
!debug!        write(*,*) "T(1,1)",T(1,1)
!debug!        write(*,*) "T(2,1)",T(2,1)
!debug!        write(*,*) "T(1,2)",T(1,2)
!debug!        write(*,*) "T(2,2)",T(2,2)
!debug!      !    S=matmul(transpose(.contraction_wfs(i)[:,:]),.contraction_wfs(i)[:,:])
!debug!      U=matmul(transpose(.contraction_wfs(i)[:,:]),T)
!debug!          val=U.trace
!debug!        write(*,*) "i,trace",i,val
!debug!      end
!debug!!      V.create(n_bfsq)
!debug!!      do i = 1,.n_bas
!debug!!        V.to_product_of(R,reshape(.contraction_wfs(i).element,[n_bfsq]))
!debug!!        .contraction_wfs(i).element = reshape(V,[n_bf,n_bf])
!debug!!        val = ZERO
!debug!!        do j=1,n_bf
!debug!!        do k=1,n_bf
!debug!!          val=val+ .contraction_wfs(i)[j,k]*.contraction_wfs(i)[j,k]
!debug!!        end
!debug!!        end
!debug!!        write(*,*) "i",i,val
!debug!!      end
!debug!!      do i = .n_bas+1,n_bfsq
!debug!!        V.to_product_of(R,reshape(.ket(i-.n_bas+1).element,[n_bfsq]))
!debug!!        .ket(i-.n_bas+1).element = reshape(V,[n_bf,n_bf])
!debug!!        V.to_product_of(R,reshape(.bra(i-.n_bas+1).element,[n_bfsq]))
!debug!!        .bra(i-.n_bas+1).element = reshape(V,[n_bf,n_bf])
!debug!!        val = ZERO
!debug!!        do j=1,n_bf
!debug!!        do k=1,n_bf
!debug!!          val=val+ .bra(i-.n_bas+1)[j,k]*.bra(i-.n_bas+1)[j,k]
!debug!!        end
!debug!!        end
!debug!!        write(*,*) "i",i,val
!debug!!      end
!debug!!      .n_bas = ONE    
!debug!      V.destroy
!debug!     .special_ket(5)[1] = 5
!debug!     .special_ket(5)[2] = 6
!debug!     .bra(5).element = ZERO
!debug!     .bra(5)[5,6] = ONE
!debug      eigenvalues.destroy
!debug      R.destroy
!debug      S.destroy
!debug      T.destroy
!debug      U.destroy
!debug      stdout.text(std_time.elapsed_time_message("geminal job "))
!debug      stdout.text(std_time.elapsed_cpu_time_message("geminal job "))
   end

   set_active_triplet_defaults ::: leaky
   ! Create triplet default wfs but not ground state spectator wave functions.
     ENSURE(.n_geminals<.n_bf,"n_geminals not less than n_bf")
     n_bf :: INT
     counter,j,k :: INT

     n_bf = .n_bf
     .n_bas = (n_bf-1)*n_bf/2 
     .contraction_wfs.create(.n_bas)
     .contraction_energies.create(.n_bas)
     .contraction_energies = ZERO
     do j = 1,.n_bas     ! create coeficient matrices
       .contraction_wfs(j).element.create(n_bf,n_bf)
       .contraction_wfs(j).element = ZERO
       .contraction_energies(j)= ZERO
     end
     counter=0
     do j = 1, n_bf-1
       do k = j+1,n_bf
         counter=counter+1
         .contraction_wfs(counter)[j,k] = ONE/sqrt(TWO)
         .contraction_wfs(counter)[k,j] = -ONE/sqrt(TWO)
       end
     end
     DIE_IF(counter/=.n_bas,"counter not equal to .n_bas") 
   end

   set_to_zero_special_ket
   ! set to zero special_ket
     j :: INT
     do j = 1,.n_geminals    
       .special_ket(j).element = 0
     end
   end

   set_to_zero_ket
   ! set to zero ket
     j :: INT
     do j = 1,.n_geminals    
       .ket(j).element = ZERO
     end
   end

   set_to_zero_bra
   ! set to zero bra
     j :: INT
     do j = 1,.n_geminals    
       .bra(j).element = ZERO
     end
   end

   set_to_zero_contraction_wfs
   ! set to zero contraction_wfs
     j :: INT
     do j = 1,.n_geminals    
       .contraction_wfs(j).element = ZERO
     end
   end

   set_to_zero_energies
   ! set to zero contraction_energies
     .contraction_energies = ZERO
   end

!  ===============
!  INPUT Routines
!  ===============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
     keyword :: STR, IN
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case ("-- Regular options --   ")
       case ("}                       "); ! exit surrounding loop
       case ("do_overlap              "); .do_overlap
       case ("do_hamiltonian          "); .do_hamiltonian
       case ("junk=                   "); .read_junk
   !    case ("n_bf=                   "); .read_n_bf
       case ("put                     "); .put
       case ("units=                  "); .read_units
       ! These are only for making custom tables for the list type
       case ("-- Options for tables --")
       case  default ;      UNKNOWN(word)
     end
   end

   read_units ::: get_from(OBJECT), private
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT), private
   ! Read in a junk string, useful for ignoring a field
   end

   read_geminal(j,mat) ::: private, leaky
   ! Read in a new value of ".n_bf", which must be smaller than the initial
   ! basis set size. Truncate the coefficient matrices.
     j :: INT
     mat :: MAT{REAL}*
!     ENSURE(.bra.associated,"no bra")
!     ENSURE(.bra(1).element.associated,"no bra elements")
!     ENSURE(.ket.associated,"no ket")
!     ENSURE(.ket(1).element.associated,"no ket elements")
!     ENSURE(.contraction_wfs.associated,"no contraction_wfs")
!     ENSURE(.contraction_wfs(1).element.associated,"no contraction_wfs elements")
     in :: TEXTFILE*
     i,k,n,m :: INT
     name :: STR

     if (FALSE) self = self

     name="readin_geminal_"//j.to_str.trim
     in.create(name)
     in.open_for("read")
     in.read(n)

     mat = ZERO
     do m=1,n
       in.read(i)
       in.read(k)
       in.read(mat(i,k))
       !if (in.end_of_file) exit
     end

     in.close  
     in.destroy

   end

   get_wfs ::: leaky
   ! get wave functions from an archive file
     wfs_archive :: ARCHIVE
     name :: STR
     j :: INT
     
     name="wfs_"//.i_geminals.to_str.trim
     wfs_archive.set(.name,name)
     .get_max_bas
     if(.contraction_energies.associated) then
       .contraction_energies.destroy
       .contraction_wfs.destroy
     end
     .contraction_energies.create(.n_bas)
     .set_to_zero_energies
     .contraction_wfs.create(.n_bas)
     do j=1,.n_bas
       .contraction_wfs(j).element.create(.n_bf,.n_bf)
     end
     wfs_archive.read(.contraction_wfs)
   end

   get_ground_state
   ! get ground state wave function from an archive file
     ground_state_archive :: ARCHIVE
     name :: STR
     
     name="ground_state_"//.i_geminals.to_str.trim
     ground_state_archive.set(.name,name)
     ground_state_archive.read(.bra(.i_geminals).element)
     .ket(.i_geminals).element=.bra(.i_geminals).element
   end

   get_max_bas
   ! get number of basis functions from an archive file
     max_bas_archive :: ARCHIVE
     name :: STR
     
     name="max_bas_"//.i_geminals.to_str.trim
     max_bas_archive.set(.name,name)
     max_bas_archive.read(.n_bas)
   end

!  ===============
!  other Routines
!  ===============

   gs_permutation
   ! permute ground state wave functions of contractions 1 and i_geminals 
     ENSURE(.bra(.i_geminals).element.associated,".bra(.i_geminals) not created")
     ENSURE(.bra(1).element.associated,".bra(1) not created")
     ENSURE(.ket(1).element.associated,".ket(1) not created")
     temp :: MAT{REAL}*
     
     temp=>.bra(.i_geminals).element
     .ket(.i_geminals).element=>.ket(1).element
     .bra(.i_geminals).element=>.bra(1).element
     .ket(1).element=>temp
     .bra(1).element=>temp
     nullify(temp)
   end

!  ====================
!  Key related routines
!  ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

!  ===============
!  Inquiry methods
!  ===============

!   same_as(b) result(res) 
!   ! Return TRUE if the basis set "self" is the same as "b". Only the
!   ! shell vector is compared to see if they are "really" the same.
!      self :: IN
!      b :: GEMINAL_MF_SPECTRUM, IN
!      res :: BIN
!      res = FALSE
!   end

!  ==============
!  Output methods
!  ==============

   put
   ! Print out the object
      i,j,k :: INT
      stdout.text("GEMINAL_MF_SPECTRUM:")
      stdout.text(" ")
      stdout.show("i_geminals =",.i_geminals)
!      stdout.show("n_bf       =",.n_bf)
      stdout.show("n_bas       =",.n_bas)
      stdout.text(" ")
      stdout.text("Bra:")
      do i = 2,.n_geminals
         stdout.text("Bra "//i.to_str.trim//" non zero elements")
!         stdout.put(.bra(i).element)
! could use a while loop
        do j=1,.n_bf
        do k=1,.n_bf
          if (NOT .bra(i)[j,k].is_zero) then
            write(6,*)"j,k,element:",j,k,.bra(i)[j,k]
            !stdout.show("j,k,element:",[j,k,.bra(i)[j,k]])
          end
        end
        end
      end
      stdout.text("Ket:")
      do i = 2,.n_geminals
         stdout.text("Special ket "//i.to_str.trim)
         stdout.put(.special_ket(i).element)
         stdout.text("Ket "//i.to_str.trim//" non zero elements")
!         stdout.put(.ket(i).element)
        do j=1,.n_bf
        do k=1,.n_bf
          if (NOT .ket(i)[j,k].is_zero) then
            write(6,*)"j,k,element:",j,k,.ket(i)[j,k]
            !stdout.show("j,k,element:",[j,k,.ket(i)[j,k]])
          end
        end
        end
      end
      stdout.text("Contraction 1:")
      do i = 1,.n_bas
        stdout.text("Wave function "//i.to_str.trim//" non zero elements")
        do j=1,.n_bf
        do k=1,.n_bf
          if (NOT .contraction_wfs(i)[j,k].is_zero) then
            write(6,*)"j,k,element:",j,k,.contraction_wfs(i)[j,k]
            !stdout.show("j,k,element:",[j,k,.contraction_wfs(i)[j,k]])
          end
        end
        end
      end
   end

   put_ground_state_geminals
   ! Print out the object
      i,j,k :: INT
      stdout.text("ground state geminals:")
      stdout.text(" ")
      stdout.show("i_geminals =",.i_geminals)
      stdout.text(" ")
      stdout.text("Spectators:")
      do i = 2,.n_geminals
         stdout.text("Spectator"//i.to_str.trim//" non zero elements")
! could use a while loop
        do j=1,.n_bf
        do k=1,.n_bf
          if (NOT .bra(i)[j,k].is_zero) then
            write(6,*)"j,k,element:",j,k,.bra(i)[j,k]
            !stdout.show("j,k,element:",[j,k,.bra(i)[j,k]])
          end
        end
        end
      end
      stdout.text("Active:")
      do j=1,.n_bf
      do k=1,.n_bf
        if (NOT .contraction_wfs(1)[j,k].is_zero) then
          write(6,*)"j,k,element:",j,k,.contraction_wfs(1)[j,k]
        end
      end
      end
      stdout.text(" ")
   end

   put_wfs
   ! save wave functions in an archive file
     wfs_archive :: ARCHIVE
     name :: STR
     
     name="wfs_"//.i_geminals.to_str.trim
     wfs_archive.set(.name,name)
     wfs_archive.write(.contraction_wfs(1:.n_bas))
     .put_max_bas
   end

   put_ground_state
   ! save ground state wave function in an archive file
     ground_state_archive :: ARCHIVE
     name :: STR
     
     name="ground_state_"//.i_geminals.to_str.trim
     ground_state_archive.set(.name,name)
     ground_state_archive.write(.contraction_wfs(1).element)
   end

   put_max_bas
   ! save number of basis functions in an archive file
     max_bas_archive :: ARCHIVE
     name :: STR
     
     name="max_bas_"//.i_geminals.to_str.trim
     max_bas_archive.set(.name,name)
     max_bas_archive.write(.n_bas)
   end

!  ===============
!  Integral methods
!  ===============

!todolater   do_2rdm(ind_i,spin_i,ind_j,spin_j,ind_k,spin_k,ind_l,spin_l)
!todolater   ! Evaluate the 2 electron density matrix element in a geminal induced basis set
!todolater   ! built over orthonormal orbitals
!todolater     ind_i,spin_i,ind_j,spin_j,ind_k,spin_k,ind_l,spin_l :: INT
!todolater     res :: MAT{REAL}(.n_bas,.n_bas)
!todolater   !debug   write(*,*) ".n_bas",.n_bas,".n_bf",.n_bf
!todolater      res = .two_rdm(ind_i,spin_i,ind_j,spin_j,ind_k,spin_k,ind_l,spin_l)
!todolater      stdout.text("The 2 electron density matrix element is ")
!todolater      stdout.put(res)
!todolater   end
! have to store all the 2RDM matrix elements 
! for the .n_bas*.n_bas pairs of functions of contraction 1

   electric_dipole_x result (res)
   ! Evaluate the electric_dipole x component matrix for a given geminal contraction
     res :: MAT{REAL}(.n_bas,.n_bas)
   ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")

     v :: MAT4{REAL}*
     edm_archive :: ARCHIVE
     reorder_ket :: VEC{INT}*
     i,j :: INT

     edm_archive.set(.name,"Dx_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     edm_archive.read(v)

     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]

     res = .hamiltonian_for(v,reorder_ket) 
     do i=1,.n_bas
     do j=1,i-1
     res(i,j) = res(j,i)
     end
     end

     reorder_ket.destroy
     v.destroy

   end

   electric_dipole_y result (res)
   ! Evaluate the electric_dipole y component matrix for a given geminal contraction
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
     v :: MAT4{REAL}*
     edm_archive :: ARCHIVE
     reorder_ket :: VEC{INT}*
     i,j :: INT

     edm_archive.set(.name,"Dy_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     edm_archive.read(v)
     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]
     res=ZERO
     res = .hamiltonian_for(v,reorder_ket) 
     do i=1,.n_bas
     do j=1,i-1
     res(i,j) = res(j,i)
     end
     end
     reorder_ket.destroy
     v.destroy
   end

   electric_dipole_z result (res)
   ! Evaluate the electric_dipole z component matrix for a given geminal contraction
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
     v :: MAT4{REAL}*
     edm_archive :: ARCHIVE
     reorder_ket :: VEC{INT}*
     i,j :: INT

     edm_archive.set(.name,"Dz_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     edm_archive.read(v)
     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]
     res=ZERO
     res = .hamiltonian_for(v,reorder_ket) 
     do i=1,.n_bas
     do j=1,i-1
     res(i,j) = res(j,i)
     end
     end
     reorder_ket.destroy
     v.destroy
   end
  
   hamiltonian result (res)
   ! Evaluate the hamiltonian matrix for a given geminal contraction
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
     v :: MAT4{REAL}*
     eri_archive :: ARCHIVE
     reorder_ket :: VEC{INT}*
     i,j :: INT

     eri_archive.set(.name,"h_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     eri_archive.read(v)
     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]
     res=ZERO
     res = .hamiltonian_for(v,reorder_ket) 
     do i=1,.n_bas
     do j=1,i-1
     res(i,j) = res(j,i)
     end
 !    res(i,i) = res(i,i) + .nuclear_repulsion_energy
     end
     reorder_ket.destroy
     v.destroy
   end

   hamiltonian(i) result (res)
   ! Evaluate the hamiltonian matrix for a given geminal contraction
     i :: INT
     res :: VEC{REAL}(.n_bas)
     ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
     v :: MAT4{REAL}*
     eri_archive :: ARCHIVE
     reorder_ket :: VEC{INT}*

     eri_archive.set(.name,"h_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     eri_archive.read(v)
     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]
   !  res.create(.n_bas)
     res=ZERO
     res = .hamiltonian_for(v,reorder_ket,i)
  !   if(i==j) res = res +.nuclear_repulsion_energy
     reorder_ket.destroy
     v.destroy
   end

   hamiltonian(i,j) result (res)
   ! Evaluate the hamiltonian matrix for a given geminal contraction
     i,j :: INT
     res :: REAL
     ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
     v :: MAT4{REAL}*
     eri_archive :: ARCHIVE
     reorder_ket :: VEC{INT}*

     eri_archive.set(.name,"h_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     eri_archive.read(v)
     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]
     res=ZERO
     res = .hamiltonian_for(v,reorder_ket,j,i)
  !   if(i==j) res = res +.nuclear_repulsion_energy
     reorder_ket.destroy
     v.destroy
   end

   make_RHM(rhm)
   ! make reduced hamiltonian matrix 
     rhm ::  MAT{REAL}*
     v :: MAT4{REAL}*
     i,j,k,l,m,n :: INT
     eri_archive :: ARCHIVE
     rhm = ZERO
     eri_archive.set(.name,"h_integrals")
     v.create(.n_bf,.n_bf,.n_bf,.n_bf)
     eri_archive.read(v)
     do i=1,.n_bas
       do k=1,.n_bf
         do l=1,.n_bf
           if(NOT .contraction_wfs(i)[k,l].is_zero)then
             do j=1,.n_bas
               do m=1,.n_bf
                 do n=1,.n_bf
                   if(NOT .contraction_wfs(j)[m,n].is_zero)then
                     rhm(i,j)=rhm(i,j)+ &
              .contraction_wfs(i)[k,l]*.contraction_wfs(j)[m,n]*v(k,l,m,n)
                   end
                 end
               end
             end
           end
         end
       end
     end
     v.destroy
   end

!to do one day ...: fix the indentation of the tests if(NOT fac.is_zero(.tol)) in
!Hamiltonian_for functions
! change .n_bf into n_bf after adding n_bf=.n_bf at the beginning of the
! recursive functions

   hamiltonian_for(v,order_ket) result (res) ::: recursive
   ! Standard recursive function which evaluates the hamiltonian integrals matrix
   ! between mean field (Sz=0)-geminals 
   ! v is the array containing the hf integrals of the 2-electron Hamiltonian.
!comments:
!special_ket are always created at the end so that if ii is a special ket,
!than jj>ii is also a special ket. This allows some simplifications but may be a
!bit limitative in the future.
     order_ket :: VEC{INT}, IN
     v :: MAT4{REAL}, IN
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     row_ind, col_ind :: INT
     ii,jj,kk,j,k,l,dim,bi1,bi2,bj1,bj2,bk1,bk2,bq1,bq2 :: INT
     fac :: REAL
     reorder_ket,reorder_bra :: VEC{INT}*
     temp_bra_q :: MAT{REAL}*
     temp_bra_i :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_h2_q ::  MAT{REAL}*
     temp_qa_h2 :: MAT4{REAL}*
     temp_qb_h2 :: MAT4{REAL}*
     temp_qa_h2_ja :: MAT4{REAL}*
     temp_qa_h2_ja_ex :: MAT4{REAL}*
     temp_qb_h2_jb :: MAT4{REAL}*
     temp_qb_h2_jb_ex :: MAT4{REAL}*
     temp_qa_h2_jb :: MAT4{REAL}*
     temp_qb_h2_ja :: MAT4{REAL}*
     temp_qa_h2_ja_kb :: MAT4{REAL}*
     temp_qa_h2_jb_ka :: MAT4{REAL}*
     temp_qb_h2_jb_ka :: MAT4{REAL}*
     temp_qb_h2_ja_kb :: MAT4{REAL}*
     temp_qa_h2_ja_ka :: MAT4{REAL}*
     temp_qb_h2_jb_kb :: MAT4{REAL}*
     temp_qa_h2_ja_ex_ka :: MAT4{REAL}*
     temp_qb_h2_jb_ex_kb :: MAT4{REAL}*
     temp_qb_jb :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_q_h2_ja_kb :: MAT{REAL}*
     temp_q_h2_jb_ka :: MAT{REAL}*
     temp_qa_h2_j :: MAT{REAL}*
     temp_qb_h2_j :: MAT{REAL}*

     nullify(temp_qa_h2_ja)
     nullify(temp_qb_h2_jb)
     nullify(temp_qa_h2_jb)
     nullify(temp_qb_h2_ja)
     nullify(temp_qa_h2_ja_ex)
     nullify(temp_qb_h2_jb_ex)
     nullify(temp_qa_ja)
     nullify(temp_qb_jb)
     nullify(temp_q_h2_ja_kb)
     nullify(temp_q_h2_jb_ka)
     nullify(temp_qb_h2_jb_kb)
     nullify(temp_qb_h2_jb_ex_kb)
     nullify(temp_qa_h2_ja_ka)
     nullify(temp_qa_h2_ja_ex_ka)
     nullify(temp_qa_h2_ja_kb)
     nullify(temp_qb_h2_jb_ka)
     nullify(temp_qa_h2_jb_ka)
     nullify(temp_qb_h2_ja_kb)
     dim = order_ket.dim
     res = ZERO
      
     if (dim==1) then ! case 1.2 only
       j = order_ket(1)
       DIE_IF(j/=1,"dim=1 but j not 1")
       temp_h2_q.create(.n_bf,.n_bf)
       do col_ind=1,.n_bas
         do bj2=1,.n_bf
         do bj1=1,.n_bf
           temp_h2_q(bj1,bj2) = sum(v(bj1,bj2,:,:)*.contraction_wfs(col_ind)[:,:])
         end
         end
         do row_ind=1,col_ind
           res(row_ind,col_ind) = sum(.contraction_wfs(row_ind)[:,:]*temp_h2_q)
         end
       end
       temp_h2_q.destroy
    !debug           write(*,*) 'case 1.2',dim,res
       return
     else ! dim > 1
       temp_bra_q => .bra(dim)[:,:]
       reorder_ket.create(dim-1)
!the next two arrays are created here because they are small and used in all
!cases
       temp_qa_h2_j.create(.n_bf,.n_bf)
       temp_qb_h2_j.create(.n_bf,.n_bf)
       temp_qa_h2.create(.n_bf,.n_bf,.n_bf,.n_bf)
       temp_qb_h2.create(.n_bf,.n_bf,.n_bf,.n_bf)
       do bj2=1,.n_bf
       do bj1=1,.n_bf
       do bq2=1,.n_bf
       do bq1=1,.n_bf
! respect the bra/ket nature of the indices
         temp_qa_h2(bq1,bq2,bj1,bj2)=sum(temp_bra_q(:,bq2)*v(:,bq1,bj1,bj2))
         temp_qb_h2(bq1,bq2,bj1,bj2)=sum(temp_bra_q(bq1,:)*v(bq2,:,bj1,bj2))
       end
       end
       end
       end
       do jj = dim,1,-1
         j = order_ket(jj)
!debug   write(*,*) "jj,j",jj,j
         if (j==1) then !ket from contraction 1
           DIE_IF(jj/=1,"j is 1 but jj not 1")
           do col_ind=1,.n_bas
             temp_ket_j => .contraction_wfs(col_ind)[:,:]
             if(temp_qa_h2_ja.disassociated) then
               temp_qa_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qa_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
  !the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
  ! in case of memory shortage they can be created later but then the loop on kk 
  !must be done for each subcase.
               temp_qa_h2_ja_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_jb_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qa_ja.create(.n_bf,.n_bf)
               temp_qb_jb.create(.n_bf,.n_bf)
             end
             do bj2=1,.n_bf
             do bq2=1,.n_bf
               temp_qa_ja(bq2,bj2)=sum(temp_bra_q(:,bq2)*temp_ket_j(:,bj2))
               temp_qb_jb(bq2,bj2)=sum(temp_bra_q(bq2,:)*temp_ket_j(bj2,:))
             end
             end
             do bj2=1,.n_bf
             do bj1=1,.n_bf
             do bq2=1,.n_bf
             do bq1=1,.n_bf
! respect the bra/ket nature of the indices
               temp_qa_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
               temp_qa_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
               temp_qb_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
               temp_qb_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
               temp_qa_h2_ja_ex(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj1,:)*temp_ket_j(:,bj2))
               temp_qb_h2_jb_ex(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj2)*temp_ket_j(bj1,:))
             end
             end
             end
             end
!case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk) !cannot be 1
!debug                write(*,*) "kk,k",kk,k
               DIE_IF(k<2,"k cannot be 1")  !debug
               reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) =  k
               if (.special_ket(k)[1]==0) then !k not special
                 temp_ket_k => .ket(k)[:,:]
!case 2.3
                 if(temp_qa_h2_ja_kb.disassociated) then
                   temp_qa_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction
                   temp_qb_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction 
                   temp_qa_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf)
                   temp_qb_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf)
                 end
!case 2.3.1 call special overlap ab
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qa_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                   temp_qa_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                   temp_qb_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                   temp_qb_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                 end
                 end
                 end
                 end
                 reorder_bra.create(dim-2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,.n_bf
                     .special_ket(k)[2] = bj2
                     do bk1=1,.n_bf
                       .special_ket(k)[1] = bk1 
                       do bq1=1,.n_bf
                       do bi2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                            + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                            + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                            + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                         if( NOT fac.is_zero(.tol)) then
                           res(:,col_ind) = res(:,col_ind) &
                           + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2)*fac
                         end 
                       end 
                       end
                     end
                   end
                 end !do ii, the case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do row_ind = 1, col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj2=1,.n_bf
                     .special_ket(k)[2] = bj2
                     do bk1=1,.n_bf
                       .special_ket(k)[1] = bk1 
                       do bi2=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                            + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                            + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                            + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                         if( NOT fac.is_zero(.tol)) then
                           res(row_ind,col_ind) = res(row_ind,col_ind) &
                           + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac 
                         end 
                       end 
                       end
                     end
                   end
                 end
!debug                 write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
                 temp_qb_h2_jb_kb => temp_qb_h2_ja_kb
                 temp_qb_h2_jb_ex_kb => temp_qa_h2_jb_ka
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qb_h2_jb_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                   temp_qb_h2_jb_ex_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb_ex(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                 end
                 end
                 end
                 end
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bk1=1,.n_bf
                     .special_ket(k)[2] = bk1
                     do bj1=1,.n_bf
                       .special_ket(k)[1] = bj1 
                       do bi1=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                            + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                         if( NOT fac.is_zero(.tol)) then
                           res(:,col_ind) = res(:,col_ind) &
                           + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,col_ind,bi1,bq1) * fac 
                         end 
                       end 
                       end
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bk1=1,.n_bf
                     .special_ket(k)[2] = bk1
                     do bj1=1,.n_bf
                       .special_ket(k)[1] = bj1 
                       do bi1=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                            + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                         if( NOT fac.is_zero(.tol)) then
                           res(row_ind,col_ind) = res(row_ind,col_ind) &
                           + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! <
                         end 
                       end 
                       end
                     end
                   end
                 end
!debug                 write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
                 temp_qa_h2_ja_ka => temp_qb_h2_ja_kb
                 temp_qa_h2_ja_ex_ka => temp_qa_h2_jb_ka
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qa_h2_ja_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                   temp_qa_h2_ja_ex_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja_ex(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                 end
                 end
                 end
                 end
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bk2=1,.n_bf
                     .special_ket(k)[2] = bk2
                     do bj2=1,.n_bf
                       .special_ket(k)[1] = bj2 
                       do bi2=1,.n_bf
                       do bq2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                            + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                         if( NOT fac.is_zero(.tol)) then
                           res(:,col_ind) = res(:,col_ind) &
                           + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,col_ind,bi2,bq2) * fac ! <<
                         end 
                       end 
                       end
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bk2=1,.n_bf
                     .special_ket(k)[2] = bk2
                     do bj2=1,.n_bf
                       .special_ket(k)[1] = bj2 
                       do bi2=1,.n_bf
                       do bq2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                            + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                         if( NOT fac.is_zero(.tol)) then
                           res(row_ind,col_ind) = res(row_ind,col_ind) &
                           + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <
                         end 
                       end 
                       end
                     end
                   end
                 end
                 reorder_bra.destroy
!debug                 write(*,*) 'case 2.3.3',dim,res
!case 2.2
                ! if(temp_q_h2_ja_kb.disassociated) then
                !   temp_q_h2_ja_kb.create(.n_bf,.n_bf)
                !   temp_q_h2_jb_ka.create(.n_bf,.n_bf)
                ! end
                ! temp_qa_h2_ja_kb.partial_trace(1,2,temp_q_h2_ja_kb) !no gain by storing that
                ! temp_qb_h2_jb_ka.partial_trace(1,2,temp_q_h2_jb_ka) !but convenient
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     temp_q_h2_ja_kb => temp_qa_h2_ja_kb(:,:,bk1,bj2)
                     temp_q_h2_jb_ka => temp_qb_h2_jb_ka(:,:,bk1,bj2)
                     fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1] = bk1 
                       res(:,col_ind) = res(:,col_ind) &
                       - .overlap_for(reorder_ket,col_ind) * fac 
                     end 
                   end 
                 end
!debug                 write(*,*) 'case 2.2',dim,res
!case 2.1
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     fac= sum(temp_qa_ja(:,bj2)*temp_ket_k(bk1,:))+sum(temp_qb_jb(:,bk1)*temp_ket_k(:,bj2))
                     if( NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1] = bk1 
                       res(:,col_ind) = res(:,col_ind) &
                       - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                     end 
                   end 
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
!debug                 write(*,*) 'case 2.1',dim,res
               else !k special
                 bk1=.special_ket(k)[1]
                 bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
                 !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
                 !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
                 !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 reorder_bra.create(dim-2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,bk2-1
                !    .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(:,col_ind) = res(:,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                       end 
                     end
                     end
                   end
                   do bj2=bk2+1,.n_bf
                   ! .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(:,col_ind) = res(:,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <
                       end 
                     end 
                     end 
                   end
                   .special_ket(k)[2] = bk2 
                   do bj1=1,bk1-1
                     .special_ket(k)[1] = bj1 
                !    .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(:,col_ind) = res(:,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                       end 
                     end 
                     end
                   end
                   do bj1=bk1+1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(:,col_ind) = res(:,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                       end 
                     end 
                     end
                   end
                   .special_ket(k)[1] = bk1 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2
                     if( NOT fac.is_zero(.tol)) then
                       res(:,col_ind) = res(:,col_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end !do ii, the case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj2=1,bk2-1
                !    .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(row_ind,col_ind) = res(row_ind,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                       end 
                     end
                     end
                   end
                   do bj2=bk2+1,.n_bf
                   ! .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(row_ind,col_ind) = res(row_ind,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                       end 
                     end 
                     end 
                   end
                   .special_ket(k)[2] = bk2 
                   do bj1=1,bk1-1
                     .special_ket(k)[1] = bj1 
                !    .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(row_ind,col_ind) = res(row_ind,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                       end 
                     end 
                     end
                   end
                   do bj1=bk1+1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(row_ind,col_ind) = res(row_ind,col_ind) &
                         + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                       end 
                     end 
                     end
                   end
                   .special_ket(k)[1] = bk1 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end 
                 .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug                 write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
                !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
                !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
               !     .special_ket(k)[2] = bk1
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                       if( NOT fac.is_zero(.tol)) then
                         res(:,col_ind) = res(:,col_ind) &
                         + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,col_ind,bi1,bq1) * fac ! <
                       end 
                     end 
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk1
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                       if( NOT fac.is_zero(.tol)) then
                         res(row_ind,col_ind) = res(row_ind,col_ind) &
                         + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                       end 
                     end 
                     end
                   end
                 end
                 .special_ket(k)[2] = bk2 
!debug                 write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
               !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
               !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                 !   .special_ket(k)[2] = bk2
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(:,col_ind) = res(:,col_ind) &
                         + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,col_ind,bi2,bq2) * fac ! <<
                       end 
                     end 
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                  !  .special_ket(k)[2] = bk2
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                       if( NOT fac.is_zero(.tol)) then
                         res(row_ind,col_ind) = res(row_ind,col_ind) &
                         + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <
                       end 
                     end 
                     end
                   end
                 end
                 .special_ket(k)[1] = bk1 
                 reorder_bra.destroy
!debug                 write(*,*) 'case 2.3.3',dim,res
!case 2.2
                 !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 do bj2=1,bk2-1
                   temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                   fac= temp_q_h2_ja_kb.trace
                   if( NOT fac.is_zero(.tol)) then
                 !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 do bj2=bk2+1,.n_bf
                   temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                   fac= temp_q_h2_ja_kb.trace
                   if( NOT fac.is_zero(.tol)) then
                 !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 .special_ket(k)[2] = bk2
                 !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 do bj1=1,bk1-1
                   temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                   fac= temp_q_h2_jb_ka.trace
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                !   .special_ket(k)[2] = bk2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 do bj1=bk1+1,.n_bf
                   temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                   fac= temp_q_h2_jb_ka.trace
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                !   .special_ket(k)[2] = bk2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 .special_ket(k)[1] = bk1 
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bk1,bk1)
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bk2)
                 fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                 if( NOT fac.is_zero(.tol)) then
             !    .special_ket(k)[1] = bk1 
             !    .special_ket(k)[2] = bk2
                   res(:,col_ind) = res(:,col_ind) &
                   - .overlap_for(reorder_ket,col_ind) * fac ! 
                 end 
!debug                 write(*,*) 'case 2.2',dim,res
!case 2.1
                 do bj2=1,bk2-1
                   fac= temp_qa_ja(bk2,bj2)
                   if( NOT fac.is_zero(.tol)) then
                  !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 do bj2=bk2+1,.n_bf
                   fac= temp_qa_ja(bk2,bj2)
                   if( NOT fac.is_zero(.tol)) then
                  !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   fac= temp_qb_jb(bk1,bj1)
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                   ! .special_ket(k)[2] = bk2
                     res(:,col_ind) = res(:,col_ind) &
                     - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 do bj1=bk1+1,.n_bf
                   fac= temp_qb_jb(bk1,bj1)
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                   ! .special_ket(k)[2] = bk2
                     res(:,col_ind) = res(:,col_ind) &
                     - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                   end 
                 end
                 .special_ket(k)[1] = bk1 
                 fac= temp_qb_jb(bk1,bk1) + temp_qa_ja(bk2,bk2)
                 if( NOT fac.is_zero(.tol)) then
                 !  .special_ket(k)[1] = bk1 
                 !  .special_ket(k)[2] = bk2
                   res(:,col_ind) = res(:,col_ind) &
                   - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 end
!debug                 write(*,*) 'case 2.1',dim,res
               end !k special
             end !do kk
             nullify(temp_q_h2_ja_kb)
             nullify(temp_q_h2_jb_ka)
             temp_qb_h2_jb_ka.destroy
             nullify(temp_qb_h2_jb_kb)
             nullify(temp_qb_h2_jb_ex_kb)
             temp_qa_h2_ja_kb.destroy
             nullify(temp_qa_h2_ja_ka)
             nullify(temp_qa_h2_ja_ex_ka)
             temp_qa_h2_jb_ka.destroy
             temp_qb_h2_ja_kb.destroy
!case 1.3
             temp_qb_h2_jb.partial_trace(3,4,temp_qb_h2_j)
             temp_qa_h2_ja.partial_trace(3,4,temp_qa_h2_j)
             !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
             !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
          !   reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
!debug             stdout.put(reorder_ket)
             reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
             reorder_bra.create(dim-2)
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                 if( NOT fac.is_zero(.tol)) then
                   res(:,col_ind) = res(:,col_ind) &
                   - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                 end 
               end
               end
             end !ii case ii=1 remains 
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do row_ind=1,col_ind
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                 if( NOT fac.is_zero(.tol)) then
                   res(row_ind,col_ind) = res(row_ind,col_ind) &
                   - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                 end 
               end
               end
             end
             reorder_bra.destroy
!debug                 write(*,*) 'case 1.3',dim,res
!case 1.2
             fac=temp_qb_h2_j.trace
             if( NOT fac.is_zero(.tol)) then
               res(:,col_ind) = res(:,col_ind) &
               + .overlap_for(reorder_ket,col_ind) * fac ! 
             end 
!debug                 write(*,*) 'case 1.2',dim,res
!case 1.1
             fac=temp_qb_jb.trace
             if( NOT fac.is_zero(.tol)) then
               res(:,col_ind) = res(:,col_ind) &
               + .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
             end 
!debug                 write(*,*) 'case 1.1',dim,res
           end !do col_ind
         else !j>1
           if (.special_ket(j)[1]==0) then !j not special
             temp_ket_j => .ket(j)[:,:]
             if(temp_qa_h2_ja.disassociated) then
               temp_qa_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qa_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
               temp_qa_h2_ja_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_jb_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qa_ja.create(.n_bf,.n_bf)
               temp_qb_jb.create(.n_bf,.n_bf)
             end
             do bj2=1,.n_bf
             do bq2=1,.n_bf
               temp_qa_ja(bq2,bj2)=sum(temp_bra_q(:,bq2)*temp_ket_j(:,bj2))
               temp_qb_jb(bq2,bj2)=sum(temp_bra_q(bq2,:)*temp_ket_j(bj2,:))
             end
             end
             do bj2=1,.n_bf
             do bj1=1,.n_bf
             do bq2=1,.n_bf
             do bq1=1,.n_bf
! respect the bra/ket nature of the indices
               temp_qa_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
               temp_qa_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
               temp_qb_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
               temp_qb_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
               temp_qa_h2_ja_ex(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj1,:)*temp_ket_j(:,bj2))
               temp_qb_h2_jb_ex(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj2)*temp_ket_j(bj1,:))
             end
             end
             end
             end
!case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk) !cannot be 1
!debug               write(*,*) 'kk,k',kk,k
               DIE_IF(k<2,"k cannot be 1")  !debug
               reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) =  k
               if (.special_ket(k)[1]==0) then !k not special
                 temp_ket_k => .ket(k)[:,:]
!case 2.3
                 if(temp_qa_h2_ja_kb.disassociated) then
                   temp_qa_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction
                   temp_qb_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction 
                   temp_qa_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf)
                   temp_qb_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf)
                 end
!case 2.3.1 call special overlap ab
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qa_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                   temp_qa_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                   temp_qb_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                   temp_qb_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                 end
                 end
                 end
                 end
                 reorder_bra.create(dim-2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,.n_bf
                     .special_ket(k)[2] = bj2
                     do bk1=1,.n_bf
                       .special_ket(k)[1] = bk1 
                       do bq1=1,.n_bf
                       do bi2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                            + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                            + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                            + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                         if( NOT fac.is_zero(.tol)) then
                           res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                         end 
                       end 
                       end
                     end
                   end
                 end !do ii, the case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj2=1,.n_bf
                     .special_ket(k)[2] = bj2
                     do bk1=1,.n_bf
                       .special_ket(k)[1] = bk1 
                       do bi2=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                            + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                            + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                            + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                         if( NOT fac.is_zero(.tol)) then
                           res(row_ind,col_ind) = res(row_ind,col_ind) &
                           + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <
                         end 
                       end 
                       end
                     end
                   end
                 end
                 end
!debug               write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
                 temp_qb_h2_jb_kb => temp_qb_h2_ja_kb
                 temp_qb_h2_jb_ex_kb => temp_qa_h2_jb_ka
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qb_h2_jb_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                   temp_qb_h2_jb_ex_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb_ex(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                 end
                 end
                 end
                 end
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bk1=1,.n_bf
                     .special_ket(k)[2] = bk1
                     do bj1=1,.n_bf
                       .special_ket(k)[1] = bj1 
                       do bi1=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                            + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                         if( NOT fac.is_zero(.tol)) then
                           res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,bi1,bq1) * fac ! <<
                         end 
                       end 
                       end
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bk1=1,.n_bf
                     .special_ket(k)[2] = bk1
                     do bj1=1,.n_bf
                       .special_ket(k)[1] = bj1 
                       do bi1=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                            + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                         if( NOT fac.is_zero(.tol)) then
                           res(row_ind,col_ind) = res(row_ind,col_ind) &
                           + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                         end 
                       end 
                       end
                     end
                   end
                 end
                 end
!debug              write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
                 temp_qa_h2_ja_ka => temp_qb_h2_ja_kb
                 temp_qa_h2_ja_ex_ka => temp_qa_h2_jb_ka
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qa_h2_ja_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                   temp_qa_h2_ja_ex_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja_ex(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                 end
                 end
                 end
                 end
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bk2=1,.n_bf
                     .special_ket(k)[2] = bk2
                     do bj2=1,.n_bf
                       .special_ket(k)[1] = bj2 
                       do bi2=1,.n_bf
                       do bq2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                            + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                         if( NOT fac.is_zero(.tol)) then
                           res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,bi2,bq2) * fac ! <
                         end 
                       end 
                       end
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bk2=1,.n_bf
                     .special_ket(k)[2] = bk2
                     do bj2=1,.n_bf
                       .special_ket(k)[1] = bj2 
                       do bi2=1,.n_bf
                       do bq2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                            + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                         if( NOT fac.is_zero(.tol)) then
                           res(row_ind,col_ind) = res(row_ind,col_ind) &
                           + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                         end 
                       end 
                       end
                     end
                   end
                 end
                 end
                 reorder_bra.destroy
!debug               write(*,*) 'case 2.3.3',dim,res
!case 2.2
                ! if(temp_q_h2_ja_kb.disassociated) then
                !   temp_q_h2_ja_kb.create(.n_bf,.n_bf)
                !   temp_q_h2_jb_ka.create(.n_bf,.n_bf)
                ! end
                ! temp_qa_h2_ja_kb.partial_trace(1,2,temp_q_h2_ja_kb) !no gain by storing that
                ! temp_qb_h2_jb_ka.partial_trace(1,2,temp_q_h2_jb_ka) !but convenient
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     temp_q_h2_ja_kb => temp_qa_h2_ja_kb(:,:,bk1,bj2)
                     temp_q_h2_jb_ka => temp_qb_h2_jb_ka(:,:,bk1,bj2)
                     fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1] = bk1 
                       res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                   end 
                 end
!debug               write(*,*) 'case 2.2',dim,res
!case 2.1
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     fac= sum(temp_qa_ja(:,bj2)*temp_ket_k(bk1,:))+sum(temp_qb_jb(:,bk1)*temp_ket_k(:,bj2))
                     if( NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1] = bk1 
                       res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                     end 
                   end 
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
!debug               write(*,*) 'case 2.1',dim,res
               else !k special
                 bk1=.special_ket(k)[1]
                 bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
                 !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
                 !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
                 !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 reorder_bra.create(dim-2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,bk2-1
                !    .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                       end 
                     end
                     end
                   end
                   do bj2=bk2+1,.n_bf
                   ! .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                       end 
                     end 
                     end 
                   end
                   .special_ket(k)[2] = bk2 
                   do bj1=1,bk1-1
                     .special_ket(k)[1] = bj1 
                !    .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                       if( NOT fac.is_zero(.tol)) then
                         res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                       end 
                     end 
                     end
                   end
                   do bj1=bk1+1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                     end 
                     end 
                     end
                   end
                   .special_ket(k)[1] = bk1 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end !do ii, the case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj2=1,bk2-1
                !    .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end
                     end
                   end
                   do bj2=bk2+1,.n_bf
                   ! .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end 
                   end
                   .special_ket(k)[2] = bk2 
                   do bj1=1,bk1-1
                     .special_ket(k)[1] = bj1 
                !    .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end
                   end
                   do bj1=bk1+1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end
                   end
                   .special_ket(k)[1] = bk1 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2
                     res(row_ind,col_ind) = res(row_ind,col_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end 
                 end 
                 end 
                 .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
                !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
                !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
               !     .special_ket(k)[2] = bk1
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,bi1,bq1) * fac ! 
                     end 
                     end 
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk1
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                     end 
                     end
                   end
                 end
                 end
                 .special_ket(k)[2] = bk2 
!debug               write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
               !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
               !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                 !   .special_ket(k)[2] = bk2
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,bi2,bq2) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end !do ii , case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                  !  .special_ket(k)[2] = bk2
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind,col_ind) = res(row_ind,col_ind) &
                       + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end
                 end
                 .special_ket(k)[1] = bk1 
                 reorder_bra.destroy
!debug               write(*,*) 'case 2.3.3',dim,res
!case 2.2
                 !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 do bj2=1,bk2-1
                   temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                   fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                 end
                 do bj2=bk2+1,.n_bf
                   temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                   fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                 end
                 .special_ket(k)[2] = bk2
                 !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 do bj1=1,bk1-1
                   temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                   fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                !  .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                 end
                 do bj1=bk1+1,.n_bf
                   temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                   fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                !  .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                 end
                 .special_ket(k)[1] = bk1 
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bk1,bk1)
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bk2)
                 fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
             !    .special_ket(k)[1] = bk1 
             !    .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
!debug               write(*,*) 'case 2.2',dim,res
!case 2.1
                 do bj2=1,bk2-1
                   fac= temp_qa_ja(bk2,bj2)
                   if( NOT fac.is_zero(.tol)) then
                  !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                   end 
                 end
                 do bj2=bk2+1,.n_bf
                   fac= temp_qa_ja(bk2,bj2)
                   if( NOT fac.is_zero(.tol)) then
                  !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                   end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   fac= temp_qb_jb(bk1,bj1)
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                   ! .special_ket(k)[2] = bk2
                     res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                   end 
                 end
                 do bj1=bk1+1,.n_bf
                   fac= temp_qb_jb(bk1,bj1)
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                   ! .special_ket(k)[2] = bk2
                     res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                   end 
                 end
                 .special_ket(k)[1] = bk1 
                 fac= temp_qb_jb(bk1,bk1) + temp_qa_ja(bk2,bk2)
                 if( NOT fac.is_zero(.tol)) then
                 !  .special_ket(k)[1] = bk1 
                 !  .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                 end
!debug               write(*,*) 'case 2.1',dim,res
               end !k special
             end !do kk
             nullify(temp_q_h2_ja_kb)
             nullify(temp_q_h2_jb_ka)
             temp_qb_h2_jb_ka.destroy
             nullify(temp_qb_h2_jb_kb)
             nullify(temp_qb_h2_jb_ex_kb)
             temp_qa_h2_ja_kb.destroy
             nullify(temp_qa_h2_ja_ka)
             nullify(temp_qa_h2_ja_ex_ka)
             temp_qa_h2_jb_ka.destroy
             temp_qb_h2_ja_kb.destroy
!case 1.3
             temp_qb_h2_jb.partial_trace(3,4,temp_qb_h2_j)
             temp_qa_h2_ja.partial_trace(3,4,temp_qa_h2_j)
             !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
             !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
             ! reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
!debug             stdout.put(reorder_ket)
             reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
             reorder_bra.create(dim-2)
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
                 res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                     end 
               end
               end
             end !ii case ii=1 remains 
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do col_ind=1,.n_bas
             do row_ind=1,col_ind
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                 if( NOT fac.is_zero(.tol)) then
                   res(row_ind,col_ind) = res(row_ind,col_ind) &
                   - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                 end 
               end
               end
             end
             end
             reorder_bra.destroy
!debug               write(*,*) 'case 1.3',dim,res
!case 1.2
             fac=temp_qb_h2_j.trace
             if( NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_ket) * fac 
             end 
!debug               write(*,*) 'case 1.2',dim,res
!case 1.1
             fac=temp_qb_jb.trace
             if( NOT fac.is_zero(.tol)) then
               res = res + .hamiltonian_for(v,reorder_ket) * fac ! 
             end 
!debug               write(*,*) 'case 1.1',dim,res
           else ! j is a special ket
! warning: we have not changed the structure with respect to the case "not a
! special ket", therefore more space than needed is used and large parts of the
! arrays are dangerously not initialized.
             bj1=.special_ket(j)[1]
             bj2=.special_ket(j)[2]
!case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk) !cannot be 1
!debug               write(*,*) 'kk,k',kk,k
               DIE_IF(k<2,"k cannot be 1")  !debug
               reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) =  k
               DIE_IF(.special_ket(k)[1]==0,"j special ket but not k") 
               bk1=.special_ket(k)[1]
               bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
               !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               reorder_bra.create(dim-2)
               if(bj2/=bk2 OR bj1/=bk1) then
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! <<
                     end 
                   end
                   end
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! <<
                     end 
                   end
                   end
                   .special_ket(k)[1] = bk1 
                 end !do ii, the case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind,col_ind) = res(row_ind,col_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end
                   end
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind,col_ind) = res(row_ind,col_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end
                   end
                   .special_ket(k)[1] = bk1 
                 end
                 end
               else !bj1==bk1 AND bj2==bk2
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !     .special_ket(k)[1] = bk1 
                !     .special_ket(k)[2] = bk2
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end !do ii, the case ii=1 is left
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do col_ind=1,.n_bas
                 do row_ind=1,col_ind
                   temp_bra_i => .contraction_wfs(row_ind)[:,:]
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !     .special_ket(k)[1] = bk1 
                !     .special_ket(k)[2] = bk2
                     res(row_ind,col_ind) = res(row_ind,col_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end 
                 end 
               end !bj1==bk1 AND bj2==bk2
               .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
              !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
              !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
               .special_ket(k)[1] = bj1 
             ! .special_ket(k)[2] = bk1
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bi1=1,.n_bf
                 do bq1=1,.n_bf
                   fac= sum(temp_qb_h2(bq1,:,bj2,bk2)*temp_bra_i(bi1,:))     &
                      + sum(temp_qb_h2(bi1,:,bk2,bj2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,bi1,bq1) * fac ! 
                     end 
                 end
                 end
               end !do ii , case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do col_ind=1,.n_bas
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bi1=1,.n_bf
                 do bq1=1,.n_bf
                   fac= sum(temp_qb_h2(bq1,:,bj2,bk2)*temp_bra_i(bi1,:))     &
                      + sum(temp_qb_h2(bi1,:,bk2,bj2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                   res(row_ind,col_ind) = res(row_ind,col_ind) &
                   + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                 end
                 end
               end
               end
!debug               write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
             !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
             !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
               .special_ket(k)[2] = bk2 
               .special_ket(k)[1] = bj2 
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bi2=1,.n_bf
                 do bq2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bq2,bk1,bj1)*temp_bra_i(:,bi2))     &
                      + sum(temp_qa_h2(:,bi2,bj1,bk1)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,bi2,bq2) * fac ! 
                     end 
                 end 
                 end
               end !do ii , case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do col_ind=1,.n_bas
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bi2=1,.n_bf
                 do bq2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bq2,bk1,bj1)*temp_bra_i(:,bi2))     &
                      + sum(temp_qa_h2(:,bi2,bj1,bk1)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                   res(row_ind,col_ind) = res(row_ind,col_ind) &
                   + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! 
                     end 
                 end 
                 end
               end
               end
               reorder_bra.destroy
               .special_ket(k)[1] = bk1 
!debug               write(*,*) 'case 2.3.3',dim,res
!case 2.2
               if(bj2/=bk2 OR bj1/=bk1) then
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 temp_q_h2_ja_kb => temp_qa_h2(:,:,bj1,bk2)
                 fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
               !  .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                 .special_ket(k)[2] = bk2
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 temp_q_h2_jb_ka => temp_qb_h2(:,:,bk1,bj2)
                 fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
              !   .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
                 .special_ket(k)[1] = bk1 
               else !bj2==bk2 AND bj1==bk1
                 temp_q_h2_jb_ka => temp_qb_h2(:,:,bk1,bj2)
                 temp_q_h2_ja_kb => temp_qa_h2(:,:,bj1,bk2)
                 fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
           !     .special_ket(k)[1] = bk1 
           !     .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket) * fac ! 
                     end 
               end !bj2==bk2 AND bj1==bk1
!debug               write(*,*) 'case 2.2',dim,res
!case 2.1
               if(bj2/=bk2 OR bj1/=bk1) then
                 fac= temp_bra_q(bj1,bk2)
                 if( NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                   .special_ket(k)[2] = bk2 
                 end 
                 fac= temp_bra_q(bk1,bj2)
                 if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                 ! .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                   .special_ket(k)[1] = bk1 
                 end 
               else !bj2==bk2 AND bj1==bk1
                 fac= temp_bra_q(bk1,bj2) + temp_bra_q(bj1,bk2)
                 if( NOT fac.is_zero(.tol)) then
               !   .special_ket(k)[1] = bk1 
               !   .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket) * fac ! 
                 end
               end !bj2==bk2 AND bj1==bk1
!debug               write(*,*) 'case 2.1',dim,res
             end !do kk
             !nullify(temp_q_h2_ja_kb)
             !nullify(temp_q_h2_jb_ka)
             !temp_qb_h2_jb_ka.destroy
             !nullify(temp_qb_h2_jb_kb)
             !nullify(temp_qb_h2_jb_ex_kb)
             !temp_qa_h2_ja_kb.destroy
             !nullify(temp_qa_h2_ja_ka)
             !nullify(temp_qa_h2_ja_ex_ka)
             !temp_qa_h2_jb_ka.destroy
             !temp_qb_h2_ja_kb.destroy
!case 1.3
             temp_qa_h2_j=temp_qa_h2(:,:,bj1,bj2)
             temp_qb_h2_j=temp_qb_h2(:,:,bj1,bj2)
             !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
             !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
             ! reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
             reorder_bra.create(dim-2)
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
                 res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,bq1,bi2) * fac ! 
                     end 
               end
               end
             end !ii case ii=1 remains 
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do col_ind=1,.n_bas
             do row_ind=1,col_ind
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
                 res(row_ind,col_ind) = res(row_ind,col_ind) &
                 - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
               end
               end
             end
             end
             reorder_bra.destroy
!debug               write(*,*) 'case 1.3',dim,res
!case 1.2
             fac=temp_qb_h2_j.trace
                     if( NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket) * fac ! 
                     end 
!debug               write(*,*) 'case 1.2',dim,res
!case 1.1
             fac=temp_bra_q(bj1,bj2)
                     if( NOT fac.is_zero(.tol)) then
             res = res + .hamiltonian_for(v,reorder_ket) * fac ! 
                     end 
!debug               write(*,*) 'case 1.1',dim,res
           end !j special ket
         end !if j=1
       end !do jj
       if(temp_qa_h2_ja.associated) then
         temp_qa_h2_ja.destroy
         temp_qb_h2_jb.destroy
         temp_qa_h2_jb.destroy
         temp_qb_h2_ja.destroy
         temp_qa_h2_ja_ex.destroy
         temp_qb_h2_jb_ex.destroy
         temp_qa_ja.destroy
         temp_qb_jb.destroy
       end
       temp_qa_h2_j.destroy
       temp_qb_h2_j.destroy
       temp_qa_h2.destroy
       temp_qb_h2.destroy
       reorder_ket.destroy
     end !if dim=1
   end

   hamiltonian_for(v,order_ket,col_ind) result (res) ::: recursive
   ! Standard recursive function which evaluates the hamiltonian integrals matrix
   ! column vector between mean field (Sz=0)-geminals 
   ! v is the array containing the hf integrals of the 2-electron Hamiltonian.
!comments:
!special_ket are always created at the end so that if ii is a special ket,
!than jj>ii is also a special ket. This allows some simplifications but may be a
!bit limitative in the future.
     order_ket :: VEC{INT}, IN
     v :: MAT4{REAL}, IN
     col_ind :: INT, IN
     res :: VEC{REAL}(.n_bas)
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     row_ind :: INT
     ii,jj,kk,j,k,l,dim,bi1,bi2,bj1,bj2,bk1,bk2,bq1,bq2 :: INT
     fac :: REAL
     reorder_ket,reorder_bra :: VEC{INT}*
     temp_bra_q :: MAT{REAL}*
     temp_bra_i :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_h2_q ::  MAT{REAL}*
     temp_qa_h2 :: MAT4{REAL}*
     temp_qb_h2 :: MAT4{REAL}*
     temp_qa_h2_ja :: MAT4{REAL}*
     temp_qa_h2_ja_ex :: MAT4{REAL}*
     temp_qb_h2_jb :: MAT4{REAL}*
     temp_qb_h2_jb_ex :: MAT4{REAL}*
     temp_qa_h2_jb :: MAT4{REAL}*
     temp_qb_h2_ja :: MAT4{REAL}*
     temp_qa_h2_ja_kb :: MAT4{REAL}*
     temp_qa_h2_jb_ka :: MAT4{REAL}*
     temp_qb_h2_jb_ka :: MAT4{REAL}*
     temp_qb_h2_ja_kb :: MAT4{REAL}*
     temp_qa_h2_ja_ka :: MAT4{REAL}*
     temp_qb_h2_jb_kb :: MAT4{REAL}*
     temp_qa_h2_ja_ex_ka :: MAT4{REAL}*
     temp_qb_h2_jb_ex_kb :: MAT4{REAL}*
     temp_qb_jb :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_q_h2_ja_kb :: MAT{REAL}*
     temp_q_h2_jb_ka :: MAT{REAL}*
     temp_qa_h2_j :: MAT{REAL}*
     temp_qb_h2_j :: MAT{REAL}*

     nullify(temp_qa_ja)
     nullify(temp_qb_jb)
     nullify(temp_qa_h2_ja_ex)
     nullify(temp_qb_h2_jb_ex)
     nullify(temp_qa_h2_ja)
     nullify(temp_qb_h2_jb)
     nullify(temp_qa_h2_jb)
     nullify(temp_qb_h2_ja)
     nullify(temp_q_h2_ja_kb)
     nullify(temp_q_h2_jb_ka)
     nullify(temp_qb_h2_jb_kb)
     nullify(temp_qb_h2_jb_ex_kb)
     nullify(temp_qa_h2_ja_ka)
     nullify(temp_qa_h2_ja_ex_ka)
     nullify(temp_qa_h2_ja_kb)
     nullify(temp_qb_h2_jb_ka)
     nullify(temp_qa_h2_jb_ka)
     nullify(temp_qb_h2_ja_kb)
     dim = order_ket.dim
     res = ZERO
      
     if (dim==1) then ! case 1.2 only
       j = order_ket(1)
       DIE_IF(j==1,"j is 1")
       if (.special_ket(j)[1]>0) then             
         bj1 = .special_ket(j)[1]                 
         bj2 = .special_ket(j)[2]                
         do row_ind=1,col_ind
           res(row_ind) = sum(.contraction_wfs(row_ind)[:,:]*v(:,:,bj1,bj2))
         end
       else
         temp_h2_q.create(.n_bf,.n_bf)
         do bj2=1,.n_bf
         do bj1=1,.n_bf
           temp_h2_q(bj1,bj2) = sum(v(bj1,bj2,:,:)*.ket(j)[:,:])
         end
         end
         do row_ind=1,col_ind
           res(row_ind) = sum(.contraction_wfs(row_ind)[:,:]*temp_h2_q)
         end
         temp_h2_q.destroy
       end
    !debug           write(*,*) 'case 1.2',dim,res
       return
     else ! dim > 1
       temp_bra_q => .bra(dim)[:,:]
       reorder_ket.create(dim-1)
!the next two arrays are created here because they are small and used in all
!cases
       temp_qa_h2_j.create(.n_bf,.n_bf)
       temp_qb_h2_j.create(.n_bf,.n_bf)
       temp_qa_h2.create(.n_bf,.n_bf,.n_bf,.n_bf)
       temp_qb_h2.create(.n_bf,.n_bf,.n_bf,.n_bf)
       do bj2=1,.n_bf
       do bj1=1,.n_bf
       do bq2=1,.n_bf
       do bq1=1,.n_bf
! respect the bra/ket nature of the indices
         temp_qa_h2(bq1,bq2,bj1,bj2)=sum(temp_bra_q(:,bq2)*v(:,bq1,bj1,bj2))
         temp_qb_h2(bq1,bq2,bj1,bj2)=sum(temp_bra_q(bq1,:)*v(bq2,:,bj1,bj2))
       end
       end
       end
       end
       do jj = dim,1,-1
         j = order_ket(jj)
!debug    write(*,*) "jj,j",jj,j
         DIE_IF(j==1,"j is 1 ")
         if (.special_ket(j)[1]==0) then !j not special
           temp_ket_j => .ket(j)[:,:]
           if(temp_qa_h2_ja.disassociated) then
             temp_qa_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qb_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qa_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qb_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
             temp_qa_h2_ja_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qb_h2_jb_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qa_ja.create(.n_bf,.n_bf)
             temp_qb_jb.create(.n_bf,.n_bf)
           end
           do bj2=1,.n_bf
           do bq2=1,.n_bf
             temp_qa_ja(bq2,bj2)=sum(temp_bra_q(:,bq2)*temp_ket_j(:,bj2))
             temp_qb_jb(bq2,bj2)=sum(temp_bra_q(bq2,:)*temp_ket_j(bj2,:))
           end
           end
           do bj2=1,.n_bf
           do bj1=1,.n_bf
           do bq2=1,.n_bf
           do bq1=1,.n_bf
! respect the bra/ket nature of the indices
             temp_qa_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
             temp_qa_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
             temp_qb_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
             temp_qb_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
             temp_qa_h2_ja_ex(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj1,:)*temp_ket_j(:,bj2))
             temp_qb_h2_jb_ex(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj2)*temp_ket_j(bj1,:))
           end
           end
           end
           end
!case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk) !cannot be 1
!debug               write(*,*) 'kk,k',kk,k
             DIE_IF(k<2,"k cannot be 1")  !debug
             reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) =  k
             if (.special_ket(k)[1]==0) then !k not special
               temp_ket_k => .ket(k)[:,:]
!case 2.3
               if(temp_qa_h2_ja_kb.disassociated) then
                 temp_qa_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction
                 temp_qb_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction 
                 temp_qa_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf)
                 temp_qb_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               end
!case 2.3.1 call special overlap ab
               do bj1=1,.n_bf
               do bj2=1,.n_bf
               do bq2=1,.n_bf
               do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                 temp_qa_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                 temp_qa_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                 temp_qb_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                 temp_qb_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
               end
               end
               end
               end
               reorder_bra.create(dim-2)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     .special_ket(k)[1] = bk1 
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                          + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end
                   end
                 end
               end !do ii, the case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     .special_ket(k)[1] = bk1 
                     do bi2=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                          + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind) = res(row_ind) &
                       + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <
                     end 
                     end 
                     end
                   end
                 end
               end
!debug               write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
               temp_qb_h2_jb_kb => temp_qb_h2_ja_kb
               temp_qb_h2_jb_ex_kb => temp_qa_h2_jb_ka
               do bj1=1,.n_bf
               do bj2=1,.n_bf
               do bq2=1,.n_bf
               do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                 temp_qb_h2_jb_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                 temp_qb_h2_jb_ex_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb_ex(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
               end
               end
               end
               end
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bk1=1,.n_bf
                   .special_ket(k)[2] = bk1
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,col_ind,bi1,bq1) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end
               end !do ii , case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bk1=1,.n_bf
                   .special_ket(k)[2] = bk1
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind) = res(row_ind) &
                       + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                     end 
                     end
                   end
                 end
               end
!debug              write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
               temp_qa_h2_ja_ka => temp_qb_h2_ja_kb
               temp_qa_h2_ja_ex_ka => temp_qa_h2_jb_ka
               do bj1=1,.n_bf
               do bj2=1,.n_bf
               do bq2=1,.n_bf
               do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                 temp_qa_h2_ja_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                 temp_qa_h2_ja_ex_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja_ex(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
               end
               end
               end
               end
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bk2=1,.n_bf
                   .special_ket(k)[2] = bk2
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,col_ind,bi2,bq2) * fac ! <
                     end 
                     end 
                     end
                   end
                 end
               end !do ii , case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bk2=1,.n_bf
                   .special_ket(k)[2] = bk2
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                       res(row_ind) = res(row_ind) &
                       + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end
               end
               reorder_bra.destroy
!debug               write(*,*) 'case 2.3.3',dim,res
!case 2.2
              ! if(temp_q_h2_ja_kb.disassociated) then
              !   temp_q_h2_ja_kb.create(.n_bf,.n_bf)
              !   temp_q_h2_jb_ka.create(.n_bf,.n_bf)
              ! end
              ! temp_qa_h2_ja_kb.partial_trace(1,2,temp_q_h2_ja_kb) !no gain by storing that
              ! temp_qb_h2_jb_ka.partial_trace(1,2,temp_q_h2_jb_ka) !but convenient
               do bj2=1,.n_bf
                 .special_ket(k)[2] = bj2
                 do bk1=1,.n_bf
                   temp_q_h2_ja_kb => temp_qa_h2_ja_kb(:,:,bk1,bj2)
                   temp_q_h2_jb_ka => temp_qb_h2_jb_ka(:,:,bk1,bj2)
                   fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bk1 
                   res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
                 end 
               end
!debug               write(*,*) 'case 2.2',dim,res
!case 2.1
               do bj2=1,.n_bf
                 .special_ket(k)[2] = bj2
                 do bk1=1,.n_bf
                   fac= sum(temp_qa_ja(:,bj2)*temp_ket_k(bk1,:))+sum(temp_qb_jb(:,bk1)*temp_ket_k(:,bj2))
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bk1 
                     res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                   end 
                 end 
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
!debug               write(*,*) 'case 2.1',dim,res
             else !k special
               bk1=.special_ket(k)[1]
               bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
               !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               reorder_bra.create(dim-2)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj2=1,bk2-1
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                     end 
                   end
                   end
                 end
                 do bj2=bk2+1,.n_bf
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   .special_ket(k)[1] = bj1 
              !    .special_ket(k)[2] = bk2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end
                 end
                 do bj1=bk1+1,.n_bf
                   .special_ket(k)[1] = bj1 
               !   .special_ket(k)[2] = bk2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end
                 end
                 .special_ket(k)[1] = bk1 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                !   .special_ket(k)[2] = bk2
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end 
                 end 
               end !do ii, the case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bj2=1,bk2-1
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind) = res(row_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                   end
                   end
                 end
                 do bj2=bk2+1,.n_bf
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind) = res(row_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   .special_ket(k)[1] = bj1 
              !    .special_ket(k)[2] = bk2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind) = res(row_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end
                 end
                 do bj1=bk1+1,.n_bf
                   .special_ket(k)[1] = bj1 
               !   .special_ket(k)[2] = bk2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind) = res(row_ind) &
                     + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                   end 
                   end
                 end
                 .special_ket(k)[1] = bk1 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                !   .special_ket(k)[2] = bk2
                   res(row_ind) = res(row_ind) &
                   + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                 end 
                 end 
               end 
               .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
              !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
              !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj1=1,.n_bf
                   .special_ket(k)[1] = bj1 
             !     .special_ket(k)[2] = bk1
                   do bi1=1,.n_bf
                   do bq1=1,.n_bf
                     fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                        + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,col_ind,bi1,bq1) * fac ! 
                     end 
                   end 
                   end
                 end
               end !do ii , case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bj1=1,.n_bf
                   .special_ket(k)[1] = bj1 
               !   .special_ket(k)[2] = bk1
                   do bi1=1,.n_bf
                   do bq1=1,.n_bf
                     fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                        + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind) = res(row_ind) &
                     + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                   end 
                   end
                 end
               end
               .special_ket(k)[2] = bk2 
!debug               write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
             !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
             !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj2=1,.n_bf
                   .special_ket(k)[1] = bj2 
               !   .special_ket(k)[2] = bk2
                   do bi2=1,.n_bf
                   do bq2=1,.n_bf
                     fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                        + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,col_ind,bi2,bq2) * fac ! <<
                     end 
                   end 
                   end
                 end
               end !do ii , case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bj2=1,.n_bf
                   .special_ket(k)[1] = bj2 
                !  .special_ket(k)[2] = bk2
                   do bi2=1,.n_bf
                   do bq2=1,.n_bf
                     fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                        + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                     res(row_ind) = res(row_ind) &
                     + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                   end 
                   end
                 end
               end
               .special_ket(k)[1] = bk1 
               reorder_bra.destroy
!debug               write(*,*) 'case 2.3.3',dim,res
!case 2.2
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               do bj2=1,bk2-1
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                 fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
               ! .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
               end
               do bj2=bk2+1,.n_bf
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                 fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
               ! .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
               end
               .special_ket(k)[2] = bk2
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               do bj1=1,bk1-1
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                 fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
              !  .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
               end
               do bj1=bk1+1,.n_bf
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                 fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
              !  .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
               end
               .special_ket(k)[1] = bk1 
               temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bk1,bk1)
               temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bk2)
               fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
           !    .special_ket(k)[1] = bk1 
           !    .special_ket(k)[2] = bk2
               res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
!debug               write(*,*) 'case 2.2',dim,res
!case 2.1
               do bj2=1,bk2-1
                 fac= temp_qa_ja(bk2,bj2)
                 if( NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 end 
               end
               do bj2=bk2+1,.n_bf
                 fac= temp_qa_ja(bk2,bj2)
                 if( NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 end 
               end
               .special_ket(k)[2] = bk2 
               do bj1=1,bk1-1
                 fac= temp_qb_jb(bk1,bj1)
                 if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                 ! .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 end 
               end
               do bj1=bk1+1,.n_bf
                 fac= temp_qb_jb(bk1,bj1)
                 if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                 ! .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 end 
               end
               .special_ket(k)[1] = bk1 
               fac= temp_qb_jb(bk1,bk1) + temp_qa_ja(bk2,bk2)
               if( NOT fac.is_zero(.tol)) then
               !  .special_ket(k)[1] = bk1 
               !  .special_ket(k)[2] = bk2
                 res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
               end
!debug               write(*,*) 'case 2.1',dim,res
             end !k special
           end !do kk
           nullify(temp_q_h2_ja_kb)
           nullify(temp_q_h2_jb_ka)
           temp_qb_h2_jb_ka.destroy
           nullify(temp_qb_h2_jb_kb)
           nullify(temp_qb_h2_jb_ex_kb)
           temp_qa_h2_ja_kb.destroy
           nullify(temp_qa_h2_ja_ka)
           nullify(temp_qa_h2_ja_ex_ka)
           temp_qa_h2_jb_ka.destroy
           temp_qb_h2_ja_kb.destroy
!case 1.3
           temp_qb_h2_jb.partial_trace(3,4,temp_qb_h2_j)
           temp_qa_h2_ja.partial_trace(3,4,temp_qa_h2_j)
           !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
           !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
           !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
           reorder_bra.create(dim-2)
           do ii=dim-1,2,-1
             temp_bra_i => .bra(ii)[:,:]
             reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
             reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
               res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
                     end 
             end
             end
           end !ii case ii=1 remains 
           reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
           do row_ind=1,col_ind
             temp_bra_i => .contraction_wfs(row_ind)[:,:]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
               res(row_ind) = res(row_ind) &
               - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
             end
             end
           end
           reorder_bra.destroy
!debug               write(*,*) 'case 1.3',dim,res
!case 1.2
           fac=temp_qb_h2_j.trace
                     if( NOT fac.is_zero(.tol)) then
           res = res + .overlap_for(reorder_ket,col_ind) * fac ! 
                     end 
!debug               write(*,*) 'case 1.2',dim,res
!case 1.1
           fac=temp_qb_jb.trace
                     if( NOT fac.is_zero(.tol)) then
           res = res + .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                     end 
!debug               write(*,*) 'case 1.1',dim,res
         else ! j is a special ket
! warning: we have not changed the structure with respect to the case "not a
! special ket", therefore more space than needed is used and large parts of the
! arrays are dangerously not initialized.
           bj1=.special_ket(j)[1]
           bj2=.special_ket(j)[2]
!case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk) !cannot be 1
!debug               write(*,*) 'kk,k',kk,k
             DIE_IF(k<2,"k cannot be 1")  !debug
             reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) =  k
             DIE_IF(.special_ket(k)[1]==0,"j special ket but not k") 
             bk1=.special_ket(k)[1]
             bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
             !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
             !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
             !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
             !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
             reorder_bra.create(dim-2)
             if(bj2/=bk2 OR bj1/=bk1) then
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
            !    .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end
                 end
                 .special_ket(k)[1] = bj1 
                 .special_ket(k)[2] = bk2 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end
                 end
                 .special_ket(k)[1] = bk1 
               end !do ii, the case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
            !    .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res(row_ind) = res(row_ind) &
                   + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end
                 end
                 .special_ket(k)[1] = bj1 
                 .special_ket(k)[2] = bk2 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res(row_ind) = res(row_ind) &
                   + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end
                 end
                 .special_ket(k)[1] = bk1 
               end
             else !bj1==bk1 AND bj2==bk2
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
              !     .special_ket(k)[1] = bk1 
              !     .special_ket(k)[2] = bk2
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end 
                 end 
               end !do ii, the case ii=1 is left
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do row_ind=1,col_ind
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
              !     .special_ket(k)[1] = bk1 
              !     .special_ket(k)[2] = bk2
                   res(row_ind) = res(row_ind) &
                   + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end 
                 end 
               end 
             end !bj1==bk1 AND bj2==bk2
             .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               write(*,*) 'case 2.3.1',dim,res
!case 2.3.2 call special overlap aa
            !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
            !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
             .special_ket(k)[1] = bj1 
           ! .special_ket(k)[2] = bk1
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi1=1,.n_bf
               do bq1=1,.n_bf
                 fac= sum(temp_qb_h2(bq1,:,bj2,bk2)*temp_bra_i(bi1,:))     &
                    + sum(temp_qb_h2(bi1,:,bk2,bj2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                 res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,col_ind,bi1,bq1) * fac ! 
                     end 
               end
               end
             end !do ii , case ii=1 is left
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do row_ind=1,col_ind
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               do bi1=1,.n_bf
               do bq1=1,.n_bf
                 fac= sum(temp_qb_h2(bq1,:,bj2,bk2)*temp_bra_i(bi1,:))     &
                    + sum(temp_qb_h2(bi1,:,bk2,bj2)*temp_bra_i(bq1,:))       
                 if( NOT fac.is_zero(.tol)) then
                   res(row_ind) = res(row_ind) &
                   + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                 end 
               end
               end
             end
!debug               write(*,*) 'case 2.3.2',dim,res
!case 2.3.3 call special overlap bb
           !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
           !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
             .special_ket(k)[2] = bk2 
             .special_ket(k)[1] = bj2 
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi2=1,.n_bf
               do bq2=1,.n_bf
                 fac= sum(temp_qa_h2(:,bq2,bk1,bj1)*temp_bra_i(:,bi2))     &
                    + sum(temp_qa_h2(:,bi2,bj1,bk1)*temp_bra_i(:,bq2))       
                 if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,col_ind,bi2,bq2) * fac ! 
                 end 
               end 
               end
             end !do ii , case ii=1 is left
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do row_ind=1,col_ind
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               do bi2=1,.n_bf
               do bq2=1,.n_bf
                 fac= sum(temp_qa_h2(:,bq2,bk1,bj1)*temp_bra_i(:,bi2))     &
                    + sum(temp_qa_h2(:,bi2,bj1,bk1)*temp_bra_i(:,bq2))       
                 if( NOT fac.is_zero(.tol)) then
                   res(row_ind) = res(row_ind) &
                   + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! 
                 end 
               end 
               end
             end
             reorder_bra.destroy
             .special_ket(k)[1] = bk1 
!debug               write(*,*) 'case 2.3.3',dim,res
!case 2.2
             if(bj2/=bk2 OR bj1/=bk1) then
             !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               temp_q_h2_ja_kb => temp_qa_h2(:,:,bj1,bk2)
               fac= temp_q_h2_ja_kb.trace
               if( NOT fac.is_zero(.tol)) then
             !   .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
               end 
               .special_ket(k)[2] = bk2
             !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               temp_q_h2_jb_ka => temp_qb_h2(:,:,bk1,bj2)
               fac= temp_q_h2_jb_ka.trace
               if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
            !    .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
               end 
               .special_ket(k)[1] = bk1 
             else !bj2==bk2 AND bj1==bk1
               temp_q_h2_jb_ka => temp_qb_h2(:,:,bk1,bj2)
               temp_q_h2_ja_kb => temp_qa_h2(:,:,bj1,bk2)
               fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
               if( NOT fac.is_zero(.tol)) then
         !       .special_ket(k)[1] = bk1 
         !       .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! 
               end 
             end !bj2==bk2 AND bj1==bk1
!debug               write(*,*) 'case 2.2',dim,res
!case 2.1
             if(bj2/=bk2 OR bj1/=bk1) then
               fac= temp_bra_q(bj1,bk2)
               if( NOT fac.is_zero(.tol)) then
              !  .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 .special_ket(k)[2] = bk2 
               end 
               fac= temp_bra_q(bk1,bj2)
               if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
               ! .special_ket(k)[2] = bk2
                 res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
                 .special_ket(k)[1] = bk1 
               end 
             else !bj2==bk2 AND bj1==bk1
               fac= temp_bra_q(bk1,bj2) + temp_bra_q(bj1,bk2)
               if( NOT fac.is_zero(.tol)) then
             !   .special_ket(k)[1] = bk1 
             !   .special_ket(k)[2] = bk2
                 res = res - .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
               end
             end !bj2==bk2 AND bj1==bk1
!debug               write(*,*) 'case 2.1',dim,res
           end !do kk
         !  nullify(temp_q_h2_ja_kb)
         !  nullify(temp_q_h2_jb_ka)
         !  temp_qb_h2_jb_ka.destroy
         !  nullify(temp_qb_h2_jb_kb)
         !  nullify(temp_qb_h2_jb_ex_kb)
         !  temp_qa_h2_ja_kb.destroy
         !  nullify(temp_qa_h2_ja_ka)
         !  nullify(temp_qa_h2_ja_ex_ka)
         !  temp_qa_h2_jb_ka.destroy
         !  temp_qb_h2_ja_kb.destroy
!case 1.3
           temp_qa_h2_j=temp_qa_h2(:,:,bj1,bj2)
           temp_qb_h2_j=temp_qb_h2(:,:,bj1,bj2)
           !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
           !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
           !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
           reorder_bra.create(dim-2)
           do ii=dim-1,2,-1
             temp_bra_i => .bra(ii)[:,:]
             reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
             reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
               if( NOT fac.is_zero(.tol)) then
                 res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,col_ind,bq1,bi2) * fac ! 
               end 
             end
             end
           end !ii case ii=1 remains 
           reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
           do row_ind=1,col_ind
             temp_bra_i => .contraction_wfs(row_ind)[:,:]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
               if( NOT fac.is_zero(.tol)) then
                 res(row_ind) = res(row_ind) &
                 - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
               end 
             end
             end
           end
           reorder_bra.destroy
!debug               write(*,*) 'case 1.3',dim,res
!case 1.2
           fac=temp_qb_h2_j.trace
           if( NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket,col_ind) * fac ! 
           end 
!debug               write(*,*) 'case 1.2',dim,res
!case 1.1
           fac=temp_bra_q(bj1,bj2)
           if( NOT fac.is_zero(.tol)) then
             res = res + .hamiltonian_for(v,reorder_ket,col_ind) * fac ! 
           end 
!debug               write(*,*) 'case 1.1',dim,res
         end !j special ket
       end !do jj
       temp_qa_ja.destroy
       temp_qb_jb.destroy
       temp_qa_h2_ja_ex.destroy
       temp_qb_h2_jb_ex.destroy
       temp_qa_h2_ja.destroy
       temp_qb_h2_jb.destroy
       temp_qa_h2_jb.destroy
       temp_qb_h2_ja.destroy
       temp_qa_h2_j.destroy
       temp_qb_h2_j.destroy
       temp_qa_h2.destroy
       temp_qb_h2.destroy
       reorder_ket.destroy
     end !if dim=1
   end

   hamiltonian_for(v,order_ket,row_ind,col_ind) result (res) ::: recursive
   ! Standard recursive function which evaluates the hamiltonian integrals matrix
   ! element specified by col_ind and row_ind between mean field (Sz=0)-geminals 
   ! v is the array containing the hf integrals of the 2-electron Hamiltonian.
!comments:
!special_ket are always created at the end so that if ii is a special ket,
!than jj>ii is also a special ket. This allows some simplifications but may be a
!bit limitative in the future.
     row_ind, col_ind :: INT, IN
     order_ket :: VEC{INT}, IN
     v :: MAT4{REAL}, IN
     res :: REAL
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     ENSURE(row_ind>0 AND row_ind<=.n_bas,"row_ind out of range")
     ii,jj,kk,j,k,l,dim,bi1,bi2,bj1,bj2,bk1,bk2,bq1,bq2 :: INT
     fac :: REAL
     reorder_ket,reorder_bra :: VEC{INT}*
     temp_bra_q :: MAT{REAL}*
     temp_bra_i :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_q_h2 ::  MAT{REAL}*
     temp_qa_h2 :: MAT4{REAL}*
     temp_qb_h2 :: MAT4{REAL}*
     temp_qa_h2_ja :: MAT4{REAL}*
     temp_qa_h2_ja_ex :: MAT4{REAL}*
     temp_qb_h2_jb :: MAT4{REAL}*
     temp_qb_h2_jb_ex :: MAT4{REAL}*
     temp_qa_h2_jb :: MAT4{REAL}*
     temp_qb_h2_ja :: MAT4{REAL}*
     temp_qa_h2_ja_kb :: MAT4{REAL}*
     temp_qa_h2_jb_ka :: MAT4{REAL}*
     temp_qb_h2_jb_ka :: MAT4{REAL}*
     temp_qb_h2_ja_kb :: MAT4{REAL}*
     temp_qa_h2_ja_ka :: MAT4{REAL}*
     temp_qb_h2_jb_kb :: MAT4{REAL}*
     temp_qa_h2_ja_ex_ka :: MAT4{REAL}*
     temp_qb_h2_jb_ex_kb :: MAT4{REAL}*
     temp_qb_jb :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_q_h2_ja_kb :: MAT{REAL}*
     temp_q_h2_jb_ka :: MAT{REAL}*
     temp_qa_h2_j :: MAT{REAL}*
     temp_qb_h2_j :: MAT{REAL}*

     nullify(temp_qa_ja)
     nullify(temp_qb_jb)
     nullify(temp_qa_h2_ja_ex)
     nullify(temp_qb_h2_jb_ex)
     nullify(temp_qa_h2_ja)
     nullify(temp_qb_h2_jb)
     nullify(temp_qa_h2_jb)
     nullify(temp_qb_h2_ja)
     nullify(temp_q_h2_ja_kb)
     nullify(temp_q_h2_jb_ka)
     nullify(temp_qb_h2_jb_kb)
     nullify(temp_qb_h2_jb_ex_kb)
     nullify(temp_qa_h2_ja_ka)
     nullify(temp_qa_h2_ja_ex_ka)
     nullify(temp_qa_h2_ja_kb)
     nullify(temp_qb_h2_jb_ka)
     nullify(temp_qa_h2_jb_ka)
     nullify(temp_qb_h2_ja_kb)
     dim = order_ket.dim
     res = ZERO
      
     if (dim==1) then ! case 1.2 only
       j = order_ket(1)
       if (.special_ket(j)[1]>0) then             
         bj1 = .special_ket(j)[1]                 
         bj2 = .special_ket(j)[2]                
         fac = sum(.contraction_wfs(row_ind)[:,:]*v(:,:,bj1,bj2))
       else
         temp_q_h2.create(.n_bf,.n_bf)
         do bj2=1,.n_bf
         do bj1=1,.n_bf
           temp_q_h2(bj1,bj2) = sum(.contraction_wfs(row_ind)[:,:]*v(:,:,bj1,bj2))
         end
         end
         if(j==1) then
           fac = sum(temp_q_h2*.contraction_wfs(col_ind)[:,:])
         else 
           fac = sum(temp_q_h2*.ket(j)[:,:])
         end
         temp_q_h2.destroy
       end
       res = fac
!debug
!debug write(*,*)"jj,j",1,j
!debug write(*,*)"case 1.2, dim", dim
!debug write(*,*)res
!debug
       return
     else ! dim > 1
       temp_bra_q => .bra(dim)[:,:]
       reorder_ket.create(dim-1)
!the next two arrays are created here because they are small and used in all
!cases
       temp_qa_h2_j.create(.n_bf,.n_bf)
       temp_qb_h2_j.create(.n_bf,.n_bf)
       temp_qa_h2.create(.n_bf,.n_bf,.n_bf,.n_bf)
       temp_qb_h2.create(.n_bf,.n_bf,.n_bf,.n_bf)
       do bj2=1,.n_bf
       do bj1=1,.n_bf
       do bq2=1,.n_bf
       do bq1=1,.n_bf
! respect the bra/ket nature of the indices
         temp_qa_h2(bq1,bq2,bj1,bj2)=sum(temp_bra_q(:,bq2)*v(:,bq1,bj1,bj2))
         temp_qb_h2(bq1,bq2,bj1,bj2)=sum(temp_bra_q(bq1,:)*v(bq2,:,bj1,bj2))
       end
       end
       end
       end
       do jj = dim,1,-1
         j = order_ket(jj)
!debug    
!debug write(*,*) "jj,j",jj,j
!debug    
         if (j==1) then !ket from contraction 1
           temp_ket_j => .contraction_wfs(col_ind)[:,:]
           if(temp_qa_h2_ja.disassociated) then
             temp_qa_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qb_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qa_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qb_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
             temp_qa_h2_ja_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qb_h2_jb_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
             temp_qa_ja.create(.n_bf,.n_bf)
             temp_qb_jb.create(.n_bf,.n_bf)
           end
           do bj2=1,.n_bf
           do bq2=1,.n_bf
             temp_qa_ja(bq2,bj2)=sum(temp_bra_q(:,bq2)*temp_ket_j(:,bj2))
             temp_qb_jb(bq2,bj2)=sum(temp_bra_q(bq2,:)*temp_ket_j(bj2,:))
           end
           end
           do bj2=1,.n_bf
           do bj1=1,.n_bf
           do bq2=1,.n_bf
           do bq1=1,.n_bf
! respect the bra/ket nature of the indices
             temp_qa_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
             temp_qa_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
             temp_qb_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
             temp_qb_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
             temp_qa_h2_ja_ex(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj1,:)*temp_ket_j(:,bj2))
             temp_qb_h2_jb_ex(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj2)*temp_ket_j(bj1,:))
           end
           end
           end
           end
!case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk) !cannot be 1
!debug              
!debug write(*,*) "kk,k",kk,k
!debug              
             DIE_IF(k<2,"k cannot be 1")  !debug
             reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) =  k
!debug
!debug     do l=1,dim-1
!debug       stdout.show("l=",l)
!debug       stdout.show("reorder_ket(l)=",reorder_ket(l))
!debug       stdout.show("special_ket(reorder_ket(l))-in",.special_ket(reorder_ket(l)).element)
!debug     end
!debug
             if (.special_ket(k)[1]==0) then !k not special
               temp_ket_k => .ket(k)[:,:]
!case 2.3
               if(temp_qa_h2_ja_kb.disassociated) then
                 temp_qa_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction
                 temp_qb_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction 
                 temp_qa_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf)
                 temp_qb_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               end
!case 2.3.1 call special overlap ab
               do bj1=1,.n_bf
               do bj2=1,.n_bf
               do bq2=1,.n_bf
               do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                 temp_qa_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                 temp_qa_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                 temp_qb_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                 temp_qb_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
               end
               end
               end
               end
               reorder_bra.create(dim-2)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     .special_ket(k)[1] = bk1 
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                          + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug write(*,*)"case 2.3.1, dim, ii", dim, ii
!debug write(*,*)res
!debug
                     end 
                     end 
                     end
                   end
                 end
               end !do ii, the case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bj2=1,.n_bf
                 .special_ket(k)[2] = bj2
                 do bk1=1,.n_bf
                   .special_ket(k)[1] = bk1 
                   do bi2=1,.n_bf
                   do bq1=1,.n_bf
                     fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug write(*,*)"case 2.3.1 ii=1, dim", dim
!debug write(*,*)res
!debug
                     end 
                   end 
                   end
                 end
               end
!debug              
!debug write(*,*) 'case 2.3.1',dim,res
!debug              
!case 2.3.2 call special overlap aa
               temp_qb_h2_jb_kb => temp_qb_h2_ja_kb
               temp_qb_h2_jb_ex_kb => temp_qa_h2_jb_ka
               do bj1=1,.n_bf
               do bj2=1,.n_bf
               do bq2=1,.n_bf
               do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                 temp_qb_h2_jb_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                 temp_qb_h2_jb_ex_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb_ex(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
               end
               end
               end
               end
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bk1=1,.n_bf
                   .special_ket(k)[2] = bk1
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end
               end !do ii , case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bk1=1,.n_bf
                 .special_ket(k)[2] = bk1
                 do bj1=1,.n_bf
                   .special_ket(k)[1] = bj1 
                   do bi1=1,.n_bf
                   do bq1=1,.n_bf
                     fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                        + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! <
                     end 
                   end 
                   end
                 end
               end
!debug               
!debug write(*,*) 'case 2.3.2',dim,res
!debug              
!case 2.3.3 call special overlap bb
               temp_qa_h2_ja_ka => temp_qb_h2_ja_kb
               temp_qa_h2_ja_ex_ka => temp_qa_h2_jb_ka
               do bj1=1,.n_bf
               do bj2=1,.n_bf
               do bq2=1,.n_bf
               do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                 temp_qa_h2_ja_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                 temp_qa_h2_ja_ex_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja_ex(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
               end
               end
               end
               end
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bk2=1,.n_bf
                   .special_ket(k)[2] = bk2
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end
               end !do ii , case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bk2=1,.n_bf
                 .special_ket(k)[2] = bk2
                 do bj2=1,.n_bf
                   .special_ket(k)[1] = bj2 
                   do bi2=1,.n_bf
                   do bq2=1,.n_bf
                     fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                        + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <
                     end 
                   end 
                   end
                 end
               end
               reorder_bra.destroy
!debug               
!debug write(*,*) 'case 2.3.3',dim,res
!debug              
!case 2.2
              ! if(temp_q_h2_ja_kb.disassociated) then
              !   temp_q_h2_ja_kb.create(.n_bf,.n_bf)
              !   temp_q_h2_jb_ka.create(.n_bf,.n_bf)
              ! end
              ! temp_qa_h2_ja_kb.partial_trace(1,2,temp_q_h2_ja_kb) !no gain by storing that
              ! temp_qb_h2_jb_ka.partial_trace(1,2,temp_q_h2_jb_ka) !but convenient
               do bj2=1,.n_bf
                 .special_ket(k)[2] = bj2
                 do bk1=1,.n_bf
                   temp_q_h2_ja_kb => temp_qa_h2_ja_kb(:,:,bk1,bj2)
                   temp_q_h2_jb_ka => temp_qb_h2_jb_ka(:,:,bk1,bj2)
                   fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bk1 
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 end 
               end
!debug             
!debug write(*,*) 'case 2.2',dim,res
!debug              
!case 2.1
               do bj2=1,.n_bf
                 .special_ket(k)[2] = bj2
                 do bk1=1,.n_bf
                   fac= sum(temp_qa_ja(:,bj2)*temp_ket_k(bk1,:))+sum(temp_qb_jb(:,bk1)*temp_ket_k(:,bj2))
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bk1 
                     res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   end 
                 end 
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
!debug               
!debug write(*,*) 'case 2.1',dim,res
!debug              
             else !k special
               bk1=.special_ket(k)[1]
               bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
               !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               reorder_bra.create(dim-2)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj2=1,bk2-1
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"ii,bq1,bi2,fac,res",ii,bq1,bi2,fac,res
!debug
                     end 
                   end
                   end
                 end
                 do bj2=bk2+1,.n_bf
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"ii,bq1,bi2,fac,res",ii,bq1,bi2,fac,res
!debug
                     end 
                   end 
                   end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   .special_ket(k)[1] = bj1 
              !    .special_ket(k)[2] = bk2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"ii,bq1,bi2,fac,res",ii,bq1,bi2,fac,res
!debug
                     end 
                   end 
                   end
                 end
                 do bj1=bk1+1,.n_bf
                   .special_ket(k)[1] = bj1 
               !   .special_ket(k)[2] = bk2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"ii,bq1,bi2,fac,res",ii,bq1,bi2,fac,res
!debug
                     end 
                   end 
                   end
                 end
                 .special_ket(k)[1] = bk1 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                !   .special_ket(k)[2] = bk2
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"ii,bq1,bi2,fac,res",ii,bq1,bi2,fac,res
!debug
                     end 
                 end 
                 end 
               end !do ii, the case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bj2=1,bk2-1
            !    .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"bq1,bi2,fac,res",bq1,bi2,fac,res
!debug
                     end 
                 end
                 end
               end
               do bj2=bk2+1,.n_bf
               ! .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"bq1,bi2,fac,res",bq1,bi2,fac,res
!debug
                     end 
                 end 
                 end 
               end
               .special_ket(k)[2] = bk2 
               do bj1=1,bk1-1
                 .special_ket(k)[1] = bj1 
            !    .special_ket(k)[2] = bk2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug write(*,*)"bq1,bi2,fac,res",bq1,bi2,fac,res
!debug
                     end 
                 end 
                 end
               end
               do bj1=bk1+1,.n_bf
                 .special_ket(k)[1] = bj1 
             !   .special_ket(k)[2] = bk2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
!debug
!debug stdout.show("special_ket(k)-out",.special_ket(k).element)
!debug write(*,*)"bq1,bi2,fac,res",bq1,bi2,fac,res
!debug
                     end 
                 end 
                 end
               end
               .special_ket(k)[1] = bk1 
               do bq1=1,.n_bf
               do bi2=1,.n_bf
                 fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                    + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                    + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                    + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
              !   .special_ket(k)[1] = bk1 
              !   .special_ket(k)[2] = bk2
!debug
!debug stdout.show("special_ket(k)-in",.special_ket(k).element)
!debug
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
!debug
!debug stdout.show("special_ket(k)-out",.special_ket(k).element)
!debug write(*,*)"bq1,bi2,fac,res",bq1,bi2,fac,res
!debug
                     end 
               end 
               end 
               .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               
!debug write(*,*) 'case 2.3.1',dim,res
!debug              
!case 2.3.2 call special overlap aa
              !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
              !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj1=1,.n_bf
                   .special_ket(k)[1] = bj1 
             !     .special_ket(k)[2] = bk1
                   do bi1=1,.n_bf
                   do bq1=1,.n_bf
                     fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                        + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! <
                     end 
                   end 
                   end
                 end
               end !do ii , case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bj1=1,.n_bf
                 .special_ket(k)[1] = bj1 
             !   .special_ket(k)[2] = bk1
                 do bi1=1,.n_bf
                 do bq1=1,.n_bf
                   fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                      + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                 end 
                 end
               end
               .special_ket(k)[2] = bk2 
!debug               
!debug write(*,*) 'case 2.3.2',dim,res
!debug              
!case 2.3.3 call special overlap bb
             !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
             !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bj2=1,.n_bf
                   .special_ket(k)[1] = bj2 
               !   .special_ket(k)[2] = bk2
                   do bi2=1,.n_bf
                   do bq2=1,.n_bf
                     fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                        + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                   end 
                   end
                 end
               end !do ii , case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
           !debug    write(*,*) 'coucou1'
           !debug    stdout.put(temp_bra_i)
               do bj2=1,.n_bf
                 .special_ket(k)[1] = bj2 
              !  .special_ket(k)[2] = bk2
                 do bi2=1,.n_bf
                 do bq2=1,.n_bf
                   fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                      + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <
                     end 
           !debug    if(NOT fac.is_zero(.tol)) then
           !debug    write(*,*) 'bj2,bk2,bi2,bq2,fac',bj2,bk2,bi2,bq2,fac
           !debug    end
                 end 
                 end
               end
               .special_ket(k)[1] = bk1 
               reorder_bra.destroy
!debug               
!debug write(*,*) 'case 2.3.3',dim,res
!debug              
!case 2.2
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               do bj2=1,bk2-1
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                 fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
               !  .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
               end
               do bj2=bk2+1,.n_bf
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                 fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
               !  .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
               end
               .special_ket(k)[2] = bk2
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               do bj1=1,bk1-1
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                 fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
              !   .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
               end
               do bj1=bk1+1,.n_bf
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                 fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
              !   .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
               end
               .special_ket(k)[1] = bk1 
               temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bk1,bk1)
               temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bk2)
               fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
           !    .special_ket(k)[1] = bk1 
           !    .special_ket(k)[2] = bk2
               res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 2.2',dim,res
!debug              
!case 2.1
               do bj2=1,bk2-1
                 fac= temp_qa_ja(bk2,bj2)
                 if( NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                 end 
               end
               do bj2=bk2+1,.n_bf
                 fac= temp_qa_ja(bk2,bj2)
                 if( NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                 end 
               end
               .special_ket(k)[2] = bk2 
               do bj1=1,bk1-1
                 fac= temp_qb_jb(bk1,bj1)
                 if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                 ! .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                 end 
               end
               do bj1=bk1+1,.n_bf
                 fac= temp_qb_jb(bk1,bj1)
                 if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                 ! .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                 end 
               end
               .special_ket(k)[1] = bk1 
               fac= temp_qb_jb(bk1,bk1) + temp_qa_ja(bk2,bk2)
               if( NOT fac.is_zero(.tol)) then
               !  .special_ket(k)[1] = bk1 
               !  .special_ket(k)[2] = bk2
                 res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
               end
!debug               
!debug write(*,*) 'case 2.1',dim,res
!debug              
             end !k special
           end !do kk
           nullify(temp_q_h2_ja_kb)
           nullify(temp_q_h2_jb_ka)
           temp_qb_h2_jb_ka.destroy
           nullify(temp_qb_h2_jb_kb)
           nullify(temp_qb_h2_jb_ex_kb)
           temp_qa_h2_ja_kb.destroy
           nullify(temp_qa_h2_ja_ka)
           nullify(temp_qa_h2_ja_ex_ka)
           temp_qa_h2_jb_ka.destroy
           temp_qb_h2_ja_kb.destroy
!case 1.3
           temp_qb_h2_jb.partial_trace(3,4,temp_qb_h2_j)
           temp_qa_h2_ja.partial_trace(3,4,temp_qa_h2_j)
           !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
           !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
           !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
           reorder_bra.create(dim-2)
           do ii=dim-1,2,-1
             temp_bra_i => .bra(ii)[:,:]
             reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
             reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
               res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
             end
             end
           end !ii case ii=1 remains 
           temp_bra_i => .contraction_wfs(row_ind)[:,:]
           reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
           do bi2=1,.n_bf
           do bq1=1,.n_bf
             fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
             res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
           end
           end
           reorder_bra.destroy
!debug               
!debug write(*,*) 'case 1.3',dim,res
!debug              
!case 1.2
           fac=temp_qb_h2_j.trace
                     if( NOT fac.is_zero(.tol)) then
           res = res + .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 1.2',dim,res
!debug              
!case 1.1
           fac=temp_qb_jb.trace
                     if( NOT fac.is_zero(.tol)) then
           res = res + .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 1.1',dim,res
!debug              
         else !j>1
           if (.special_ket(j)[1]==0) then !j not special
             temp_ket_j => .ket(j)[:,:]
             if(temp_qa_h2_ja.disassociated) then
               temp_qa_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qa_h2_jb.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_ja.create(.n_bf,.n_bf,.n_bf,.n_bf)
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
               temp_qa_h2_ja_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qb_h2_jb_ex.create(.n_bf,.n_bf,.n_bf,.n_bf)
               temp_qa_ja.create(.n_bf,.n_bf)
               temp_qb_jb.create(.n_bf,.n_bf)
             end
             do bj2=1,.n_bf
             do bq2=1,.n_bf
               temp_qa_ja(bq2,bj2)=sum(temp_bra_q(:,bq2)*temp_ket_j(:,bj2))
               temp_qb_jb(bq2,bj2)=sum(temp_bra_q(bq2,:)*temp_ket_j(bj2,:))
             end
             end
             do bj2=1,.n_bf
             do bj1=1,.n_bf
             do bq2=1,.n_bf
             do bq1=1,.n_bf
! respect the bra/ket nature of the indices
               temp_qa_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
               temp_qa_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
               temp_qb_h2_ja(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj1)*temp_ket_j(:,bj2))
               temp_qb_h2_jb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,bj2,:)*temp_ket_j(bj1,:))
!the next two are not needed for 2.3.1, one is for 2.3.2 and one for 2.3.3
! in case of memory shortage they can be created later but then the loop on kk 
!must be done for each subcase.
               temp_qa_h2_ja_ex(bq1,bq2,bj1,bj2)=sum(temp_qa_h2(bq1,bq2,bj1,:)*temp_ket_j(:,bj2))
               temp_qb_h2_jb_ex(bq1,bq2,bj1,bj2)=sum(temp_qb_h2(bq1,bq2,:,bj2)*temp_ket_j(bj1,:))
             end
             end
             end
             end
!case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk) !cannot be 1
!debug               
!debug write(*,*) 'kk,k',kk,k
!debug               
               DIE_IF(k<2,"k cannot be 1")  !debug
               reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) =  k
               if (.special_ket(k)[1]==0) then !k not special
                 temp_ket_k => .ket(k)[:,:]
!case 2.3
                 if(temp_qa_h2_ja_kb.disassociated) then
                   temp_qa_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction
                   temp_qb_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf) !used also in 2.2 after contraction 
                   temp_qa_h2_jb_ka.create(.n_bf,.n_bf,.n_bf,.n_bf)
                   temp_qb_h2_ja_kb.create(.n_bf,.n_bf,.n_bf,.n_bf)
                 end
!case 2.3.1 call special overlap ab
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qa_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                   temp_qa_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                   temp_qb_h2_ja_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_ja(bq1,bq2,:,bj2)*temp_ket_k(bj1,:))
                   temp_qb_h2_jb_ka(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(:,bj2))
                 end
                 end
                 end
                 end
                 reorder_bra.create(dim-2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,.n_bf
                     .special_ket(k)[2] = bj2
                     do bk1=1,.n_bf
                       .special_ket(k)[1] = bk1 
                       do bq1=1,.n_bf
                       do bi2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                            + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                            + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                            + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                         res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                       end 
                       end
                     end
                   end
                 end !do ii, the case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     .special_ket(k)[1] = bk1 
                     do bi2=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qa_h2_ja_kb(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qa_h2_jb_ka(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_ja_kb(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))     &  
                          + sum(temp_qb_h2_jb_ka(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <
                     end 
                     end 
                     end
                   end
                 end
!debug               
!debug write(*,*) 'case 2.3.1',dim,res
!debug              
!case 2.3.2 call special overlap aa
                 temp_qb_h2_jb_kb => temp_qb_h2_ja_kb
                 temp_qb_h2_jb_ex_kb => temp_qa_h2_jb_ka
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qb_h2_jb_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                   temp_qb_h2_jb_ex_kb(bq1,bq2,bj1,bj2)=sum(temp_qb_h2_jb_ex(bq1,bq2,bj1,:)*temp_ket_k(bj2,:))
                 end
                 end
                 end
                 end
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bk1=1,.n_bf
                     .special_ket(k)[2] = bk1
                     do bj1=1,.n_bf
                       .special_ket(k)[1] = bj1 
                       do bi1=1,.n_bf
                       do bq1=1,.n_bf
                         fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                            + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                         res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! <<
                     end 
                       end 
                       end
                     end
                   end
                 end !do ii , case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bk1=1,.n_bf
                   .special_ket(k)[2] = bk1
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
                     do bi1=1,.n_bf
                     do bq1=1,.n_bf
                       fac= sum(temp_qb_h2_jb_ex_kb(bq1,:,bj1,bk1)*temp_bra_i(bi1,:))     &
                          + sum(temp_qb_h2_jb_kb(bi1,:,bj1,bk1)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                     end 
                     end
                   end
                 end
!debug               
!debug write(*,*) 'case 2.3.2',dim,res
!debug              
!case 2.3.3 call special overlap bb
                 temp_qa_h2_ja_ka => temp_qb_h2_ja_kb
                 temp_qa_h2_ja_ex_ka => temp_qa_h2_jb_ka
                 do bj1=1,.n_bf
                 do bj2=1,.n_bf
                 do bq2=1,.n_bf
                 do bq1=1,.n_bf
! respect the bra/ket nature of the indices
                   temp_qa_h2_ja_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                   temp_qa_h2_ja_ex_ka(bq1,bq2,bj1,bj2)=sum(temp_qa_h2_ja_ex(bq1,bq2,:,bj1)*temp_ket_k(:,bj2))
                 end
                 end
                 end
                 end
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bk2=1,.n_bf
                     .special_ket(k)[2] = bk2
                     do bj2=1,.n_bf
                       .special_ket(k)[1] = bj2 
                       do bi2=1,.n_bf
                       do bq2=1,.n_bf
                         fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                            + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                         res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <
                     end 
                       end 
                       end
                     end
                   end
                 end !do ii , case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bk2=1,.n_bf
                   .special_ket(k)[2] = bk2
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                     do bi2=1,.n_bf
                     do bq2=1,.n_bf
                       fac= sum(temp_qa_h2_ja_ex_ka(:,bq2,bj2,bk2)*temp_bra_i(:,bi2))     &
                          + sum(temp_qa_h2_ja_ka(:,bi2,bj2,bk2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                     end 
                     end
                   end
                 end
                 reorder_bra.destroy
!debug               
!debug write(*,*) 'case 2.3.3',dim,res
!debug              
!case 2.2
                ! if(temp_q_h2_ja_kb.disassociated) then
                !   temp_q_h2_ja_kb.create(.n_bf,.n_bf)
                !   temp_q_h2_jb_ka.create(.n_bf,.n_bf)
                ! end
                ! temp_qa_h2_ja_kb.partial_trace(1,2,temp_q_h2_ja_kb) !no gain by storing that
                ! temp_qb_h2_jb_ka.partial_trace(1,2,temp_q_h2_jb_ka) !but convenient
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     temp_q_h2_ja_kb => temp_qa_h2_ja_kb(:,:,bk1,bj2)
                     temp_q_h2_jb_ka => temp_qb_h2_jb_ka(:,:,bk1,bj2)
                     fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bk1 
                     res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                   end 
                 end
!debug               
!debug write(*,*) 'case 2.2',dim,res
!debug              
!case 2.1
                 do bj2=1,.n_bf
                   .special_ket(k)[2] = bj2
                   do bk1=1,.n_bf
                     fac= sum(temp_qa_ja(:,bj2)*temp_ket_k(bk1,:))+sum(temp_qb_jb(:,bk1)*temp_ket_k(:,bj2))
                     if( NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1] = bk1 
                       res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                   end 
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
!debug               
!debug write(*,*) 'case 2.1',dim,res
!debug              
               else !k special
                 bk1=.special_ket(k)[1]
                 bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
                 !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
                 !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
                 !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 reorder_bra.create(dim-2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,bk2-1
                !    .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end
                     end
                   end
                   do bj2=bk2+1,.n_bf
                   ! .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                          + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end 
                   end
                   .special_ket(k)[2] = bk2 
                   do bj1=1,bk1-1
                     .special_ket(k)[1] = bj1 
                !    .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end
                   end
                   do bj1=bk1+1,.n_bf
                     .special_ket(k)[1] = bj1 
                 !   .special_ket(k)[2] = bk2
                     do bq1=1,.n_bf
                     do bi2=1,.n_bf
                       fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                       res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                     end 
                     end
                   end
                   .special_ket(k)[1] = bk1 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end !do ii, the case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bj2=1,bk2-1
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                 end
                 end
                 end
                 do bj2=bk2+1,.n_bf
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bj2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                 end 
                 end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   .special_ket(k)[1] = bj1 
              !    .special_ket(k)[2] = bk2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                 end 
                 end
                 end
                 do bj1=bk1+1,.n_bf
                   .special_ket(k)[1] = bj1 
               !   .special_ket(k)[2] = bk2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2_jb(:,bi2,bj1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bj1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                 end 
                 end
                 end
                 .special_ket(k)[1] = bk1 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2_ja(:,bi2,bk2,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2_jb(:,bi2,bk1,bk1)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2_ja(bq1,:,bk2,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2_jb(bq1,:,bk1,bk1)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                !   .special_ket(k)[2] = bk2
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
                 end 
                 end 
                 .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               
!debug write(*,*) 'case 2.3.1',dim,res
!debug              
!case 2.3.2 call special overlap aa
                !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
                !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj1=1,.n_bf
                     .special_ket(k)[1] = bj1 
               !     .special_ket(k)[2] = bk1
                   do bi1=1,.n_bf
                   do bq1=1,.n_bf
                     fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                        + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                   end 
                   end
                   end
                 end !do ii , case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bj1=1,.n_bf
                   .special_ket(k)[1] = bj1 
               !   .special_ket(k)[2] = bk1
                 do bi1=1,.n_bf
                 do bq1=1,.n_bf
                   fac= sum(temp_qb_h2_jb_ex(bq1,:,bj1,bk2)*temp_bra_i(bi1,:))     &
                      + sum(temp_qb_h2_jb(bi1,:,bj1,bk2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                 end 
                 end
                 end
                 .special_ket(k)[2] = bk2 
!debug               
!debug write(*,*) 'case 2.3.2',dim,res
!debug              
!case 2.3.3 call special overlap bb
               !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
               !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bj2=1,.n_bf
                     .special_ket(k)[1] = bj2 
                 !   .special_ket(k)[2] = bk2
                   do bi2=1,.n_bf
                   do bq2=1,.n_bf
                     fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                        + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                   end 
                   end
                   end
                 end !do ii , case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bj2=1,.n_bf
                   .special_ket(k)[1] = bj2 
                !  .special_ket(k)[2] = bk2
                 do bi2=1,.n_bf
                 do bq2=1,.n_bf
                   fac= sum(temp_qa_h2_ja_ex(:,bq2,bk1,bj2)*temp_bra_i(:,bi2))     &
                      + sum(temp_qa_h2_ja(:,bi2,bk1,bj2)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! <<
                     end 
                 end 
                 end
                 end
                 .special_ket(k)[1] = bk1 
                 reorder_bra.destroy
!debug               
!debug write(*,*) 'case 2.3.3',dim,res
!debug              
!case 2.2
                 !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 do bj2=1,bk2-1
                   temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                   fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 end
                 do bj2=bk2+1,.n_bf
                   temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bj2)
                   fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 end
                 .special_ket(k)[2] = bk2
                 !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 do bj1=1,bk1-1
                   temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                   fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                !  .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 end
                 do bj1=bk1+1,.n_bf
                   temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bj1,bk1)
                   fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                !  .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 end
                 .special_ket(k)[1] = bk1 
                 temp_q_h2_jb_ka => temp_qb_h2_jb(:,:,bk1,bk1)
                 temp_q_h2_ja_kb => temp_qa_h2_ja(:,:,bk2,bk2)
                 fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
             !    .special_ket(k)[1] = bk1 
             !    .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 2.2',dim,res
!debug              
!case 2.1
                 do bj2=1,bk2-1
                   fac= temp_qa_ja(bk2,bj2)
                   if( NOT fac.is_zero(.tol)) then
                  !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   end 
                 end
                 do bj2=bk2+1,.n_bf
                   fac= temp_qa_ja(bk2,bj2)
                   if( NOT fac.is_zero(.tol)) then
                  !  .special_ket(k)[1] = bk1 
                     .special_ket(k)[2] = bj2
                     res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   end 
                 end
                 .special_ket(k)[2] = bk2 
                 do bj1=1,bk1-1
                   fac= temp_qb_jb(bk1,bj1)
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                   ! .special_ket(k)[2] = bk2
                     res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   end 
                 end
                 do bj1=bk1+1,.n_bf
                   fac= temp_qb_jb(bk1,bj1)
                   if( NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                   ! .special_ket(k)[2] = bk2
                     res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   end 
                 end
                 .special_ket(k)[1] = bk1 
                 fac= temp_qb_jb(bk1,bk1) + temp_qa_ja(bk2,bk2)
                 if( NOT fac.is_zero(.tol)) then
                 !  .special_ket(k)[1] = bk1 
                 !  .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                 end
!debug               
!debug write(*,*) 'case 2.1',dim,res
!debug              
               end !k special
             end !do kk
             nullify(temp_q_h2_ja_kb)
             nullify(temp_q_h2_jb_ka)
             temp_qb_h2_jb_ka.destroy
             nullify(temp_qb_h2_jb_kb)
             nullify(temp_qb_h2_jb_ex_kb)
             temp_qa_h2_ja_kb.destroy
             nullify(temp_qa_h2_ja_ka)
             nullify(temp_qa_h2_ja_ex_ka)
             temp_qa_h2_jb_ka.destroy
             temp_qb_h2_ja_kb.destroy
!case 1.3
             temp_qb_h2_jb.partial_trace(3,4,temp_qb_h2_j)
             temp_qa_h2_ja.partial_trace(3,4,temp_qa_h2_j)
             !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
             !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
             !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
             reorder_bra.create(dim-2)
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
                 res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
               end
               end
             end !ii case ii=1 remains 
             temp_bra_i => .contraction_wfs(row_ind)[:,:]
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
               res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
             end
             end
             reorder_bra.destroy
!debug               
!debug write(*,*) 'case 1.3',dim,res
!debug              
!case 1.2
             fac=temp_qb_h2_j.trace
                     if( NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 1.2',dim,res
!debug              
!case 1.1
             fac=temp_qb_jb.trace
                     if( NOT fac.is_zero(.tol)) then
             res = res + .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 1.1',dim,res
!debug              
           else ! j is a special ket
! warning: we have not changed the structure with respect to the case "not a
! special ket", therefore more space than needed is used and large parts of the
! arrays are dangerously not initialized.
             bj1=.special_ket(j)[1]
             bj2=.special_ket(j)[2]
!case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk) !cannot be 1
!debug               
!debug write(*,*) 'kk,k',kk,k
!debug               
               DIE_IF(k<2,"k cannot be 1")  !debug
               reorder_ket(jj:kk-2)  = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) =  k
               DIE_IF(.special_ket(k)[1]==0,"j special ket but not k") 
               bk1=.special_ket(k)[1]
               bk2=.special_ket(k)[2]
!case 2.3
!case 2.3.1 call special overlap ab
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
               !  temp_qa_h2_jb_ka(:,:,:,bk2) => temp_qa_h2_jb(:,:,:,bk1)
               !  temp_qb_h2_ja_kb(:,:,bk1,:) => temp_qb_h2_ja(:,:,bk2,:)
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
               reorder_bra.create(dim-2)
               if(bj2/=bk2 OR bj1/=bk1) then
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
              !    .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end
                   end
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2 
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                          + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end
                   end
                   .special_ket(k)[1] = bk1 
                 end !do ii, the case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
            !    .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end
                 end
                 .special_ket(k)[1] = bj1 
                 .special_ket(k)[2] = bk2 
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end
                 end
                 .special_ket(k)[1] = bk1 
               else !bj1==bk1 AND bj2==bk2
                 do ii=dim-1,2,-1
                   temp_bra_i => .bra(ii)[:,:]
                   reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                   reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                   do bq1=1,.n_bf
                   do bi2=1,.n_bf
                     fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                        + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                        + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))     &  
                        + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
                !     .special_ket(k)[1] = bk1 
                !     .special_ket(k)[2] = bk2
                     res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                   end 
                   end 
                 end !do ii, the case ii=1 is left
                 temp_bra_i => .contraction_wfs(row_ind)[:,:]
                 reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
                 do bq1=1,.n_bf
                 do bi2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bi2,bj1,bk2)*temp_bra_i(bq1,:))     &
                      + sum(temp_qa_h2(:,bi2,bk1,bj2)*temp_bra_i(bq1,:))     &  
                      + sum(temp_qb_h2(bq1,:,bj1,bk2)*temp_bra_i(:,bi2))     &  
                      + sum(temp_qb_h2(bq1,:,bk1,bj2)*temp_bra_i(:,bi2))       
                     if( NOT fac.is_zero(.tol)) then
              !     .special_ket(k)[1] = bk1 
              !     .special_ket(k)[2] = bk2
                   res = res + .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! <<
                     end 
                 end 
                 end 
               end !bj1==bk1 AND bj2==bk2
               .special_ket(k)[2] = bk1 !this is not an error, this setting is constant in the following loops
!debug               
!debug write(*,*) 'case 2.3.1',dim,res
!debug              
!case 2.3.2 call special overlap aa
              !   temp_qb_h2_jb_kb(:,:,:,bk1) => temp_qb_h2_jb(:,:,:,bk2)
              !   temp_qb_h2_jb_ex_kb(:,:,:,bk1) => temp_qb_h2_jb_ex(:,:,:,bk2)
               .special_ket(k)[1] = bj1 
             ! .special_ket(k)[2] = bk1
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bi1=1,.n_bf
                 do bq1=1,.n_bf
                   fac= sum(temp_qb_h2(bq1,:,bj2,bk2)*temp_bra_i(bi1,:))     &
                      + sum(temp_qb_h2(bi1,:,bk2,bj2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
                 end
                 end
               end !do ii , case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bi1=1,.n_bf
               do bq1=1,.n_bf
                 fac= sum(temp_qb_h2(bq1,:,bj2,bk2)*temp_bra_i(bi1,:))     &
                    + sum(temp_qb_h2(bi1,:,bk2,bj2)*temp_bra_i(bq1,:))       
                     if( NOT fac.is_zero(.tol)) then
                 res = res + .special_overlap_spin_aa_for(reorder_bra,reorder_ket,row_ind,col_ind,bi1,bq1) * fac ! 
                     end 
               end
               end
!debug               
!debug write(*,*) 'case 2.3.2',dim,res
!debug              
!case 2.3.3 call special overlap bb
             !  temp_qa_h2_ja_ka(:,:,:,bk2) => temp_qa_h2_ja(:,:,bk1,:)
             !  temp_qa_h2_ja_ex_ka(:,:,:,bk2) => temp_qa_h2_ja_ex(:,:,bk1,:)
               .special_ket(k)[2] = bk2 
               .special_ket(k)[1] = bj2 
               do ii=dim-1,2,-1
                 temp_bra_i => .bra(ii)[:,:]
                 reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
                 reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
                 do bi2=1,.n_bf
                 do bq2=1,.n_bf
                   fac= sum(temp_qa_h2(:,bq2,bk1,bj1)*temp_bra_i(:,bi2))     &
                      + sum(temp_qa_h2(:,bi2,bj1,bk1)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                   res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! 
                     end 
                 end 
                 end
               end !do ii , case ii=1 is left
               temp_bra_i => .contraction_wfs(row_ind)[:,:]
               reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
               do bi2=1,.n_bf
               do bq2=1,.n_bf
                 fac= sum(temp_qa_h2(:,bq2,bk1,bj1)*temp_bra_i(:,bi2))     &
                    + sum(temp_qa_h2(:,bi2,bj1,bk1)*temp_bra_i(:,bq2))       
                     if( NOT fac.is_zero(.tol)) then
                 res = res + .special_overlap_spin_bb_for(reorder_bra,reorder_ket,row_ind,col_ind,bi2,bq2) * fac ! 
                     end 
               end 
               end
               .special_ket(k)[1] = bk1 
               reorder_bra.destroy
!debug               
!debug write(*,*) 'case 2.3.3',dim,res
!debug              
!case 2.2
               if(bj2/=bk2 OR bj1/=bk1) then
               !  temp_qa_h2_ja_kb(:,:,bk1,:) => temp_qa_h2_ja(:,:,bk2,:)
                 temp_q_h2_ja_kb => temp_qa_h2(:,:,bj1,bk2)
                 fac= temp_q_h2_ja_kb.trace
                     if( NOT fac.is_zero(.tol)) then
               !  .special_ket(k)[1] = bk1 
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 .special_ket(k)[2] = bk2
               !  temp_qb_h2_jb_ka(:,:,:,bk2) => temp_qb_h2_jb(:,:,:,bk1)
                 temp_q_h2_jb_ka => temp_qb_h2(:,:,bk1,bj2)
                 fac= temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1 
              !   .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
                 .special_ket(k)[1] = bk1 
               else !bj2==bk2 AND bj1==bk1
                 temp_q_h2_jb_ka => temp_qb_h2(:,:,bk1,bj2)
                 temp_q_h2_ja_kb => temp_qa_h2(:,:,bj1,bk2)
                 fac= temp_q_h2_ja_kb.trace+temp_q_h2_jb_ka.trace
                     if( NOT fac.is_zero(.tol)) then
           !     .special_ket(k)[1] = bk1 
           !     .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
               end !bj2==bk2 AND bj1==bk1
!debug               
!debug write(*,*) 'case 2.2',dim,res
!debug              
!case 2.1
               if(bj2/=bk2 OR bj1/=bk1) then
                 fac= temp_bra_q(bj1,bk2)
                 if( NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1 
                   .special_ket(k)[2] = bj2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   .special_ket(k)[2] = bk2 
                 end 
                 fac= temp_bra_q(bk1,bj2)
                 if( NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                 ! .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                   .special_ket(k)[1] = bk1 
                 end 
               else !bj2==bk2 AND bj1==bk1
                 fac= temp_bra_q(bk1,bj2) + temp_bra_q(bj1,bk2)
                 if( NOT fac.is_zero(.tol)) then
               !   .special_ket(k)[1] = bk1 
               !   .special_ket(k)[2] = bk2
                   res = res - .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                 end
               end !bj2==bk2 AND bj1==bk1
!debug               
!debug write(*,*) 'case 2.1',dim,res
!debug              
             end !do kk
!             nullify(temp_q_h2_ja_kb)
!             nullify(temp_q_h2_jb_ka)
!             temp_qb_h2_jb_ka.destroy
!             nullify(temp_qb_h2_jb_kb)
!             nullify(temp_qb_h2_jb_ex_kb)
!             temp_qa_h2_ja_kb.destroy
!             nullify(temp_qa_h2_ja_ka)
!             nullify(temp_qa_h2_ja_ex_ka)
!             temp_qa_h2_jb_ka.destroy
!             temp_qb_h2_ja_kb.destroy
!case 1.3
             temp_qa_h2_j=temp_qa_h2(:,:,bj1,bj2)
             temp_qb_h2_j=temp_qb_h2(:,:,bj1,bj2)
             !  temp_qa_h2_j = temp_qa_h2_ja(v2,bq2,:,:).trace
             !  temp_qb_h2_j = temp_qb_h2_jb(bq1,v1,:,:).trace
             !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1)  = order_ket(jj+1:dim) 
             reorder_bra.create(dim-2)
             do ii=dim-1,2,-1
               temp_bra_i => .bra(ii)[:,:]
               reorder_bra(1:ii-1)   = [ (l , l=1,ii-1) ]
               reorder_bra(ii:dim-2) = [ (l , l=ii+1,dim-1) ]
               do bi2=1,.n_bf
               do bq1=1,.n_bf
                 fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
                 res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
               end
               end
             end !ii case ii=1 remains 
             temp_bra_i => .contraction_wfs(row_ind)[:,:]
             reorder_bra(1:dim-2) = [ (l , l=2,dim-1) ]
             do bi2=1,.n_bf
             do bq1=1,.n_bf
               fac=sum(temp_qb_h2_j(bq1,:)*temp_bra_i(:,bi2))+sum(temp_qa_h2_j(:,bi2)*temp_bra_i(bq1,:))
                     if( NOT fac.is_zero(.tol)) then
               res = res - .special_overlap_spin_ab_for(reorder_bra,reorder_ket,row_ind,col_ind,bq1,bi2) * fac ! 
                     end 
             end
             end
             reorder_bra.destroy
!debug               
!debug write(*,*) 'case 1.3',dim,res
!debug              
  !case 1.2
             fac=temp_qb_h2_j.trace
                     if( NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 1.2',dim,res
!debug              
  !case 1.1
             fac=temp_bra_q(bj1,bj2)
                     if( NOT fac.is_zero(.tol)) then
             res = res + .hamiltonian_for(v,reorder_ket,row_ind,col_ind) * fac ! 
                     end 
!debug               
!debug write(*,*) 'case 1.1',dim,res
!debug              
           end !j special ket
         end !if j=1
       end !do jj
       temp_qa_h2_ja.destroy
       temp_qb_h2_jb.destroy
       temp_qa_h2_jb.destroy
       temp_qb_h2_ja.destroy
       temp_qa_h2_ja_ex.destroy
       temp_qb_h2_jb_ex.destroy
       temp_qa_ja.destroy
       temp_qb_jb.destroy
       temp_qa_h2_j.destroy
       temp_qb_h2_j.destroy
       temp_qa_h2.destroy
       temp_qb_h2.destroy
       reorder_ket.destroy
     end !if dim=1
   end

   overlap_for(order_bra,order_ket) result (res) ::: recursive
   ! Standard recursive function which evaluates the overlap integrals matrix between
   ! mean field (Sz=0)-geminals (upper triangle only is evaluated)
!comments:
!special_ket are always created at the end so that if jj is a special ket,
!than kk>jj is also a special ket.
     order_bra, order_ket :: VEC{INT}, IN
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.special_ket(1)[1]==0,".special_ket(1) already set")
     ENSURE(order_ket.dim==order_bra.dim,"dim of bra not equal to dim of ket")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     row_ind,col_ind :: INT
     q,jj,j,kk,k,dim,l,bq1,bj1,bj2,bk1,bk2 :: INT
     reorder_ket :: VEC{INT}*
     reorder_bra :: VEC{INT}*
     fac :: REAL
     temp_bra_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_qb_jb :: MAT{REAL}*

     dim = order_ket.dim
     q=order_bra(dim)
     res = ZERO
      
     if (dim==1) then ! only Case 1
       j = order_ket(1)
       DIE_IF(j/=1,"dim is 1 but j is not 1")
       DIE_IF(q/=1,"dim is 1 but q is not 1")
       do col_ind=1,.n_bas 
         temp_ket_j => .contraction_wfs(col_ind)[:,:]
         do row_ind=1,col_ind
           fac = sum(.contraction_wfs(row_ind)[:,:]*temp_ket_j)
           if (NOT fac.is_zero(.tol)) then
             res(row_ind,col_ind)=fac !permit to set to zero numbers below a threshold
           end
         end
       end
       return
     else ! dim > 1
       DIE_IF(q==1,"q=1 but dim is more than 1")
       reorder_bra.create(dim-1)
       reorder_bra(1:dim-1)   = [ (order_bra(l), l=1,dim-1) ]
       temp_bra_q => .bra(q)[:,:]
       reorder_ket.create(dim-1)
       temp_qa_ja.create(.n_bf,.n_bf)
       temp_qb_jb.create(.n_bf,.n_bf)
       do jj = dim,1,-1
         j = order_ket(jj)
         if (j==1) then ! 1 not special
           do col_ind=1,.n_bas
             temp_ket_j => .contraction_wfs(col_ind)[:,:]
             do bj1=1,.n_bf
             do bq1=1,.n_bf
               temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
               temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
             end
             end
  ! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               if (.special_ket(k)[1]>0) then ! k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 do bj1 = 1,bk1-1
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj1 = bk1+1,.n_bf
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj2 = 1,bk2-1
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 do bj2 = bk2+1,.n_bf
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res(:,col_ind) = res(:,col_ind) &
                   - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                 end
               else ! k not special
                 temp_ket_k => .ket(k)[:,:]
                 do bk2 = 1,.n_bf
                 do bj1 = 1,.n_bf
                   fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                     .special_ket(k)[2] = bk2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                   end
                 end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
               end  ! if (.special_ket(k)
             end !do kk
  ! Case 1
             !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_qb_jb.trace
             if (NOT fac.is_zero(.tol)) then
               res(:,col_ind) = res(:,col_ind) &
               + .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
             end
           end !do col_ind
         else ! j>1 
           if (.special_ket(j)[1]>0) then
             bj1 = .special_ket(j)[1]
             bj2 = .special_ket(j)[2]
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               DIE_IF(.special_ket(k)[1]==0,"j special but not k")
!debug              if(.special_ket(k)[1]==0) then
!debug     write(*,*) "j special but not k"
!debug     stdout.show("dim=",dim)
!debug     do l=1,dim
!debug       stdout.show("l=",l)
!debug       stdout.show("order_ket(l)=",order_ket(l))
!debug       stdout.show("special_ket(order_ket(l))-in",.special_ket(order_ket(l)).element)
!debug     end
!debug     stop
!debug     end
!assume special_ket's are also ordered at the end in the initial guess
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if(bj1/=bk1 OR bj2/=bk2) then
                 fac=temp_bra_q(bk1,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
                 fac=temp_bra_q(bj1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               else ! bj1==bk1 AND bj2==bk2
                 fac=TWO * temp_bra_q(bk1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                 end
               end ! bj1==bk1 AND bj2==bk2
             end !do kk
! Case 1
             !reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_bra_q(bj1,bj2)
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_bra,reorder_ket) * fac ! <<
             end
           else !j not special
             temp_ket_j => .ket(j)[:,:]
             do bj1=1,.n_bf
             do bq1=1,.n_bf
               temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
               temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
             end
             end
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               if (.special_ket(k)[1]>0) then ! k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 do bj1 = 1,bk1-1
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj1 = bk1+1,.n_bf
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj2 = 1,bk2-1
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 do bj2 = bk2+1,.n_bf
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                 end
               else ! k not special
                 temp_ket_k => .ket(k)[:,:]
                 do bk2 = 1,.n_bf
                 do bj1 = 1,.n_bf
                   fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                     .special_ket(k)[2] = bk2
                     res = res - .overlap_for(reorder_bra,reorder_ket) * fac ! <<
                   end
                 end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
               end  ! if (.special_ket(k)
             end !do kk
! Case 1
            ! reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_qb_jb.trace
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_bra,reorder_ket) * fac ! <<
             end
           end !j not special
         end !if(j==1 AND .special_ket(1)==0) else
       end  !do jj=dim,1,-1
     temp_qa_ja.destroy
     temp_qb_jb.destroy
     reorder_ket.destroy
     end ! if(dim==1)
     reorder_bra.destroy
   end

   overlap_for(order_bra,order_ket,col_ind) result (res) ::: recursive
   ! Standard recursive function which evaluates the overlap integrals column
   ! vector specified by col_ind between mean field (Sz=0)-geminals 
   ! upper half only is evaluated.
!comments:
!special_ket are always created at the end so that if jj is a special ket,
!than kk>jj is also a special ket. 
     col_ind :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: VEC{REAL}(.n_bas)
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim==order_bra.dim,"dim of bra not equal to dim of ket")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     row_ind :: INT
     q,jj,j,kk,k,dim,l,bq1,bj1,bj2,bk1,bk2 :: INT
     reorder_ket :: VEC{INT}*
     reorder_bra :: VEC{INT}*
     fac :: REAL
     temp_bra_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_qb_jb :: MAT{REAL}*

     dim = order_ket.dim
     q=order_bra(dim)
     res=ZERO

     if (dim==1) then ! only Case 1
       j = order_ket(1)
       DIE_IF(q/=1,"dim is 1 but q is not 1")
       DIE_IF(j==1,"ket of contraction 1 has already appeared")
       if (.special_ket(j)[1]>0) then             
         bj1 = .special_ket(j)[1]                 
         bj2 = .special_ket(j)[2]                
         do row_ind=1,col_ind
           fac = .contraction_wfs(row_ind)[bj1,bj2]
           if (NOT fac.is_zero(.tol)) then
             res(row_ind)=fac !permit to set to zero numbers below a threshold
           end
         end
       else 
         temp_ket_j => .ket(j)[:,:]
         do row_ind=1,col_ind
           fac = sum(.contraction_wfs(row_ind)[:,:]*temp_ket_j)
           if (NOT fac.is_zero(.tol)) then
             res(row_ind)=fac !permit to set to zero numbers below a threshold
           end
         end
       end
       return
     else ! dim > 1
       DIE_IF(q==1,"q=1 but dim is more than 1")
       reorder_bra.create(dim-1)
       reorder_bra(1:dim-1)   = [ (order_bra(l), l=1,dim-1) ]
       temp_bra_q => .bra(q)[:,:]
       reorder_ket.create(dim-1)
       temp_qa_ja.create(.n_bf,.n_bf)
       temp_qb_jb.create(.n_bf,.n_bf)
       do jj = dim,1,-1
         j = order_ket(jj)
         DIE_IF(j==1,"ket of contraction 1 has already appeared")
         if (.special_ket(j)[1]>0) then
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! Case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk)
!debug             if(.special_ket(k)[1]==0)then
!debug               write(*,*) "j special but not k"
!debug               stdout.show("dim=",dim)
!debug               do l=1,dim
!debug                 stdout.show("l=",l)
!debug                 stdout.show("order_ket(l)=",order_ket(l))
!debug                 stdout.show("special_ket(order_ket(l))",.special_ket(order_ket(l)).element)
!debug               end
!debug               write(*,*) "kk,k",kk,k
!debug               write(*,*) "jj,j",jj,j
!debug               stop
!debug             end
             DIE_IF(.special_ket(k)[1]==0,"j special but not k")
!assume special_ket's are also ordered at the end in the initial guess
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) = k 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
             if(bj1/=bk1 OR bj2/=bk2) then
               fac=temp_bra_q(bk1,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                 .special_ket(k)[1] = bk1
               end
               fac=temp_bra_q(bj1,bk2)
               if (NOT fac.is_zero(.tol)) then
              !  .special_ket(k)[1] = bk1
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                 .special_ket(k)[2] = bk2
               end
             else ! bj1==bk1 AND bj2==bk2
               fac=TWO * temp_bra_q(bk1,bk2)
               if (NOT fac.is_zero(.tol)) then
              !  .special_ket(k)[1] = bk1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
               end
             end ! bj1==bk1 AND bj2==bk2
           end !do kk
! Case 1
         !  reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
           fac = temp_bra_q(bj1,bj2)
           if (NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
           end
         else !j not special
           temp_ket_j => .ket(j)[:,:]
           do bj1=1,.n_bf
           do bq1=1,.n_bf
             temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
             temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
           end
           end
! Case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk)
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) = k 
             if (.special_ket(k)[1]>0) then ! k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               do bj1 = 1,bk1-1
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj1 = bk1+1,.n_bf
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj2 = 1,bk2-1
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               do bj2 = bk2+1,.n_bf
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
               if (NOT fac.is_zero(.tol)) then
               ! .special_ket(k)[1] = bk1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
               end
             else ! k not special
               temp_ket_k => .ket(k)[:,:]
               do bk2 = 1,.n_bf
               do bj1 = 1,.n_bf
                 fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
                 end
               end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
             end  ! if (.special_ket(k)
           end !do kk
! Case 1
         !  reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
           fac = temp_qb_jb.trace
           if (NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_bra,reorder_ket,col_ind) * fac ! <<
           end
         end !j not special
       end  !do jj=dim,1,-1
     temp_qa_ja.destroy
     temp_qb_jb.destroy
     reorder_ket.destroy
     end ! if(dim==1)
     reorder_bra.destroy
   end

   overlap_for(order_bra,order_ket,row_ind,col_ind) result (res) ::: recursive
   ! Standard recursive function which evaluates the overlap integrals matrix
   ! element specified by col_ind and row_ind between mean field (Sz=0)-geminals 
!comments:
!special_ket are always created at the end so that if jj is a special ket,
!than kk>jj is also a special ket.
     row_ind, col_ind :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: REAL
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim==order_bra.dim,"dim of bra not equal to dim of ket")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     ENSURE(row_ind>0 AND row_ind<=.n_bas,"row_ind out of range")
     q,jj,j,kk,k,dim,l,bq1,bj1,bj2,bk1,bk2 :: INT
     reorder_ket :: VEC{INT}*
     reorder_bra :: VEC{INT}*
     fac :: REAL
     temp_bra_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_qb_jb :: MAT{REAL}*

     dim = order_ket.dim
     q=order_bra(dim)
     if(q==1) then
       temp_bra_q => .contraction_wfs(row_ind)[:,:]
     else
       temp_bra_q => .bra(q)[:,:]
     end
     reorder_bra.create(dim-1)
     reorder_bra(1:dim-1)   = [ (order_bra(l), l=1,dim-1) ]
     res = ZERO
      
     if (dim==1) then ! only Case 1
       j = order_ket(1)
       if (.special_ket(j)[1]>0) then             
         bj1 = .special_ket(j)[1]                 
         bj2 = .special_ket(j)[2]                
         fac = temp_bra_q(bj1,bj2)
       else if(.special_ket(j)[1]==0 AND j==1) then
         fac = sum(temp_bra_q*.contraction_wfs(col_ind)[:,:])
       else if (.special_ket(j)[1]==0 AND j/=1) then
         fac = sum(temp_bra_q*.ket(j)[:,:])
       end
       if (NOT fac.is_zero(.tol)) then
          res = fac
       end
       return
     else ! dim > 1
       reorder_ket.create(dim-1)
       temp_qa_ja.create(.n_bf,.n_bf)
       temp_qb_jb.create(.n_bf,.n_bf)
       do jj = dim,1,-1
         j = order_ket(jj)
         if (j==1 AND .special_ket(1)[1]==0) then ! 1 not special
           temp_ket_j => .contraction_wfs(col_ind)[:,:]
           do bj1=1,.n_bf
           do bq1=1,.n_bf
             temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
             temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
           end
           end
! Case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk)
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) = k 
             if (.special_ket(k)[1]>0) then ! k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               do bj1 = 1,bk1-1
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj1 = bk1+1,.n_bf
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj2 = 1,bk2-1
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               do bj2 = bk2+1,.n_bf
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
               if (NOT fac.is_zero(.tol)) then
               ! .special_ket(k)[1] = bk1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
               end
             else ! k not special
               temp_ket_k => .ket(k)[:,:]
               do bk2 = 1,.n_bf
               do bj1 = 1,.n_bf
                 fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                 end
               end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
             end  ! if (.special_ket(k)
           end !do kk
! Case 1
         !  reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
           fac = temp_qb_jb.trace
           if (NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
           end
         else ! j>1 or 1 special
           if (.special_ket(j)[1]>0) then
             bj1 = .special_ket(j)[1]
             bj2 = .special_ket(j)[2]
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               DIE_IF(.special_ket(k)[1]==0,"j special but not k")
!debug              if(.special_ket(k)[1]==0) then
!debug     write(*,*) "j special but not k"
!debug     stdout.show("dim=",dim)
!debug     do l=1,dim
!debug       stdout.show("l=",l)
!debug       stdout.show("order_ket(l)=",order_ket(l))
!debug       stdout.show("special_ket(order_ket(l))-in",.special_ket(order_ket(l)).element)
!debug     end
!debug     stop
!debug     end
!assume special_ket's are also ordered at the end in the initial guess
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if(bj1/=bk1 OR bj2/=bk2) then
                 fac=temp_bra_q(bk1,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
                 fac=temp_bra_q(bj1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               else ! bj1==bk1 AND bj2==bk2
                 fac=TWO * temp_bra_q(bk1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                 end
               end ! bj1==bk1 AND bj2==bk2
             end !do kk
! Case 1
        !     reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_bra_q(bj1,bj2)
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
             end
           else !j not special
             temp_ket_j => .ket(j)[:,:]
             do bj1=1,.n_bf
             do bq1=1,.n_bf
               temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
               temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
             end
             end
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               if (.special_ket(k)[1]>0) then ! k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 do bj1 = 1,bk1-1
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj1 = bk1+1,.n_bf
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj2 = 1,bk2-1
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 do bj2 = bk2+1,.n_bf
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                 end
               else ! k not special
                 temp_ket_k => .ket(k)[:,:]
                 do bk2 = 1,.n_bf
                 do bj1 = 1,.n_bf
                   fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                     .special_ket(k)[2] = bk2
                     res = res - .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   end
                 end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
               end  ! if (.special_ket(k)
             end !do kk
! Case 1
           !  reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_qb_jb.trace
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_bra,reorder_ket,row_ind,col_ind) * fac ! <<
             end
           end !j not special
         end !if(j==1 AND .special_ket(1)==0) else
       end  !do jj=dim,1,-1
     temp_qa_ja.destroy
     temp_qb_jb.destroy
     reorder_ket.destroy
     end ! if(dim==1)
     reorder_bra.destroy
   end

!It is possible to speed up a bit the
!special_overlap_spin_xy_for(order_bra,order_ket,row_ind,col_ind,b1,b2) routines
!by taking into account the fact that the bra and ket of contraction 1 have already been
!found when it is called when performing an Hamiltonian matrix calculation,
!however the routine won't work afterwards when only a single Hamiltonian matrix
!element is calculated with hamiltonian_for(v,order_ket,row_ind,col_ind).

   special_overlap_spin_ab_for(order_bra,order_ket,b1,b2) result (res) ::: recursive
   ! Special function which evaluates the overlap integrals matrix between
   ! mean field (Sz=0)-geminals when .bra(dim) is a special bra
!comments: should not be called if dim=1 because row_ind would
! be already defined.
     b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(order_ket.dim>1,"dimension less than two")
     ENSURE(.special_ket(1)[2]==0,"ket already set for contr 1")
     col_ind :: INT
     dim,bq1,bq2,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     DIE_IF(q==1,"ket of contraction 1 not in place")
     res = ZERO
     
     if(.special_ket(q)[2]==0) then !not a special ket
       temp_ket_q => .ket(q)[:,:]
       do bq1=1,.n_bf
         .special_ket(q)[1]=bq1
         do bq2=1,.n_bf
           if (NOT temp_ket_q(bq1,bq2).is_zero) then
             .special_ket(q)[2]=bq2
             res=res+.special_overlap_spin_ab_for(order_bra,order_ket,b1,b2) &
                   *temp_ket_q(bq1,bq2) 
           end
         end
       end
       .special_ket(q)[1]=0
       .special_ket(q)[2]=0
       return
     end
! at this stage q is necessarily a special ket and dim>1
     reorder_ket.create(dim-1)
     do jj = dim,1,-1
        j = order_ket(jj)
        reorder_ket(1:jj-1)   = order_ket(1:jj-1)
        reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
        if (.special_ket(j)[1]>0) then  !j special
          bj1 = .special_ket(j)[1]
          bj2 = .special_ket(j)[2]
! The simple case 1
          if (bj1==b1 AND bj2==b2 ) then
            res = res + .overlap_for(order_bra,reorder_ket)  ! <<
          end
! Case 2
          do kk = dim,jj+1,-1
            k = order_ket(kk)
            DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
!debug              if(.special_ket(k)[1]==0) then
!debug                write(*,*) 'j special but not k'
!debug                stop
!debug              end
            bk1 = .special_ket(k)[1]
            bk2 = .special_ket(k)[2]
      !      reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
            reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
            reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
            reorder_ket(dim-1) = k 
            fac = ZERO
            if (bj1==b1 AND bk2==b2 AND (bj2/=b2 OR bk1/=b1)) then
              fac = ONE
            ! .special_ket(k)[1] = bk1 ! 
              .special_ket(k)[2] = bj2 
            else if((bj1/=b1 OR bk2/=b2) AND bj2==b2 AND bk1==b1) then
              fac = ONE
              .special_ket(k)[1] = bj1 ! 
            ! .special_ket(k)[2] = bk2 
            else if(bj1==b1 AND bk2==b2 AND bj2==b2 AND bk1==b1) then
               fac=TWO 
            ! .special_ket(k)[1] = bk1  
            ! .special_ket(k)[2] = bk2 
            end
            res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
            .special_ket(k)[1] = bk1
            .special_ket(k)[2] = bk2
          end !do kk
        else ! j not special
          if(j==1)then
         !   reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
            do col_ind=1,.n_bas
              temp_ket_j => .contraction_wfs(col_ind)[:,:]
! Case 1
              reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
              fac = temp_ket_j(b1,b2)
              if (NOT fac.is_zero(.tol)) then
                res(:,col_ind) = res(:,col_ind) &
                + .overlap_for(order_bra,reorder_ket,col_ind)*fac ! <<
              end
! Case 2
              do kk = dim,jj+1,-1
                k = order_ket(kk)
!3-04-05               reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
                reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
                reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
                reorder_ket(dim-1) = k 
                if (.special_ket(k)[1]>0) then
! Case 2, k special
                  bk1 = .special_ket(k)[1]
                  bk2 = .special_ket(k)[2]
                  if (bk2 == b2 AND bk1 /= b1) then
                    do bj2 = 1,.n_bf
                      fac = temp_ket_j(b1,bj2)
                      if (NOT fac.is_zero(.tol)) then
                    !   .special_ket(k)[1] = bk1 
                        .special_ket(k)[2] = bj2
                        res(:,col_ind) = res(:,col_ind) &
                        - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                      end
                    end
                    .special_ket(k)[2] = bk2
                  else if (bk2 /= b2 AND bk1 == b1) then   
                    do bj1 = 1,.n_bf
                      fac = temp_ket_j(bj1,b2)
                      if (NOT fac.is_zero(.tol)) then
                        .special_ket(k)[1] = bj1 
                     !  .special_ket(k)[2] = bk2
                        res(:,col_ind) = res(:,col_ind) &
                        - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                      end
                    end
                    .special_ket(k)[1] = bk1
                  else if (bk2 == b2 AND bk1 == b1) then   
                    do bj1 = 1,b1-1
                      fac = temp_ket_j(bj1,b2)
                      if (NOT fac.is_zero(.tol)) then
                        .special_ket(k)[1] = bj1 
                     !  .special_ket(k)[2] = bk2
                        res(:,col_ind) = res(:,col_ind) &
                        - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                      end
                    end
                    do bj1 = b1+1,.n_bf
                      fac = temp_ket_j(bj1,b2)
                      if (NOT fac.is_zero(.tol)) then
                        .special_ket(k)[1] = bj1 
                     !  .special_ket(k)[2] = bk2
                        res(:,col_ind) = res(:,col_ind) &
                        - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                      end
                    end
                    .special_ket(k)[1] = bk1
                    do bj2 = 1,b2-1
                      fac = temp_ket_j(b1,bj2)
                      if (NOT fac.is_zero(.tol)) then
                    !   .special_ket(k)[1] = bk1 
                        .special_ket(k)[2] = bj2
                        res(:,col_ind) = res(:,col_ind) &
                        - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                      end
                    end
                    do bj2 = b2+1,.n_bf
                      fac = temp_ket_j(b1,bj2)
                      if (NOT fac.is_zero(.tol)) then
                    !   .special_ket(k)[1] = bk1 
                        .special_ket(k)[2] = bj2
                        res(:,col_ind) = res(:,col_ind) &
                        - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                      end
                    end
                    .special_ket(k)[2] = bk2
                    fac = TWO*temp_ket_j(b1,b2)
                    if (NOT fac.is_zero(.tol)) then
                    !   .special_ket(k)[1] = bk1 
                    !   .special_ket(k)[2] = bk2 
                      res(:,col_ind) = res(:,col_ind) &
                      - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                    end
                  end !else if (bk2 == b2 AND bk1 == b1)
                else !  Case 2, NONE SPECIAL
                  temp_ket_k => .ket(k)[:,:]
                  do bj2 = 1,.n_bf
                  do bk1 = 1,.n_bf
                    fac = temp_ket_j(b1,bj2)*temp_ket_k(bk1,b2)+temp_ket_j(bk1,b2)*temp_ket_k(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res(:,col_ind) = res(:,col_ind) &
                      - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                    end 
                  end
                  end
                  .special_ket(k)[1] = 0 
                  .special_ket(k)[2] = 0
                end ! if k special
              end !do kk
            end !do col_ind
          else !j/=1
            temp_ket_j => .ket(j)[:,:]
! Case 1
!3-04-05            reorder_ket(1:jj-1) = order_ket(1:jj-1) 
!3-04-05            reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
            fac = temp_ket_j(b1,b2)
            if (NOT fac.is_zero(.tol)) then
              res = res + .overlap_for(order_bra,reorder_ket)*fac ! <<
            end
  ! Case 2
            do kk = dim,jj+1,-1
              k = order_ket(kk)
              reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
              reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
              reorder_ket(dim-1) = k 
              if (.special_ket(k)[1]>0) then
  ! Case 2, k special
                bk1 = .special_ket(k)[1]
                bk2 = .special_ket(k)[2]
                if (bk2 == b2 AND bk1 /= b1) then
                  do bj2 = 1,.n_bf
                    fac = temp_ket_j(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                    end
                  end
                  .special_ket(k)[2] = bk2
                else if (bk2 /= b2 AND bk1 == b1) then   
                  do bj1 = 1,.n_bf
                    fac = temp_ket_j(bj1,b2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bj1 
                   !  .special_ket(k)[2] = bk2
                      res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                    end
                  end
                  .special_ket(k)[1] = bk1
                else if (bk2 == b2 AND bk1 == b1) then   
                  do bj1 = 1,b1-1
                    fac = temp_ket_j(bj1,b2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bj1 
                   !  .special_ket(k)[2] = bk2
                      res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                    end
                  end
                  do bj1 = b1+1,.n_bf
                    fac = temp_ket_j(bj1,b2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bj1 
                   !  .special_ket(k)[2] = bk2
                      res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                    end
                  end
                  .special_ket(k)[1] = bk1
                  do bj2 = 1,b2-1
                    fac = temp_ket_j(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                    end
                  end
                  do bj2 = b2+1,.n_bf
                    fac = temp_ket_j(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                    end
                  end
                  .special_ket(k)[2] = bk2
                  fac = TWO*temp_ket_j(b1,b2)
                  if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2 
                    res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                  end
                end !else if (bk2 == b2 AND bk1 == b1)
              else !  Case 2, NONE SPECIAL
                temp_ket_k => .ket(k)[:,:]
                do bj2 = 1,.n_bf
                do bk1 = 1,.n_bf
                  fac = temp_ket_j(b1,bj2)*temp_ket_k(bk1,b2)+temp_ket_j(bk1,b2)*temp_ket_k(b1,bj2)
                  if (NOT fac.is_zero(.tol)) then
                    .special_ket(k)[1] = bk1 
                    .special_ket(k)[2] = bj2
                    res = res - .overlap_for(order_bra,reorder_ket) * fac ! <<
                  end 
                end
                end
                .special_ket(k)[1] = 0 
                .special_ket(k)[2] = 0
              end ! if k special
            end !do kk
          end !j==1
        end! if j special
     end !do jj
     reorder_ket.destroy
   end

   special_overlap_spin_ab_for(order_bra,order_ket,col_ind,b1,b2) result (res) ::: recursive
   ! Special function which evaluates the overlap integrals column vector
   ! specified by col_ind between mean field (Sz=0)-geminals when .bra(dim) is a special bra
!comments: should not be called if dim=1 because row_ind would be already defined.
     col_ind,b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: VEC{REAL}(.n_bas)
     ENSURE(order_ket.dim>1,"dimension less than two")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     dim,bq1,bq2,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     DIE_IF(q==1,"ket of contraction 1 not in place")
     res = ZERO
     
     if(.special_ket(q)[2]==0) then !not a special ket
       temp_ket_q => .ket(q)[:,:]
       do bq1=1,.n_bf
         .special_ket(q)[1]=bq1
         do bq2=1,.n_bf
           if (NOT temp_ket_q(bq1,bq2).is_zero) then
             .special_ket(q)[2]=bq2
             res=res+.special_overlap_spin_ab_for(order_bra,order_ket,col_ind,b1,b2) &
                   *temp_ket_q(bq1,bq2) 
           end
         end
       end
       .special_ket(q)[1]=0
       .special_ket(q)[2]=0
       return
     end
! at this stage q is necessarily a special ket and dim>1
     reorder_ket.create(dim-1)
     do jj = dim,1,-1
        reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
        reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
        j = order_ket(jj)
        DIE_IF(j==1,"ket of contraction 1 has already appeared")
        if (.special_ket(j)[1]>0) then  !j special
          bj1 = .special_ket(j)[1]
          bj2 = .special_ket(j)[2]
! The simple case 1
          if (bj1==b1 AND bj2==b2 ) then
            res = res + .overlap_for(order_bra,reorder_ket,col_ind)  ! <<
          end
! Case 2
          do kk = dim,jj+1,-1
            k = order_ket(kk)
            DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
!debug              if(.special_ket(k)[1]==0) then
!debug                write(*,*) 'j special but not k'
!debug                stop
!debug              end
            bk1 = .special_ket(k)[1]
            bk2 = .special_ket(k)[2]
      !      reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
            reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
            reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
            reorder_ket(dim-1) = k 
            fac = ZERO
            if (bj1==b1 AND bk2==b2 AND (bj2/=b2 OR bk1/=b1)) then
              fac = ONE
            ! .special_ket(k)[1] = bk1 ! 
              .special_ket(k)[2] = bj2 
            else if((bj1/=b1 OR bk2/=b2) AND bj2==b2 AND bk1==b1) then
              fac = ONE
              .special_ket(k)[1] = bj1 ! 
            ! .special_ket(k)[2] = bk2 
            else if(bj1==b1 AND bk2==b2 AND bj2==b2 AND bk1==b1) then
               fac=TWO 
            ! .special_ket(k)[1] = bk1  
            ! .special_ket(k)[2] = bk2 
            end
            res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
            .special_ket(k)[1] = bk1
            .special_ket(k)[2] = bk2
          end !do kk
        else ! j not special
          temp_ket_j => .ket(j)[:,:]
! Case 1
          fac = temp_ket_j(b1,b2)
          if (NOT fac.is_zero(.tol)) then
            res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac ! <<
          end
! Case 2
          do kk = dim,jj+1,-1
            k = order_ket(kk)
!3-04-05            reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
            reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
            reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
            reorder_ket(dim-1) = k 
            if (.special_ket(k)[1]>0) then
! Case 2, k special
              bk1 = .special_ket(k)[1]
              bk2 = .special_ket(k)[2]
              if (bk2 == b2 AND bk1 /= b1) then
                do bj2 = 1,.n_bf
                  fac = temp_ket_j(b1,bj2)
                  if (NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                    .special_ket(k)[2] = bj2
                    res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                  end
                end
                .special_ket(k)[2] = bk2
              else if (bk2 /= b2 AND bk1 == b1) then   
                do bj1 = 1,.n_bf
                  fac = temp_ket_j(bj1,b2)
                  if (NOT fac.is_zero(.tol)) then
                    .special_ket(k)[1] = bj1 
                 !  .special_ket(k)[2] = bk2
                    res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                  end
                end
                .special_ket(k)[1] = bk1
              else if (bk2 == b2 AND bk1 == b1) then   
                do bj1 = 1,b1-1
                  fac = temp_ket_j(bj1,b2)
                  if (NOT fac.is_zero(.tol)) then
                    .special_ket(k)[1] = bj1 
                 !  .special_ket(k)[2] = bk2
                    res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                  end
                end
                do bj1 = b1+1,.n_bf
                  fac = temp_ket_j(bj1,b2)
                  if (NOT fac.is_zero(.tol)) then
                    .special_ket(k)[1] = bj1 
                 !  .special_ket(k)[2] = bk2
                    res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                  end
                end
                .special_ket(k)[1] = bk1
                do bj2 = 1,b2-1
                  fac = temp_ket_j(b1,bj2)
                  if (NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                    .special_ket(k)[2] = bj2
                    res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                  end
                end
                do bj2 = b2+1,.n_bf
                  fac = temp_ket_j(b1,bj2)
                  if (NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                    .special_ket(k)[2] = bj2
                    res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                  end
                end
                .special_ket(k)[2] = bk2
                fac = TWO*temp_ket_j(b1,b2)
                if (NOT fac.is_zero(.tol)) then
                !   .special_ket(k)[1] = bk1 
                !   .special_ket(k)[2] = bk2 
                  res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                end
              end !else if (bk2 == b2 AND bk1 == b1)
            else !  Case 2, NONE SPECIAL
              temp_ket_k => .ket(k)[:,:]
              do bj2 = 1,.n_bf
              do bk1 = 1,.n_bf
                fac = temp_ket_j(b1,bj2)*temp_ket_k(bk1,b2)+temp_ket_j(bk1,b2)*temp_ket_k(b1,bj2)
                if (NOT fac.is_zero(.tol)) then
                  .special_ket(k)[1] = bk1 
                  .special_ket(k)[2] = bj2
                  res = res - .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                end 
              end
              end
              .special_ket(k)[1] = 0 
              .special_ket(k)[2] = 0
            end ! if k special
          end !do kk
        end! if j special
     end !do jj
     reorder_ket.destroy
   end

   special_overlap_spin_ab_for(order_bra,order_ket,row_ind,col_ind,b1,b2) result (res) ::: recursive
   ! Special function which evaluates the overlap integrals matrix element
   ! specified by row_ind and col_ind between mean field (Sz=0)-geminals when .bra(dim) is a special bra
     row_ind,col_ind,b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: REAL
!     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     ENSURE(row_ind>0 AND row_ind<=.n_bas,"row_ind out of range")
     dim,bq1,bq2,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
!debug
!debug do i=1,dim
!debug  write(*,*)"i=",i
!debug j=order_ket(i)
!debug  stdout.show("order_ket-in",order_ket(i))
!debug  stdout.show("special_ket(j)-in",.special_ket(j).element)
!debug enddo
!debug
     
     if(.special_ket(q)[2]==0) then !not a special ket
       if(q==1) then
         DIE_IF(dim/=1,"order(dim>1)=1")
         temp_ket_q => .contraction_wfs(col_ind)[:,:]
       else
         temp_ket_q => .ket(q)[:,:]
       end
       do bq1=1,.n_bf
         .special_ket(q)[1]=bq1
         do bq2=1,.n_bf
           if (NOT temp_ket_q(bq1,bq2).is_zero) then
             .special_ket(q)[2]=bq2
             res=res+.special_overlap_spin_ab_for(order_bra,order_ket,row_ind,col_ind,b1,b2) &
                   *temp_ket_q(bq1,bq2) 
           end
         end
       end
       .special_ket(q)[1]=0
       .special_ket(q)[2]=0
       return
     end
! at this stage q is necessarily a special ket
     if(dim==1) then
       if (.special_ket(q)[1]==b1 AND .special_ket(q)[2]==b2 ) res = ONE
       return
     else ! q special ket and dim>1
       reorder_ket.create(dim-1)
       do jj = dim,1,-1
          reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
          reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
          j = order_ket(jj)
          if (.special_ket(j)[1]>0) then  !j special
            bj1 = .special_ket(j)[1]
            bj2 = .special_ket(j)[2]
! The simple case 1
            if (bj1==b1 AND bj2==b2 ) then
              res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)  ! <<
!debug
!debug write(*,*)"res11 in special_overlap_ab",res
!debug
            end
! Case 2
            do kk = dim,jj+1,-1
              k = order_ket(kk)
              DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
!debug              if(.special_ket(k)[1]==0) then
!debug                write(*,*) 'j special but not k'
!debug                stop
!debug              end
              bk1 = .special_ket(k)[1]
              bk2 = .special_ket(k)[2]
          !    reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
              reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
              reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
              reorder_ket(dim-1) = k 
!the following line was forgotten, the bug has been fixed in Nice 
              fac = ZERO
              if (bj1==b1 AND bk2==b2 AND (bj2/=b2 OR bk1/=b1)) then
                fac = ONE
              ! .special_ket(k)[1] = bk1 ! 
                .special_ket(k)[2] = bj2 
              else if((bj1/=b1 OR bk2/=b2) AND bj2==b2 AND bk1==b1) then
                fac = ONE
                .special_ket(k)[1] = bj1 ! 
              ! .special_ket(k)[2] = bk2 
              else if(bj1==b1 AND bk2==b2 AND bj2==b2 AND bk1==b1) then
                 fac=TWO 
              ! .special_ket(k)[1] = bk1  
              ! .special_ket(k)[2] = bk2 
              end
              res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res10 in special_overlap_ab",res
!debug
              .special_ket(k)[1] = bk1
              .special_ket(k)[2] = bk2
            end !do kk
          else ! j not special
            if(j==1)then
              temp_ket_j => .contraction_wfs(col_ind)[:,:]
            else
              temp_ket_j => .ket(j)[:,:]
            end
! Case 1
            fac = temp_ket_j(b1,b2)
            if (NOT fac.is_zero(.tol)) then
              res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac ! <<
!debug
!debug write(*,*)"res9 in special_overlap_ab",res
!debug
            end
! Case 2
            do kk = dim,jj+1,-1
              k = order_ket(kk)
!3-04-05            reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
              reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
              reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
              reorder_ket(dim-1) = k 
              if (.special_ket(k)[1]>0) then
! Case 2, k special
                bk1 = .special_ket(k)[1]
                bk2 = .special_ket(k)[2]
                if (bk2 == b2 AND bk1 /= b1) then
                  do bj2 = 1,.n_bf
                    fac = temp_ket_j(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res8 in special_overlap_ab",res
!debug
                    end
                  end
                  .special_ket(k)[2] = bk2
                else if (bk2 /= b2 AND bk1 == b1) then   
                  do bj1 = 1,.n_bf
                    fac = temp_ket_j(bj1,b2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bj1 
                   !  .special_ket(k)[2] = bk2
                      res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res7 in special_overlap_ab",res
!debug
                    end
                  end
                  .special_ket(k)[1] = bk1
                else if (bk2 == b2 AND bk1 == b1) then   
                  do bj1 = 1,b1-1
                    fac = temp_ket_j(bj1,b2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bj1 
                   !  .special_ket(k)[2] = bk2
                      res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res6 in special_overlap_ab",res
!debug
                    end
                  end
                  do bj1 = b1+1,.n_bf
                    fac = temp_ket_j(bj1,b2)
                    if (NOT fac.is_zero(.tol)) then
                      .special_ket(k)[1] = bj1 
                   !  .special_ket(k)[2] = bk2
                      res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res5 in special_overlap_ab",res
!debug
                    end
                  end
                  .special_ket(k)[1] = bk1
                  do bj2 = 1,b2-1
                    fac = temp_ket_j(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res4 in special_overlap_ab",res
!debug
                    end
                  end
                  do bj2 = b2+1,.n_bf
                    fac = temp_ket_j(b1,bj2)
                    if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                      .special_ket(k)[2] = bj2
                      res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res3 in special_overlap_ab",res
!debug
                    end
                  end
                  .special_ket(k)[2] = bk2
                  fac = TWO*temp_ket_j(b1,b2)
                  if (NOT fac.is_zero(.tol)) then
                  !   .special_ket(k)[1] = bk1 
                  !   .special_ket(k)[2] = bk2 
                    res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res2 in special_overlap_ab",res
!debug
                  end
                end !else if (bk2 == b2 AND bk1 == b1)
              else !  Case 2, NONE SPECIAL
                temp_ket_k => .ket(k)[:,:]
                do bj2 = 1,.n_bf
                do bk1 = 1,.n_bf
                  fac = temp_ket_j(b1,bj2)*temp_ket_k(bk1,b2)+temp_ket_j(bk1,b2)*temp_ket_k(b1,bj2)
                  if (NOT fac.is_zero(.tol)) then
                    .special_ket(k)[1] = bk1 
                    .special_ket(k)[2] = bj2
                    res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
!debug
!debug write(*,*)"res1 in special_overlap_ab",res
!debug
                  end 
                end
                end
                .special_ket(k)[1] = 0 
                .special_ket(k)[2] = 0
              end ! if k special
            end !do kk
          end! if j special
       end !do jj
       reorder_ket.destroy
     end ! q special ket and dim>1
!debug
!debug write(*,*)"res in special_overlap_ab",res
!debug
   end

   special_overlap_spin_bb_for(order_bra,order_ket,b1,b2) result (res)
   ! Special function which evaluates the overlap integrals between
   ! mean field (Sz=0)-geminals except .special_ket(order_ket(dim)) and the corresponding
   ! special bra which are (Sz=-1)-geminals.
!comments: should not be called if dim=1 because row_ind and col_ind would
! be already defined.

     b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(order_ket.dim>1,"dimension less than two")
     ENSURE(.special_ket(1)[2]==0,"ket already set for contr 1")
     ENSURE(.special_ket(order_ket(order_ket.dim))[2]>0,"no ket")
     col_ind :: INT
     dim,b3,b4,q,jj,bj1,bj2,j,kk,bk1,bk2,k,i :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
      
     ! test for identical spinorbitals
     b3 = .special_ket(q)[1]
     b4 = .special_ket(q)[2]
     if (b3==b4 OR b1==b2 ) return
      
     if(dim==1) then ! only Case 0
       if (b3==b1 AND b4==b2 ) res = ONE
       if (b3==b2 AND b4==b1 ) res = -ONE
       return
     else !dim>1
       reorder_ket.create(dim-1)
! Case 0
       reorder_ket(1:dim-1)   = order_ket(1:dim-1) 
       if (b3==b1 AND b4==b2 ) then
         res = res + .overlap_for(order_bra,reorder_ket) 
       else if (b3==b2 AND b4==b1 ) then
         res = res - .overlap_for(order_bra,reorder_ket)
       end
       do jj = dim-1,1,-1
         j = order_ket(jj)
         reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
         reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
         if (.special_ket(j)[1]>0) then  !j special
           DIE_IF(j==1,"1 special") 
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! The simple case 1
           if (bj2==b1 AND b4==b2 ) then
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b3
             res = res - .overlap_for(order_bra,reorder_ket) 
           else if (bj2==b2 AND b4==b1 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b3
             res = res + .overlap_for(order_bra,reorder_ket) 
           else if (bj2==b1 AND b3==b2 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b4
             res = res + .overlap_for(order_bra,reorder_ket) 
           else if (bj2==b2 AND b3==b1 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b4
             res = res - .overlap_for(order_bra,reorder_ket) 
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
!3-04-05             reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (bj2==b1 AND bk2==b2 ) then
               .special_ket(k)[1]=bj1
               .special_ket(k)[2]=b3
               .special_ket(q)[1]=bk1
               .special_ket(q)[2]=b4
               res = res + .overlap_for(order_bra,reorder_ket) 
             else if (bj2==b2 AND bk2==b1 ) then
               .special_ket(k)[1]=bj1
               .special_ket(k)[2]=b3
               .special_ket(q)[1]=bk1
               .special_ket(q)[2]=b4
               res = res - .overlap_for(order_bra,reorder_ket) 
             end
             .special_ket(k)[1]=bk1
             .special_ket(k)[2]=bk2
           end ! do kk 
         else !j not special  
           if(j==1)then
             do col_ind=1,.n_bas
!3-04-05               reorder_ket(1:jj-1)   = [ (order_ket(i), i=1,jj-1) ]
               reorder_ket(jj:dim-1) = [ (order_ket(i), i=jj+1,dim) ] !reorder(dim-1)=q
               temp_ket_j => .contraction_wfs(col_ind)[:,:]
    ! Case 1
               if (b4==b2 ) then
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b1)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=bj1
                     .special_ket(q)[2]=b3
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(order_bra,reorder_ket,col_ind)*fac
                   end
                 end
               else if (b4==b1 ) then        
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=bj1
                     .special_ket(q)[2]=b3
                     res(:,col_ind) = res(:,col_ind) &
                     + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               end
               if (b3==b2 ) then        
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b1)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=bj1
                     .special_ket(q)[2]=b4
                     res(:,col_ind) = res(:,col_ind) &
                     + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               else if (b3==b1 ) then        
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=bj1
                     .special_ket(q)[2]=b4
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               end
! Case 2
               do kk = dim-1,jj+1,-1
                 k = order_ket(kk)
!3-04-05                 reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
                 reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
                 reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
                 reorder_ket(dim-2) = k 
                 reorder_ket(dim-1) = q 
                 if (.special_ket(k)[1]>0) then ! Case 2, k special
                   bk1 = .special_ket(k)[1]
                   bk2 = .special_ket(k)[2]
                   if (bk2==b2 ) then
                     .special_ket(k)[2]=b3
                     .special_ket(q)[1]=bk1
                     .special_ket(q)[2]=b4
                     do bj1=1,.n_bf
                       fac = temp_ket_j(bj1,b1)
                       if (NOT fac.is_zero(.tol)) then
                         .special_ket(k)[1]=bj1
                         res(:,col_ind) = res(:,col_ind) &
                         + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                       end
                     end
                   else if (bk2==b1 ) then
                     .special_ket(k)[2]=b3
                     .special_ket(q)[1]=bk1
                     .special_ket(q)[2]=b4
                     do bj1=1,.n_bf
                       fac = temp_ket_j(bj1,b2)
                       if (NOT fac.is_zero(.tol)) then
                         .special_ket(k)[1]=bj1
                         res(:,col_ind) = res(:,col_ind) &
                         - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                       end
                     end
                   end
                   .special_ket(k)[1]=bk1
                   .special_ket(k)[2]=bk2
                 else !k not special
                   temp_ket_k => .ket(k)[:,:]
                   .special_ket(k)[2]=b3
                   .special_ket(q)[2]=b4
                   do bj1 = 1,.n_bf
                     .special_ket(k)[1]=bj1
                     do bk1 = 1,.n_bf
                       fac = temp_ket_j(bj1,b1)*temp_ket_k(bk1,b2)-temp_ket_j(bj1,b2)*temp_ket_k(bk1,b1)
                       if (NOT fac.is_zero(.tol)) then
                         .special_ket(q)[1]=bk1
                         res(:,col_ind) = res(:,col_ind) &
                         + .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                       end 
                     end
                   end
                   .special_ket(k)[1] = 0 
                   .special_ket(k)[2] = 0
                 end !k special
               end ! do kk 
             end ! do col_ind
           else ! j/=1
             temp_ket_j => .ket(j)[:,:]
  ! Case 1
             if (b4==b2 ) then
               do bj1=1,.n_bf
                 fac = temp_ket_j(bj1,b1)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=bj1
                   .special_ket(q)[2]=b3
                   res = res - .overlap_for(order_bra,reorder_ket)*fac
                 end
               end
             else if (b4==b1 ) then        
               do bj1=1,.n_bf
                 fac = temp_ket_j(bj1,b2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=bj1
                   .special_ket(q)[2]=b3
                   res = res + .overlap_for(order_bra,reorder_ket)*fac 
                 end
               end
             end
             if (b3==b2 ) then        
               do bj1=1,.n_bf
                 fac = temp_ket_j(bj1,b1)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=bj1
                   .special_ket(q)[2]=b4
                   res = res + .overlap_for(order_bra,reorder_ket)*fac 
                 end
               end
             else if (b3==b1 ) then        
               do bj1=1,.n_bf
                 fac = temp_ket_j(bj1,b2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=bj1
                   .special_ket(q)[2]=b4
                   res = res - .overlap_for(order_bra,reorder_ket)*fac 
                 end
               end
             end
! Case 2
             do kk = dim-1,jj+1,-1
               k = order_ket(kk)
!3-04-05               reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
               reorder_ket(dim-2) = k 
               reorder_ket(dim-1) = q 
               if (.special_ket(k)[1]>0) then ! Case 2, k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 if (bk2==b2 ) then
                   .special_ket(k)[2]=b3
                   .special_ket(q)[1]=bk1
                   .special_ket(q)[2]=b4
                   do bj1=1,.n_bf
                     fac = temp_ket_j(bj1,b1)
                     if (NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1]=bj1
                       res = res + .overlap_for(order_bra,reorder_ket)*fac 
                     end
                   end
                 else if (bk2==b1 ) then
                   .special_ket(k)[2]=b3
                   .special_ket(q)[1]=bk1
                   .special_ket(q)[2]=b4
                   do bj1=1,.n_bf
                     fac = temp_ket_j(bj1,b2)
                     if (NOT fac.is_zero(.tol)) then
                       .special_ket(k)[1]=bj1
                       res = res - .overlap_for(order_bra,reorder_ket)*fac 
                     end
                   end
                 end
                 .special_ket(k)[1]=bk1
                 .special_ket(k)[2]=bk2
               else !k not special
                 temp_ket_k => .ket(k)[:,:]
                 .special_ket(k)[2]=b3
                 .special_ket(q)[2]=b4
                 do bj1 = 1,.n_bf
                   .special_ket(k)[1]=bj1
                   do bk1 = 1,.n_bf
                     fac = temp_ket_j(bj1,b1)*temp_ket_k(bk1,b2)-temp_ket_j(bj1,b2)*temp_ket_k(bk1,b1)
                     if (NOT fac.is_zero(.tol)) then
                       .special_ket(q)[1]=bk1
                       res = res + .overlap_for(order_bra,reorder_ket) * fac ! <<
                     end 
                   end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
               end !k special
             end ! do kk 
           end ! j==1
         end !j special
       end ! do jj 
       .special_ket(q)[1]=b3
       .special_ket(q)[2]=b4
       reorder_ket.destroy
     end !dim>1
   end

   special_overlap_spin_bb_for(order_bra,order_ket,col_ind,b1,b2) result (res)
   ! Special function which evaluates the overlap integrals column vector
   ! specified by col_ind between mean field (Sz=0)-geminals except 
   ! .special_ket(order_ket(dim)) and the corresponding special bra which are (Sz=-1)-geminals.
!comments: should not be called if dim=1 because row_ind would be already defined.
     col_ind,b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: VEC{REAL}(.n_bas)
     ENSURE(order_ket.dim>1,"dimension less than two")
     ENSURE(.special_ket(order_ket(order_ket.dim))[2]>0,"no ket")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     dim,b3,b4,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
      
     ! test for identical spinorbitals
     b3 = .special_ket(q)[1]
     b4 = .special_ket(q)[2]
     if (b3==b4 OR b1==b2 ) return
      
     if(dim==1) then ! only Case 0
       if (b3==b1 AND b4==b2 ) res = ONE
       if (b3==b2 AND b4==b1 ) res = -ONE
       return
     else !dim>1
       reorder_ket.create(dim-1)
! Case 0
       reorder_ket(1:dim-1)   = order_ket(1:dim-1) 
       if (b3==b1 AND b4==b2 ) then
         res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
       else if (b3==b2 AND b4==b1 ) then
         res = res - .overlap_for(order_bra,reorder_ket,col_ind)
       end
       do jj = dim-1,1,-1
         reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
         reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
         j = order_ket(jj)
         DIE_IF(j==1,"ket of contraction 1 has already appeared") 
         if (.special_ket(j)[1]>0) then  !j special
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! The simple case 1
           if (bj2==b1 AND b4==b2 ) then
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b3
             res = res - .overlap_for(order_bra,reorder_ket,col_ind) 
           else if (bj2==b2 AND b4==b1 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b3
             res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
           else if (bj2==b1 AND b3==b2 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b4
             res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
           else if (bj2==b2 AND b3==b1 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b4
             res = res - .overlap_for(order_bra,reorder_ket,col_ind) 
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
!3-04-05             reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (bj2==b1 AND bk2==b2 ) then
               .special_ket(k)[1]=bj1
               .special_ket(k)[2]=b3
               .special_ket(q)[1]=bk1
               .special_ket(q)[2]=b4
               res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
             else if (bj2==b2 AND bk2==b1 ) then
               .special_ket(k)[1]=bj1
               .special_ket(k)[2]=b3
               .special_ket(q)[1]=bk1
               .special_ket(q)[2]=b4
               res = res - .overlap_for(order_bra,reorder_ket,col_ind) 
             end
             .special_ket(k)[1]=bk1
             .special_ket(k)[2]=bk2
           end ! do kk 
         else !j not special  
           temp_ket_j => .ket(j)[:,:]
! Case 1
           if (b4==b2 ) then
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b1)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b3
                 res = res - .overlap_for(order_bra,reorder_ket,col_ind)*fac
               end
             end
           else if (b4==b1 ) then        
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b3
                 res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
               end
             end
           end
           if (b3==b2 ) then        
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b1)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b4
                 res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
               end
             end
           else if (b3==b1 ) then        
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b4
                 res = res - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
               end
             end
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
!3-04-05             reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (.special_ket(k)[1]>0) then ! Case 2, k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if (bk2==b2 ) then
                 .special_ket(k)[2]=b3
                 .special_ket(q)[1]=bk1
                 .special_ket(q)[2]=b4
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b1)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1]=bj1
                     res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               else if (bk2==b1 ) then
                 .special_ket(k)[2]=b3
                 .special_ket(q)[1]=bk1
                 .special_ket(q)[2]=b4
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1]=bj1
                     res = res - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               end
               .special_ket(k)[1]=bk1
               .special_ket(k)[2]=bk2
             else !k not special
               temp_ket_k => .ket(k)[:,:]
               .special_ket(k)[2]=b3
               .special_ket(q)[2]=b4
               do bj1 = 1,.n_bf
                 .special_ket(k)[1]=bj1
                 do bk1 = 1,.n_bf
                   fac = temp_ket_j(bj1,b1)*temp_ket_k(bk1,b2)-temp_ket_j(bj1,b2)*temp_ket_k(bk1,b1)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=bk1
                     res = res + .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                   end 
                 end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
             end !k special
           end ! do kk 
         end !j special
       end ! do jj 
       .special_ket(q)[1]=b3
       .special_ket(q)[2]=b4
       reorder_ket.destroy
     end !dim>1
   end

   special_overlap_spin_bb_for(order_bra,order_ket,row_ind,col_ind,b1,b2) result (res)
   ! Special function which evaluates the overlap integrals between
   ! mean field (Sz=0)-geminals except .special_ket(dim) and the corresponding
   ! special bra which are (Sz=-1)-geminals.
     row_ind,col_ind,b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: REAL
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(.special_ket(order_ket(order_ket.dim))[2]>0,"no ket")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     ENSURE(row_ind>0 AND row_ind<=.n_bas,"row_ind out of range")
     dim,b3,b4,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
      
     ! test for identical spinorbitals
     b3 = .special_ket(q)[1]
     b4 = .special_ket(q)[2]
     if (b3==b4 OR b1==b2 ) return
      
     if(dim==1) then ! only Case 0
       if (b3==b1 AND b4==b2 ) res = ONE
       if (b3==b2 AND b4==b1 ) res = -ONE
       return
     else !dim>1
       reorder_ket.create(dim-1)
! Case 0
       reorder_ket(1:dim-1)   = order_ket(1:dim-1) 
       if (b3==b1 AND b4==b2 ) then
         res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
       else if (b3==b2 AND b4==b1 ) then
         res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)
       end
       do jj = dim-1,1,-1
         reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
         reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
         j = order_ket(jj)
         if (.special_ket(j)[1]>0) then  !j special
           DIE_IF(j==1,"1 special") 
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! The simple case 1
           if (bj2==b1 AND b4==b2 ) then
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b3
             res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           else if (bj2==b2 AND b4==b1 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b3
             res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           else if (bj2==b1 AND b3==b2 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b4
             res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           else if (bj2==b2 AND b3==b1 ) then        
             .special_ket(q)[1]=bj1
             .special_ket(q)[2]=b4
             res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
!3-04-05             reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (bj2==b1 AND bk2==b2 ) then
               .special_ket(k)[1]=bj1
               .special_ket(k)[2]=b3
               .special_ket(q)[1]=bk1
               .special_ket(q)[2]=b4
               res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
             else if (bj2==b2 AND bk2==b1 ) then
               .special_ket(k)[1]=bj1
               .special_ket(k)[2]=b3
               .special_ket(q)[1]=bk1
               .special_ket(q)[2]=b4
               res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
             end
             .special_ket(k)[1]=bk1
             .special_ket(k)[2]=bk2
           end ! do kk 
         else !j not special  
           if(j==1)then
             temp_ket_j => .contraction_wfs(col_ind)[:,:]
           else
             temp_ket_j => .ket(j)[:,:]
           end
! Case 1
           if (b4==b2 ) then
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b1)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b3
                 res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac
               end
             end
           else if (b4==b1 ) then        
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b3
                 res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
               end
             end
           end
           if (b3==b2 ) then        
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b1)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b4
                 res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
               end
             end
           else if (b3==b1 ) then        
             do bj1=1,.n_bf
               fac = temp_ket_j(bj1,b2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=bj1
                 .special_ket(q)[2]=b4
                 res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
               end
             end
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
!3-04-05             reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (.special_ket(k)[1]>0) then ! Case 2, k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if (bk2==b2 ) then
                 .special_ket(k)[2]=b3
                 .special_ket(q)[1]=bk1
                 .special_ket(q)[2]=b4
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b1)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1]=bj1
                     res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
                   end
                 end
               else if (bk2==b1 ) then
                 .special_ket(k)[2]=b3
                 .special_ket(q)[1]=bk1
                 .special_ket(q)[2]=b4
                 do bj1=1,.n_bf
                   fac = temp_ket_j(bj1,b2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1]=bj1
                     res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
                   end
                 end
               end
               .special_ket(k)[1]=bk1
               .special_ket(k)[2]=bk2
             else !k not special
               temp_ket_k => .ket(k)[:,:]
               .special_ket(k)[2]=b3
               .special_ket(q)[2]=b4
               do bj1 = 1,.n_bf
                 .special_ket(k)[1]=bj1
                 do bk1 = 1,.n_bf
                   fac = temp_ket_j(bj1,b1)*temp_ket_k(bk1,b2)-temp_ket_j(bj1,b2)*temp_ket_k(bk1,b1)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=bk1
                     res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   end 
                 end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
             end !k special
           end ! do kk 
         end !j special
       end ! do jj 
       .special_ket(q)[1]=b3
       .special_ket(q)[2]=b4
       reorder_ket.destroy
     end !dim>1
   end

   special_overlap_spin_aa_for(order_bra,order_ket,b1,b2) result (res)
   ! Special function which evaluates the overlap integrals between
   ! mean field (Sz=0)-geminals except .special_ket(dim) and the corresponding
   ! special bra which are (Sz=-1)-geminals.
!comments: should not be called if dim=1 because row_ind and col_ind would
! be already defined.
     b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(order_ket.dim>1,"dimension less than two")
     ENSURE(.special_ket(1)[2]==0,"ket already set for contr 1")
     ENSURE(.special_ket(order_ket(order_ket.dim))[2]>0,"no ket")
     col_ind :: INT
     dim,b3,b4,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
      
! test for identical spinorbitals
     b3 = .special_ket(q)[1]
     b4 = .special_ket(q)[2]
     if (b3==b4 OR b1==b2 ) return
      
     if(dim==1) then ! only Case 0
       if (b3==b1 AND b4==b2 ) res = ONE
       if (b3==b2 AND b4==b1 ) res = -ONE
       return
     else !dim>1
       reorder_ket.create(dim-1)
! Case 0
       reorder_ket(1:dim-1)   = order_ket(1:dim-1) 
       if (b3==b1 AND b4==b2 ) then
         res = res + .overlap_for(order_bra,reorder_ket) 
       else if (b3==b2 AND b4==b1 ) then
         res = res - .overlap_for(order_bra,reorder_ket)
       end
       do jj = dim-1,1,-1
         j = order_ket(jj)
         reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
         reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
         if (.special_ket(j)[1]>0) then  !j special
           DIE_IF(j==1,"1 special") 
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! The simple case 1
           if (bj1==b1 AND b4==b2 ) then
             .special_ket(q)[1]=b3
             .special_ket(q)[2]=bj2
             res = res - .overlap_for(order_bra,reorder_ket) 
           else if (bj1==b2 AND b4==b1 ) then        
             .special_ket(q)[1]=b3
             .special_ket(q)[2]=bj2
             res = res + .overlap_for(order_bra,reorder_ket) 
           else if (bj1==b1 AND b3==b2 ) then        
             .special_ket(q)[1]=b4
             .special_ket(q)[2]=bj2
             res = res + .overlap_for(order_bra,reorder_ket) 
           else if (bj1==b2 AND b3==b1 ) then        
             .special_ket(q)[1]=b4
             .special_ket(q)[2]=bj2
             res = res - .overlap_for(order_bra,reorder_ket) 
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
!3-04-05             reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (bj1==b1 AND bk1==b2 ) then
               .special_ket(k)[1]=b3
               .special_ket(k)[2]=bj2
               .special_ket(q)[1]=b4
               .special_ket(q)[2]=bk2
               res = res + .overlap_for(order_bra,reorder_ket) 
             else if (bj1==b2 AND bk1==b1 ) then
               .special_ket(k)[1]=b3
               .special_ket(k)[2]=bj2
               .special_ket(q)[1]=b4
               .special_ket(q)[2]=bk2
               res = res - .overlap_for(order_bra,reorder_ket) 
             end
             .special_ket(k)[1]=bk1
             .special_ket(k)[2]=bk2
           end ! do kk 
         else !j not special  
           if(j==1)then
             do col_ind =1,.n_bas
!3-04-05               reorder_ket(1:jj-1)   = [ (order_ket(i), i=1,jj-1) ]
               reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
               temp_ket_j => .contraction_wfs(col_ind)[:,:]
               if (b4==b2 ) then
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b1,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=b3
                     .special_ket(q)[2]=bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(order_bra,reorder_ket,col_ind)*fac
                   end
                 end
               else if (b4==b1 ) then        
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=b3
                     .special_ket(q)[2]=bj2
                     res(:,col_ind) = res(:,col_ind) &
                     + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               end
               if (b3==b2 ) then        
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b1,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=b4
                     .special_ket(q)[2]=bj2
                     res(:,col_ind) = res(:,col_ind) &
                     + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               else if (b3==b1 ) then        
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[1]=b4
                     .special_ket(q)[2]=bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               end
    ! Case 2
               do kk = dim-1,jj+1,-1
                 k = order_ket(kk)
!3-04-05                 reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
                 reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
                 reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
                 reorder_ket(dim-2) = k 
                 reorder_ket(dim-1) = q 
                 if (.special_ket(k)[1]>0) then ! Case 2, k special
                   bk1 = .special_ket(k)[1]
                   bk2 = .special_ket(k)[2]
                   if (bk1==b2 ) then
                     .special_ket(k)[1]=b3
                     .special_ket(q)[1]=b4
                     .special_ket(q)[2]=bk2
                     do bj2=1,.n_bf
                       fac = temp_ket_j(b1,bj2)
                       if (NOT fac.is_zero(.tol)) then
                         .special_ket(k)[2]=bj2
                         res(:,col_ind) = res(:,col_ind) &
                         + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                       end
                     end
                   else if (bk1==b1 ) then
                     .special_ket(k)[1]=b3
                     .special_ket(q)[1]=b4
                     .special_ket(q)[2]=bk2
                     do bj2=1,.n_bf
                       fac = temp_ket_j(b2,bj2)
                       if (NOT fac.is_zero(.tol)) then
                         .special_ket(k)[2]=bj2
                         res(:,col_ind) = res(:,col_ind) &
                         - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                       end
                     end
                   end
                   .special_ket(k)[1]=bk1
                   .special_ket(k)[2]=bk2
                 else !k not special
                   temp_ket_k => .ket(k)[:,:]
                   .special_ket(k)[1]=b3
                   .special_ket(q)[1]=b4
                   do bj2 = 1,.n_bf
                     .special_ket(k)[2]=bj2
                     do bk2 = 1,.n_bf
                       fac = temp_ket_j(b1,bj2)*temp_ket_k(b2,bk2)-temp_ket_j(b2,bj2)*temp_ket_k(b1,bk2)
                       if (NOT fac.is_zero(.tol)) then
                         .special_ket(q)[2]=bk2
                         res(:,col_ind) = res(:,col_ind) &
                         + .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                       end 
                     end
                   end
                   .special_ket(k)[1] = 0 
                   .special_ket(k)[2] = 0
                 end !k special
               end ! do kk 
             end ! do  col_ind
           else ! j/=1
             temp_ket_j => .ket(j)[:,:]
             if (b4==b2 ) then
               do bj2=1,.n_bf
                 fac = temp_ket_j(b1,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=b3
                   .special_ket(q)[2]=bj2
                   res = res - .overlap_for(order_bra,reorder_ket)*fac
                 end
               end
             else if (b4==b1 ) then        
               do bj2=1,.n_bf
                 fac = temp_ket_j(b2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=b3
                   .special_ket(q)[2]=bj2
                   res = res + .overlap_for(order_bra,reorder_ket)*fac 
                 end
               end
             end
             if (b3==b2 ) then        
               do bj2=1,.n_bf
                 fac = temp_ket_j(b1,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=b4
                   .special_ket(q)[2]=bj2
                   res = res + .overlap_for(order_bra,reorder_ket)*fac 
                 end
               end
             else if (b3==b1 ) then        
               do bj2=1,.n_bf
                 fac = temp_ket_j(b2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(q)[1]=b4
                   .special_ket(q)[2]=bj2
                   res = res - .overlap_for(order_bra,reorder_ket)*fac 
                 end
               end
             end
! Case 2
             do kk = dim-1,jj+1,-1
               k = order_ket(kk)
!3-04-05               reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
               reorder_ket(dim-2) = k 
               reorder_ket(dim-1) = q 
               if (.special_ket(k)[1]>0) then ! Case 2, k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 if (bk1==b2 ) then
                   .special_ket(k)[1]=b3
                   .special_ket(q)[1]=b4
                   .special_ket(q)[2]=bk2
                   do bj2=1,.n_bf
                     fac = temp_ket_j(b1,bj2)
                     if (NOT fac.is_zero(.tol)) then
                       .special_ket(k)[2]=bj2
                       res = res + .overlap_for(order_bra,reorder_ket)*fac 
                     end
                   end
                 else if (bk1==b1 ) then
                   .special_ket(k)[1]=b3
                   .special_ket(q)[1]=b4
                   .special_ket(q)[2]=bk2
                   do bj2=1,.n_bf
                     fac = temp_ket_j(b2,bj2)
                     if (NOT fac.is_zero(.tol)) then
                       .special_ket(k)[2]=bj2
                       res = res - .overlap_for(order_bra,reorder_ket)*fac 
                     end
                   end
                 end
                 .special_ket(k)[1]=bk1
                 .special_ket(k)[2]=bk2
               else !k not special
                 temp_ket_k => .ket(k)[:,:]
                 .special_ket(k)[1]=b3
                 .special_ket(q)[1]=b4
                 do bj2 = 1,.n_bf
                   .special_ket(k)[2]=bj2
                   do bk2 = 1,.n_bf
                     fac = temp_ket_j(b1,bj2)*temp_ket_k(b2,bk2)-temp_ket_j(b2,bj2)*temp_ket_k(b1,bk2)
                     if (NOT fac.is_zero(.tol)) then
                       .special_ket(q)[2]=bk2
                       res = res + .overlap_for(order_bra,reorder_ket) * fac ! <<
                     end 
                   end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
               end !k special
             end ! do kk 
           end !j==1
         end !j special
       end ! do jj 
       .special_ket(q)[1]=b3
       .special_ket(q)[2]=b4
       reorder_ket.destroy
     end !dim>1
   end

   special_overlap_spin_aa_for(order_bra,order_ket,col_ind,b1,b2) result (res)
   ! Special function which evaluates the overlap integrals column vector
   ! specified by col_ind between mean field (Sz=0)-geminals except 
   ! .special_ket(order_ket(dim)) and the corresponding special bra which are (Sz=1)-geminals.
!comments: should not be called if dim=1 because row_ind would be already defined.
     col_ind,b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: VEC{REAL}(.n_bas)
     ENSURE(order_ket.dim>1,"dimension less than two")
     ENSURE(.special_ket(order_ket(order_ket.dim))[2]>0,"no ket")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     dim,b3,b4,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
      
! test for identical spinorbitals
     b3 = .special_ket(q)[1]
     b4 = .special_ket(q)[2]
     if (b3==b4 OR b1==b2 ) return
      
     if(dim==1) then ! only Case 0
       if (b3==b1 AND b4==b2 ) res = ONE
       if (b3==b2 AND b4==b1 ) res = -ONE
       return
     else !dim>1
       reorder_ket.create(dim-1)
! Case 0
       reorder_ket(1:dim-1)   = order_ket(1:dim-1) 
       if (b3==b1 AND b4==b2 ) then
         res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
       else if (b3==b2 AND b4==b1 ) then
         res = res - .overlap_for(order_bra,reorder_ket,col_ind)
       end
       do jj = dim-1,1,-1
         reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
         reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
         j = order_ket(jj)
         DIE_IF(j==1,"ket for contraction 1 has already appeared") 
         if (.special_ket(j)[1]>0) then  !j special
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! The simple case 1
           if (bj1==b1 AND b4==b2 ) then
             .special_ket(q)[1]=b3
             .special_ket(q)[2]=bj2
             res = res - .overlap_for(order_bra,reorder_ket,col_ind) 
           else if (bj1==b2 AND b4==b1 ) then        
             .special_ket(q)[1]=b3
             .special_ket(q)[2]=bj2
             res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
           else if (bj1==b1 AND b3==b2 ) then        
             .special_ket(q)[1]=b4
             .special_ket(q)[2]=bj2
             res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
           else if (bj1==b2 AND b3==b1 ) then        
             .special_ket(q)[1]=b4
             .special_ket(q)[2]=bj2
             res = res - .overlap_for(order_bra,reorder_ket,col_ind) 
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
      !       reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (bj1==b1 AND bk1==b2 ) then
               .special_ket(k)[1]=b3
               .special_ket(k)[2]=bj2
               .special_ket(q)[1]=b4
               .special_ket(q)[2]=bk2
               res = res + .overlap_for(order_bra,reorder_ket,col_ind) 
             else if (bj1==b2 AND bk1==b1 ) then
               .special_ket(k)[1]=b3
               .special_ket(k)[2]=bj2
               .special_ket(q)[1]=b4
               .special_ket(q)[2]=bk2
               res = res - .overlap_for(order_bra,reorder_ket,col_ind) 
             end
             .special_ket(k)[1]=bk1
             .special_ket(k)[2]=bk2
           end ! do kk 
         else !j not special  
           temp_ket_j => .ket(j)[:,:]
           if (b4==b2 ) then
             do bj2=1,.n_bf
               fac = temp_ket_j(b1,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b3
                 .special_ket(q)[2]=bj2
                 res = res - .overlap_for(order_bra,reorder_ket,col_ind)*fac
               end
             end
           else if (b4==b1 ) then        
             do bj2=1,.n_bf
               fac = temp_ket_j(b2,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b3
                 .special_ket(q)[2]=bj2
                 res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
               end
             end
           end
           if (b3==b2 ) then        
             do bj2=1,.n_bf
               fac = temp_ket_j(b1,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bj2
                 res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
               end
             end
           else if (b3==b1 ) then        
             do bj2=1,.n_bf
               fac = temp_ket_j(b2,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bj2
                 res = res - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
               end
             end
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             !reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (.special_ket(k)[1]>0) then ! Case 2, k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if (bk1==b2 ) then
                 .special_ket(k)[1]=b3
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bk2
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b1,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[2]=bj2
                     res = res + .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               else if (bk1==b1 ) then
                 .special_ket(k)[1]=b3
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bk2
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[2]=bj2
                     res = res - .overlap_for(order_bra,reorder_ket,col_ind)*fac 
                   end
                 end
               end
               .special_ket(k)[1]=bk1
               .special_ket(k)[2]=bk2
             else !k not special
               temp_ket_k => .ket(k)[:,:]
               .special_ket(k)[1]=b3
               .special_ket(q)[1]=b4
               do bj2 = 1,.n_bf
                 .special_ket(k)[2]=bj2
                 do bk2 = 1,.n_bf
                   fac = temp_ket_j(b1,bj2)*temp_ket_k(b2,bk2)-temp_ket_j(b2,bj2)*temp_ket_k(b1,bk2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[2]=bk2
                     res = res + .overlap_for(order_bra,reorder_ket,col_ind) * fac ! <<
                   end 
                 end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
             end !k special
           end ! do kk 
         end !j special
       end ! do jj 
       .special_ket(q)[1]=b3
       .special_ket(q)[2]=b4
       reorder_ket.destroy
     end !dim>1
   end

   special_overlap_spin_aa_for(order_bra,order_ket,row_ind,col_ind,b1,b2) result (res)
   ! Special function which evaluates the overlap integrals between
   ! mean field (Sz=0)-geminals except .special_ket(dim) and the corresponding
   ! special bra which are (Sz=-1)-geminals.
     row_ind,col_ind,b1,b2 :: INT, IN
     order_bra, order_ket :: VEC{INT}, IN
     res :: REAL
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(.special_ket(order_ket(order_ket.dim))[2]>0,"no ket")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     ENSURE(row_ind>0 AND row_ind<=.n_bas,"row_ind out of range")
     dim,b3,b4,q,jj,bj1,bj2,j,kk,bk1,bk2,k :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*

     dim = order_ket.dim
     q=order_ket(dim)
     res = ZERO
      
! test for identical spinorbitals
     b3 = .special_ket(q)[1]
     b4 = .special_ket(q)[2]
     if (b3==b4 OR b1==b2 ) return
      
     if(dim==1) then ! only Case 0
       if (b3==b1 AND b4==b2 ) res = ONE
       if (b3==b2 AND b4==b1 ) res = -ONE
       return
     else !dim>1
       reorder_ket.create(dim-1)
! Case 0
       reorder_ket(1:dim-1)   = order_ket(1:dim-1) 
       if (b3==b1 AND b4==b2 ) then
         res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
       else if (b3==b2 AND b4==b1 ) then
         res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)
       end
       do jj = dim-1,1,-1
         reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
         reorder_ket(jj:dim-1) = order_ket(jj+1:dim)  !reorder(dim-1)=q
         j = order_ket(jj)
         if (.special_ket(j)[1]>0) then  !j special
           DIE_IF(j==1,"1 special") 
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! The simple case 1
           if (bj1==b1 AND b4==b2 ) then
             .special_ket(q)[1]=b3
             .special_ket(q)[2]=bj2
             res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           else if (bj1==b2 AND b4==b1 ) then        
             .special_ket(q)[1]=b3
             .special_ket(q)[2]=bj2
             res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           else if (bj1==b1 AND b3==b2 ) then        
             .special_ket(q)[1]=b4
             .special_ket(q)[2]=bj2
             res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           else if (bj1==b2 AND b3==b1 ) then        
             .special_ket(q)[1]=b4
             .special_ket(q)[2]=bj2
             res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k") 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
     !        reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (bj1==b1 AND bk1==b2 ) then
               .special_ket(k)[1]=b3
               .special_ket(k)[2]=bj2
               .special_ket(q)[1]=b4
               .special_ket(q)[2]=bk2
               res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
             else if (bj1==b2 AND bk1==b1 ) then
               .special_ket(k)[1]=b3
               .special_ket(k)[2]=bj2
               .special_ket(q)[1]=b4
               .special_ket(q)[2]=bk2
               res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind) 
             end
             .special_ket(k)[1]=bk1
             .special_ket(k)[2]=bk2
           end ! do kk 
         else !j not special  
           if(j==1)then
             temp_ket_j => .contraction_wfs(col_ind)[:,:]
           else
             temp_ket_j => .ket(j)[:,:]
           end
           if (b4==b2 ) then
             do bj2=1,.n_bf
               fac = temp_ket_j(b1,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b3
                 .special_ket(q)[2]=bj2
                 res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac
               end
             end
           else if (b4==b1 ) then        
             do bj2=1,.n_bf
               fac = temp_ket_j(b2,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b3
                 .special_ket(q)[2]=bj2
                 res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
               end
             end
           end
           if (b3==b2 ) then        
             do bj2=1,.n_bf
               fac = temp_ket_j(b1,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bj2
                 res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
               end
             end
           else if (b3==b1 ) then        
             do bj2=1,.n_bf
               fac = temp_ket_j(b2,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bj2
                 res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
               end
             end
           end
! Case 2
           do kk = dim-1,jj+1,-1
             k = order_ket(kk)
             !reorder_ket(1:jj-1) = [ (order_ket(i), i=1,jj-1) ]
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-3) = order_ket(kk+1:dim-1) 
             reorder_ket(dim-2) = k 
             reorder_ket(dim-1) = q 
             if (.special_ket(k)[1]>0) then ! Case 2, k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if (bk1==b2 ) then
                 .special_ket(k)[1]=b3
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bk2
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b1,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[2]=bj2
                     res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
                   end
                 end
               else if (bk1==b1 ) then
                 .special_ket(k)[1]=b3
                 .special_ket(q)[1]=b4
                 .special_ket(q)[2]=bk2
                 do bj2=1,.n_bf
                   fac = temp_ket_j(b2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[2]=bj2
                     res = res - .overlap_for(order_bra,reorder_ket,row_ind,col_ind)*fac 
                   end
                 end
               end
               .special_ket(k)[1]=bk1
               .special_ket(k)[2]=bk2
             else !k not special
               temp_ket_k => .ket(k)[:,:]
               .special_ket(k)[1]=b3
               .special_ket(q)[1]=b4
               do bj2 = 1,.n_bf
                 .special_ket(k)[2]=bj2
                 do bk2 = 1,.n_bf
                   fac = temp_ket_j(b1,bj2)*temp_ket_k(b2,bk2)-temp_ket_j(b2,bj2)*temp_ket_k(b1,bk2)
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(q)[2]=bk2
                     res = res + .overlap_for(order_bra,reorder_ket,row_ind,col_ind) * fac ! <<
                   end 
                 end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
             end !k special
           end ! do kk 
         end !j special
       end ! do jj 
       .special_ket(q)[1]=b3
       .special_ket(q)[2]=b4
       reorder_ket.destroy
     end !dim>1
   end

   overlap result (res)
   ! Evaluate the overlap matrix for a given geminal contraction
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.bra.dim==.ket.dim,"Bra and ket have different sizes!")
     i,row_ind,col_ind :: INT
     reorder_ket :: VEC{INT}*
     reorder_ket.create(.n_geminals)
     reorder_ket = [ (i, i=1,.n_geminals) ]
     res = .overlap_for(reorder_ket)
!debug     stdout.text("after overlap_for ")
!debug     do col_ind=1,.n_bas
!debug     do row_ind=1,col_ind
!debug       res(row_ind,col_ind)=.overlap_for(reorder_ket,row_ind,col_ind)
!debug       reorder_ket = [ (i, i=1,.n_geminals) ]
!debug     end
!debug     end
!debug     .put
     do col_ind=2,.n_bas
     do row_ind=1,col_ind-1
       res(col_ind,row_ind)=res(row_ind,col_ind)
     end
     end
     reorder_ket.destroy
   end

   overlap_for(order_ket) result (res) ::: recursive
   ! Standard recursive function which evaluates the overlap integrals matrix between
   ! mean field (Sz=0)-geminals (upper triangle only is evaluated)
!comments:
!special_ket are always created at the end so that if jj is a special ket,
!than kk>jj is also a special ket.
     order_ket :: VEC{INT}, IN
     res :: MAT{REAL}(.n_bas,.n_bas)
     ENSURE(.special_ket(1)[1]==0,".special_ket(1) already set")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     row_ind,col_ind :: INT
     jj,j,kk,k,dim,bq1,bj1,bj2,bk1,bk2 :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_bra_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_qb_jb :: MAT{REAL}*

     dim = order_ket.dim
     res = ZERO
      
!debug     stdout.text("before overlap_for ")
!debug     .put
!debug     stdout.show("dim=",dim)
!debug     do l=1,dim
!debug       stdout.show("l=",l)
!debug       stdout.show("order_ket(l)=",order_ket(l))
!debug     end
     if (dim==1) then ! only Case 1
       j = order_ket(1)
       DIE_IF(j/=1,"dim is 1 but j is not 1")
       do col_ind=1,.n_bas 
         temp_ket_j => .contraction_wfs(col_ind)[:,:]
         do row_ind=1,col_ind
           fac = sum(.contraction_wfs(row_ind)[:,:]*temp_ket_j)
           if (NOT fac.is_zero(.tol)) then
             res(row_ind,col_ind)=fac !permit to set to zero numbers below a threshold
           end
         end
       end
       nullify(temp_ket_j)
       return
     else ! dim > 1
       temp_bra_q => .bra(dim)[:,:]
       reorder_ket.create(dim-1)
       temp_qa_ja.create(.n_bf,.n_bf)
       temp_qb_jb.create(.n_bf,.n_bf)
       do jj = dim,1,-1
         j = order_ket(jj)
         if (j==1) then ! 1 not special
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do col_ind=1,.n_bas
             temp_ket_j => .contraction_wfs(col_ind)[:,:]
             do bj1=1,.n_bf
             do bq1=1,.n_bf
               temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
               temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
             end
             end
  ! Case 2
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               if (.special_ket(k)[1]>0) then ! k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 do bj1 = 1,bk1-1
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj1 = bk1+1,.n_bf
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj2 = 1,bk2-1
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 do bj2 = bk2+1,.n_bf
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res(:,col_ind) = res(:,col_ind) &
                   - .overlap_for(reorder_ket,col_ind) * fac ! <<
                 end
               else ! k not special
                 temp_ket_k => .ket(k)[:,:]
                 do bk2 = 1,.n_bf
                 do bj1 = 1,.n_bf
                   fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                     .special_ket(k)[2] = bk2
                     res(:,col_ind) = res(:,col_ind) &
                     - .overlap_for(reorder_ket,col_ind) * fac ! <<
                   end
                 end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
                 nullify(temp_ket_k)
               end  ! if (.special_ket(k)
             end !do kk
  ! Case 1
          !   reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_qb_jb.trace
             if (NOT fac.is_zero(.tol)) then
               res(:,col_ind) = res(:,col_ind) &
               + .overlap_for(reorder_ket,col_ind) * fac ! <<
             end
           end !do col_ind
           nullify(temp_ket_j)
         else ! j>1 
           if (.special_ket(j)[1]>0) then
             bj1 = .special_ket(j)[1]
             bj2 = .special_ket(j)[2]
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               DIE_IF(.special_ket(k)[1]==0,"j special but not k")
!debug              if(.special_ket(k)[1]==0) then
!debug     write(*,*) "j special but not k"
!debug     stdout.show("dim=",dim)
!debug     do l=1,dim
!debug       stdout.show("l=",l)
!debug       stdout.show("order_ket(l)=",order_ket(l))
!debug       stdout.show("special_ket(order_ket(l))-in",.special_ket(order_ket(l)).element)
!debug     end
!debug     stop
!debug     end
!assume special_ket's are also ordered at the end in the initial guess
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if(bj1/=bk1 OR bj2/=bk2) then
                 fac=temp_bra_q(bk1,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
                 fac=temp_bra_q(bj1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               else ! bj1==bk1 AND bj2==bk2
                 fac=TWO * temp_bra_q(bk1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket) * fac ! <<
                 end
               end ! bj1==bk1 AND bj2==bk2
             end !do kk
! Case 1
          !   reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_bra_q(bj1,bj2)
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_ket) * fac ! <<
             end
           else !j not special
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             temp_ket_j => .ket(j)[:,:]
             do bj1=1,.n_bf
             do bq1=1,.n_bf
               temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
               temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
             end
             end
! Case 2
             do kk = dim,jj+1,-1
               k = order_ket(kk)
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               if (.special_ket(k)[1]>0) then ! k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 do bj1 = 1,bk1-1
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_ket) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj1 = bk1+1,.n_bf
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_ket) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj2 = 1,bk2-1
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_ket) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 do bj2 = bk2+1,.n_bf
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_ket) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket) * fac ! <<
                 end
               else ! k not special
                 temp_ket_k => .ket(k)[:,:]
                 do bk2 = 1,.n_bf
                 do bj1 = 1,.n_bf
                   fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                     .special_ket(k)[2] = bk2
                     res = res - .overlap_for(reorder_ket) * fac ! <<
                   end
                 end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
                 nullify(temp_ket_k)
               end  ! if (.special_ket(k)
             end !do kk
! Case 1
         !    reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_qb_jb.trace
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_ket) * fac ! <<
             end
             nullify(temp_ket_j)
           end !j not special
         end !if(j==1 AND .special_ket(1)==0) else
       end  !do jj=dim,1,-1
     temp_qa_ja.destroy
     temp_qb_jb.destroy
     reorder_ket.destroy
     nullify(temp_bra_q)
     end ! if(dim==1)
     
   end

   overlap_for(order_ket,col_ind) result (res) ::: recursive
   ! Standard recursive function which evaluates the overlap integrals column
   ! vector specified by col_ind between mean field (Sz=0)-geminals 
   ! upper half only is evaluated.
!comments:
!special_ket are always created at the end so that if jj is a special ket,
!than kk>jj is also a special ket. 
     col_ind :: INT, IN
     order_ket :: VEC{INT}, IN
     res :: VEC{REAL}(.n_bas)
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     row_ind :: INT
     jj,j,kk,k,dim,bq1,bj1,bj2,bk1,bk2 :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_bra_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_qb_jb :: MAT{REAL}*

     dim = order_ket.dim
     res=ZERO

     if (dim==1) then ! only Case 1
       j = order_ket(1)
       DIE_IF(j==1,"ket of contraction 1 has already appeared")
       if (.special_ket(j)[1]>0) then             
         bj1 = .special_ket(j)[1]                 
         bj2 = .special_ket(j)[2]                
         do row_ind=1,col_ind
           fac = .contraction_wfs(row_ind)[bj1,bj2]
           if (NOT fac.is_zero(.tol)) then
             res(row_ind)=fac !permit to set to zero numbers below a threshold
           end
         end
       else 
         temp_ket_j => .ket(j)[:,:]
         do row_ind=1,col_ind
           fac = sum(.contraction_wfs(row_ind)[:,:]*temp_ket_j)
           if (NOT fac.is_zero(.tol)) then
             res(row_ind)=fac !permit to set to zero numbers below a threshold
           end
         end
         nullify(temp_ket_j)
       end
       return
     else ! dim > 1
       temp_bra_q => .bra(dim)[:,:]
       reorder_ket.create(dim-1)
       temp_qa_ja.create(.n_bf,.n_bf)
       temp_qb_jb.create(.n_bf,.n_bf)
       do jj = dim,1,-1
         j = order_ket(jj)
         DIE_IF(j==1,"ket of contraction 1 has already appeared")
         if (.special_ket(j)[1]>0) then
           bj1 = .special_ket(j)[1]
           bj2 = .special_ket(j)[2]
! Case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk)
             DIE_IF(.special_ket(k)[1]==0,"j special but not k")
!debug              if(.special_ket(k)[1]==0) then
!debug     write(*,*) "j special but not k"
!debug     stdout.show("dim=",dim)
!debug     do l=1,dim
!debug       stdout.show("l=",l)
!debug       stdout.show("order_ket(l)=",order_ket(l))
!debug       stdout.show("special_ket(order_ket(l))-in",.special_ket(order_ket(l)).element)
!debug     end
!debug     stop
!debug     end
!assume special_ket's are also ordered at the end in the initial guess
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) = k 
             bk1 = .special_ket(k)[1]
             bk2 = .special_ket(k)[2]
             if(bj1/=bk1 OR bj2/=bk2) then
               fac=temp_bra_q(bk1,bj2)
               if (NOT fac.is_zero(.tol)) then
                 .special_ket(k)[1] = bj1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                 .special_ket(k)[1] = bk1
               end
               fac=temp_bra_q(bj1,bk2)
               if (NOT fac.is_zero(.tol)) then
              !  .special_ket(k)[1] = bk1
                 .special_ket(k)[2] = bj2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                 .special_ket(k)[2] = bk2
               end
             else ! bj1==bk1 AND bj2==bk2
               fac=TWO * temp_bra_q(bk1,bk2)
               if (NOT fac.is_zero(.tol)) then
              !  .special_ket(k)[1] = bk1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
               end
             end ! bj1==bk1 AND bj2==bk2
           end !do kk
! Case 1
         !  reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
           fac = temp_bra_q(bj1,bj2)
           if (NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket,col_ind) * fac ! <<
           end
         else !j not special
           temp_ket_j => .ket(j)[:,:]
           do bj1=1,.n_bf
           do bq1=1,.n_bf
             temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
             temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
           end
           end
! Case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk)
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) = k 
             if (.special_ket(k)[1]>0) then ! k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               do bj1 = 1,bk1-1
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj1 = bk1+1,.n_bf
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj2 = 1,bk2-1
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               do bj2 = bk2+1,.n_bf
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
               if (NOT fac.is_zero(.tol)) then
               ! .special_ket(k)[1] = bk1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
               end
             else ! k not special
               temp_ket_k => .ket(k)[:,:]
               do bk2 = 1,.n_bf
               do bj1 = 1,.n_bf
                 fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,col_ind) * fac ! <<
                 end
               end
               end
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
               nullify(temp_ket_k)
             end  ! if (.special_ket(k)
           end !do kk
! Case 1
         !  reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
           fac = temp_qb_jb.trace
           if (NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket,col_ind) * fac ! <<
           end
           nullify(temp_ket_j)
         end !j not special
       end  !do jj=dim,1,-1
     temp_qa_ja.destroy
     temp_qb_jb.destroy
     reorder_ket.destroy
     nullify(temp_bra_q)
     end ! if(dim==1)
   end

   overlap_for(order_ket,row_ind,col_ind) result (res) ::: recursive
   ! Standard recursive function which evaluates the overlap integrals matrix
   ! element specified by col_ind and row_ind between mean field (Sz=0)-geminals 
!comments:
!special_ket are always created at the end so that if ii is a special ket,
!than jj>ii is also a special ket. This allows some simplifications but may be a
!bit limitative in the future.
     row_ind, col_ind :: INT, IN
     order_ket :: VEC{INT}, IN
     res :: REAL
     ENSURE(.special_ket(1)[1]==0,"1 special")
     ENSURE(order_ket.dim>0,"dim negative or zero")
     ENSURE(col_ind>0 AND col_ind<=.n_bas,"col_ind out of range")
     ENSURE(row_ind>0 AND row_ind<=.n_bas,"row_ind out of range")
     jj,j,kk,k,dim,bq1,bj1,bj2,bk1,bk2 :: INT
     reorder_ket :: VEC{INT}*
     fac :: REAL
     temp_bra_q :: MAT{REAL}*
     temp_ket_j :: MAT{REAL}*
     temp_ket_k :: MAT{REAL}*
     temp_qa_ja :: MAT{REAL}*
     temp_qb_jb :: MAT{REAL}*

     dim = order_ket.dim
     res = ZERO

     if (dim==1) then ! Only Case 1
       j = order_ket(1)
       if (.special_ket(j)[1]>0) then             
         bj1 = .special_ket(j)[1]                 
         bj2 = .special_ket(j)[2]                
         fac = .contraction_wfs(row_ind)[bj1,bj2]
       else if(.special_ket(j)[1]==0 AND j==1) then
         fac = sum(.contraction_wfs(row_ind)[:,:]*.contraction_wfs(col_ind)[:,:])
       else if (.special_ket(j)[1]==0 AND j/=1) then
         fac = sum(.contraction_wfs(row_ind)[:,:]*.ket(j)[:,:])
       end
       if (NOT fac.is_zero(.tol)) then
          res = fac
!debug       write(*,*)'coucou5',res
       end
       return
     else ! dim > 1
       temp_bra_q => .bra(dim)[:,:]
       reorder_ket.create(dim-1)
       temp_qa_ja.create(.n_bf,.n_bf)
       temp_qb_jb.create(.n_bf,.n_bf)
       do jj = dim,1,-1
         j = order_ket(jj)
!debug    write(*,*) 'jj,j',jj,j
         if (j==1 AND .special_ket(1)[1]==0) then ! 1 not special
           temp_ket_j => .contraction_wfs(col_ind)[:,:]
           do bj1=1,.n_bf
           do bq1=1,.n_bf
             temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
             temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
           end
           end
! Case 2
           reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
           do kk = dim,jj+1,-1
             k = order_ket(kk)
!debug    write(*,*) 'kk,k',kk,k
             reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
             reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
             reorder_ket(dim-1) = k 
             if (.special_ket(k)[1]>0) then ! k special
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               do bj1 = 1,bk1-1
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj1 = bk1+1,.n_bf
                 fac=temp_qb_jb(bk1,bj1)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[2] = bk2
                   .special_ket(k)[1] = bj1
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
               end
               do bj2 = 1,bk2-1
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               do bj2 = bk2+1,.n_bf
                 fac=temp_qa_ja(bk2,bj2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               end
               fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
               if (NOT fac.is_zero(.tol)) then
               ! .special_ket(k)[1] = bk1
               ! .special_ket(k)[2] = bk2
                 res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
               end
!debug                 write(*,*) 'case 2 kspecial',dim,res
             else ! k not special
               temp_ket_k => .ket(k)[:,:]
               do bk2 = 1,.n_bf
               do bj1 = 1,.n_bf
                 fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1 
                   .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                 end
               end
               end
!debug           write(*,*) 'case 2 k not special',dim,res
               .special_ket(k)[1] = 0 
               .special_ket(k)[2] = 0
               nullify(temp_ket_k)
             end  ! if (.special_ket(k)
           end !do kk
! Case 1
        !   reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
           reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
           fac = temp_qb_jb.trace
           if (NOT fac.is_zero(.tol)) then
             res = res + .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
           end
!debug      write(*,*) 'case 1 j=1 not special',dim,fac,res
           nullify(temp_ket_j)
         else ! j>1 or 1 special
           if (.special_ket(j)[1]>0) then
             bj1 = .special_ket(j)[1]
             bj2 = .special_ket(j)[2]
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
!debug    write(*,*) 'kk,k',kk,k
               DIE_IF(.special_ket(k)[1]==0,"j special but not k")
!debug              if(.special_ket(k)[1]==0) then
!debug     write(*,*) "j special but not k"
!debug     stdout.show("dim=",dim)
!debug     do l=1,dim
!debug       stdout.show("l=",l)
!debug       stdout.show("order_ket(l)=",order_ket(l))
!debug       stdout.show("special_ket(order_ket(l))-in",.special_ket(order_ket(l)).element)
!debug     end
!debug     stop
!debug     end
!assume special_ket's are also ordered at the end in the initial guess
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               bk1 = .special_ket(k)[1]
               bk2 = .special_ket(k)[2]
               if(bj1/=bk1 OR bj2/=bk2) then
                 fac=temp_bra_q(bk1,bj2)
                 if (NOT fac.is_zero(.tol)) then
                   .special_ket(k)[1] = bj1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[1] = bk1
                 end
                 fac=temp_bra_q(bj1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                   .special_ket(k)[2] = bj2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   .special_ket(k)[2] = bk2
                 end
               else ! bj1==bk1 AND bj2==bk2
   !res should be zero if any of the two equalities hold, then and the
   !expression simplified accordingly and testing suggested by Thierry
   !less necessary
                 fac=TWO * temp_bra_q(bk1,bk2)
                 if (NOT fac.is_zero(.tol)) then
                !  .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                 end
               end ! bj1==bk1 AND bj2==bk2
!debug      write(*,*) 'case 2 j et k special',dim,res
             end !do kk
! Case 1
            ! reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_bra_q(bj1,bj2)
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
             end
!debug      write(*,*) 'case 1 j special',dim,res
           else !j not special
             temp_ket_j => .ket(j)[:,:]
             do bj1=1,.n_bf
             do bq1=1,.n_bf
               temp_qa_ja(bq1,bj1)=sum(temp_bra_q(:,bq1)*temp_ket_j(:,bj1))
               temp_qb_jb(bq1,bj1)=sum(temp_bra_q(bq1,:)*temp_ket_j(bj1,:))
             end
             end
! Case 2
             reorder_ket(1:jj-1)   = order_ket(1:jj-1) 
             do kk = dim,jj+1,-1
               k = order_ket(kk)
!debug    write(*,*) 'kk,k',kk,k
               reorder_ket(jj:kk-2) = order_ket(jj+1:kk-1) 
               reorder_ket(kk-1:dim-2) = order_ket(kk+1:dim) 
               reorder_ket(dim-1) = k 
               if (.special_ket(k)[1]>0) then ! k special
                 bk1 = .special_ket(k)[1]
                 bk2 = .special_ket(k)[2]
                 do bj1 = 1,bk1-1
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj1 = bk1+1,.n_bf
                   fac=temp_qb_jb(bk1,bj1)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[2] = bk2
                     .special_ket(k)[1] = bj1
                     res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[1] = bk1
                   end
                 end
                 do bj2 = 1,bk2-1
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 do bj2 = bk2+1,.n_bf
                   fac=temp_qa_ja(bk2,bj2)
                   if (NOT fac.is_zero(.tol)) then
                   ! .special_ket(k)[1] = bk1
                     .special_ket(k)[2] = bj2
                     res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                     .special_ket(k)[2] = bk2
                   end
                 end
                 fac=temp_qb_jb(bk1,bk1)+temp_qa_ja(bk2,bk2)
                 if (NOT fac.is_zero(.tol)) then
                 ! .special_ket(k)[1] = bk1
                 ! .special_ket(k)[2] = bk2
                   res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                 end
!debug      write(*,*) 'case 2 k  special',dim,res
               else ! k not special
                 temp_ket_k => .ket(k)[:,:]
                 do bk2 = 1,.n_bf
                 do bj1 = 1,.n_bf
                   fac = sum(temp_qb_jb(:,bj1)*temp_ket_k(:,bk2))+sum(temp_qa_ja(:,bk2)*temp_ket_k(bj1,:))
                   if (NOT fac.is_zero(.tol)) then
                     .special_ket(k)[1] = bj1 
                     .special_ket(k)[2] = bk2
                     res = res - .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
                   end
                 end
                 end
                 .special_ket(k)[1] = 0 
                 .special_ket(k)[2] = 0
                 nullify(temp_ket_k)
               end  ! if (.special_ket(k)
!debug      write(*,*) 'case 2 k not special',dim,res
             end !do kk
! Case 1
          !   reorder_ket(1:jj-1)   = [ (order_ket(l), l=1,jj-1) ]
             reorder_ket(jj:dim-1) = order_ket(jj+1:dim) 
             fac = temp_qb_jb.trace
!debug      write(*,*) 'avant'
!debug      write(*,*) 'case 1 j not special',dim,fac,res
             if (NOT fac.is_zero(.tol)) then
               res = res + .overlap_for(reorder_ket,row_ind,col_ind) * fac ! <<
             end
!debug      write(*,*) 'apres'
!debug      write(*,*) 'case 1 j not special',dim,fac,res
             nullify(temp_ket_j)
           end !j not special
         end !if(j==1 AND .special_ket(1)==0) else
       end  !do jj=dim,1,-1
       temp_qa_ja.destroy
       temp_qb_jb.destroy
       reorder_ket.destroy
       nullify(temp_bra_q)
     end ! if(dim==1)
   end

!  ====================
!  geminal MFCI methods
!  ====================

   do_hamiltonian(print_hamiltonian)
   ! Evaluate the hamiltonian in a geminal induced basis set
   ! built over orthonormal orbitals, and  print it if print_hamiltonian is true.
     print_hamiltonian :: BIN, optional, IN
     !res :: MAT{REAL}(.n_bas,.n_bas)
     res :: MAT{REAL}*
!     eigenvalues :: VEC{REAL}* 
!     R :: MAT{REAL}* 
     print_default :: BIN
     print_default = FALSE
     if (present(print_hamiltonian)) print_default = print_hamiltonian
     res.create(.n_bas,.n_bas)
     res = .hamiltonian
     if(print_default) then
       stdout.text(" ")
       stdout.text("The Hamiltonian is ")
       stdout.put(res)
     end
!     eigenvalues.create(.n_bas) 
!     R.create(.n_bas,.n_bas) 
!     res.solve_eigenproblem(eigenvalues,R) 
     stdout.text(" ")
!     stdout.text("eigenvalues") 
!     stdout.put(eigenvalues) 
!     eigenvalues.destroy 
!     R.destroy 
!     res.destroy 
   end

   do_overlap
   ! Evaluate the 1-electron overlap integrals in a geminal induced basis set
   ! built over orthonormal orbitals and print the result
      res :: MAT{REAL}(.n_bas,.n_bas)
      res = .overlap
      stdout.text(" ")
      stdout.text("The overlap matrix is ")
      stdout.put(res)
   end

   do_step_0(use_brillouin,print_hamiltonian,truncation_threshold,do_electric_dipole) 
   ! implement step 0 of geminal scf
     use_brillouin :: BIN, IN
     print_hamiltonian :: BIN, IN
     truncation_threshold :: REAL, IN
     do_electric_dipole :: BIN, IN
     ham :: MAT{REAL}*
     indices :: VEC{INT}*
     increasing_vec :: VEC{MAT_{REAL}}*
     increasing_values :: VEC{REAL}*
    ! j,k :: INT
     j :: INT
     n_nonzero,n_total :: INT
     n_bas,n_geminals,n_bf :: INT
     eigenvec :: MAT{REAL}*
     new_wfs :: VEC{MAT_{REAL}}*
     n_geminals=.n_geminals
     n_bf=.n_bf
   ! .put
     stdout.text(" ")
     n_total=.n_bas
     n_nonzero=n_total-.n_dependent
     if(use_brillouin) then
       n_bas=n_nonzero-n_bf+n_geminals 
     else
       n_bas=n_nonzero
     end
     .n_bas=n_bas
     ham.create(n_bas,n_bas)
     ham=ZERO
     ham = .hamiltonian
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("The Hamiltonian is ")
       stdout.text(" ")
       stdout.put(ham)
       stdout.text(" ")
     end
     eigenvec.create(n_bas,n_bas)
     ham.solve_symmetric_eigenproblem(.contraction_energies(1:n_bas),eigenvec) 
     ham.destroy 
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("eigenvectors") 
       stdout.text(" ")
       stdout.put(eigenvec) 
       stdout.text(" ")
     end
     new_wfs.create(n_bas)
     do j=1,n_bas
       new_wfs(j).element.create(n_bf,n_bf)
     end
     new_wfs.to_product_of(eigenvec,.contraction_wfs(1:n_bas),TRUE)
     eigenvec.destroy 
     do j=1,n_bas
       .contraction_wfs(j).element=new_wfs(j).element
     end
     new_wfs.destroy 
     if(do_electric_dipole) then
       .make_gs_electric_dipole
     end
     if(use_brillouin) then
       .n_bas=n_nonzero
       do j=n_nonzero-n_bf+n_geminals+1,n_nonzero
         .contraction_energies(j)=.hamiltonian(j,j)
       end
     end
     .contraction_energies=.contraction_energies+.nuclear_repulsion_energy
!sorting eigenvalues and eigenvectors
     indices.create(n_total)
     .contraction_energies.quick_sort(indices)
     increasing_vec.create(n_total)
     increasing_values.create(n_total)
     do j=1,n_total
       increasing_vec(j).element.create(n_bf,n_bf)
       increasing_vec(j).element = .contraction_wfs(indices(j)).element
       increasing_values(j) = .contraction_energies(indices(j))
     end
     indices.destroy
     do j=1,n_total
       .contraction_wfs(j).element=increasing_vec(j).element
     end
     .contraction_energies=increasing_values
     increasing_vec.destroy 
     increasing_values.destroy 
!printing eigenvalues and eigenvectors
     stdout.text(" ")
     stdout.show("first eigenvalue = ",.contraction_energies(1),12)
     stdout.text(" ")
     stdout.text("Active function energies (in Hartree)") 
     stdout.text(" ")
     stdout.put(.contraction_energies) 
     stdout.text(" ")
     if(truncation_threshold==ZERO) then
       .n_bas=n_total
     else
       stdout.show("truncation threshold for this step = ",truncation_threshold,12)
       .n_bas=maxloc(.contraction_energies,1,mask= &
         .contraction_energies < truncation_threshold)
     end
     stdout.show("number of states saved at this step",.n_bas)
     stdout.show("the tolerance was = ",.tol,12)
     stdout.text(" ")
  !   .put_max_bas
     .put_wfs
     .put_ground_state
   end

   remove_dependencies(orthogonality_type,print_hamiltonian) 
   ! remove linear dependencies in the contraction basis set
   ! take advantage of the possible truncation of the basis set
     orthogonality_type :: STR, IN
     print_hamiltonian :: BIN, IN
     word :: STR
     i,j,k :: INT
     n_bas,n_bf :: INT
     ov :: MAT{REAL}*
     norms :: VEC{REAL}*
     keep,int_vec :: VEC{MAT_{REAL}}*
     RDM,eigenvectors :: MAT{REAL}*
     order_ket :: VEC{INT}*
     old_dim,new_dim :: INT
     n_geminals :: INT
     n_singlet :: INT
     .get_wfs
     n_bf=.n_bf
     n_singlet=n_bf*(n_bf+1)/2
     n_bas=.n_bas
     n_geminals=.n_geminals
     if(n_bas==1) then 
       stdout.text(" ")
       stdout.text("n_bas=1, just normalizes")
       ov.create(n_bas,n_bas)
       ov= .overlap
       if(print_hamiltonian) then
         stdout.text("The overlap matrix is ")
         stdout.text(" ")
         stdout.put(ov)
         stdout.text(" ")
       end
       .contraction_wfs(1).element=.contraction_wfs(1).element/dsqrt(ov(1,1)) 
       ov.destroy 
       .put_max_bas
       .put_wfs
       return
     end
     keep.create(1,n_bas)
     do i=1,n_bas
       keep(i).element.create(n_bf,n_bf)
       keep(i).element=.contraction_wfs(i).element
     end
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("before orthonomalise ")
     ! .put
     end
     word = orthogonality_type
     word.to_lower_case
     select case (word)
       case ("one_orthogonality     ")
       case ("sp_two_orthogonality  ")
         stdout.text(" ")
         stdout.text("use two_orthogonality with respect to each spectator geminal")
         stdout.text("and each pair of spectator geminal product")
         stdout.text(" ")
         old_dim=n_geminals-1
         int_vec.create(old_dim)
         do k=1,old_dim
           int_vec(k).element.create(n_bf,n_bf)
           int_vec(k).element=.bra(k+1).element
         end
         order_ket.create(2)
         do i=2,n_geminals-1
           order_ket(1)=i
           do j=i+1,n_geminals
             order_ket(2)=j
             RDM.create(n_singlet,n_singlet)
             .make_2RDM_singlet(order_ket,RDM)
             RDM.internal_vectors(eigenvectors,.ig_tol)
             RDM.destroy
             if(print_hamiltonian) then
               stdout.text(" ")
               stdout.text("internal eigenvectors ")
               stdout.text(" ")
               stdout.put(transpose(eigenvectors))
             end
             new_dim=eigenvectors.dim1+old_dim
             int_vec.expand(new_dim)
             eigenvectors.unflatten(int_vec(old_dim+1:new_dim))
             old_dim=new_dim
             eigenvectors.destroy
           end
         end
         .contraction_wfs(2:).weak_two_orthonormalise(int_vec)
         int_vec.destroy
         order_ket.destroy
         if(print_hamiltonian) then
           stdout.text(" ")
           stdout.text("after two_orthonormalise ")
           stdout.text(" ")
         ! .put
         end
       case ("sf_two_orthogonality  ")
         stdout.text(" ")
         stdout.text("use two_orthogonality with respect to each spectator geminal")
         stdout.text(" ")
         .contraction_wfs(2:).weak_two_orthonormalise(.bra(2:))
       case  default 
         stdout.text(" ")
         stdout.text("no orthogonality enforced")
         stdout.text(" ")
     end
     ov.create(n_bas,n_bas)
     ov= .overlap
     if(print_hamiltonian) then
       stdout.text("The overlap matrix is ")
       stdout.text(" ")
       stdout.put(ov)
       stdout.text(" ")
     end
     norms.create(n_bas)
     .contraction_wfs.schmidt_orthonormalise(ov,keep,norms,.n_dependent,.ld_tol)
     !keep not necessary in fact if no orthogonality enforced
     ov.destroy 
     keep.destroy 
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("The scaling values are ")
       stdout.text(" ")
       stdout.put(norms)
       stdout.text(" ")
     end
     norms.destroy 
     .put_max_bas
     .put_wfs
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("after sorting ")
     ! .put
     end
     .n_bas=.n_bas-.n_dependent !supposed set as such by calling routine
     if(print_hamiltonian) then
       ov.create(.n_bas,.n_bas)
       ov= .overlap
       stdout.text(" ")
       stdout.show("is unit matrix =",ov.is_unit_matrix(TOL(6)))
       stdout.text(" ")
       ov.destroy
       stdout.show("n_dependent =",.n_dependent)
     end
   end

   remove_triplet_dependencies(print_hamiltonian) ::: leaky 
   ! remove linear dependencies in the contraction basis set
   !  leaky because of the set_active_triplet_defaults
     print_hamiltonian :: BIN, IN
     i,n_bas :: INT
     ov :: MAT{REAL}*
     eigenvalues :: VEC{REAL}*
     orthovec :: MAT{REAL}*
   !  unorthovec :: MAT{REAL}*
     .set_active_triplet_defaults
     n_bas=.n_bas
     ov.create(n_bas,n_bas)
     ov= .overlap
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("before orthonomalise ")
     ! .put
       stdout.text("The overlap matrix is ")
       stdout.text(" ")
       stdout.put(ov)
       stdout.text(" ")
     end
     eigenvalues.create(n_bas)
     eigenvalues=ZERO
     orthovec.create(n_bas,n_bas)
     orthovec=ZERO
     ov.solve_symmetric_eigenproblem(eigenvalues,orthovec) 
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("The overlap matrix eigenvalues are ")
       stdout.text(" ")
       stdout.put(eigenvalues)
       stdout.text(" ")
     end
!     unorthovec.create(n_bas,n_bas)
!     .contraction_wfs.flatten_triplet(unorthovec) 
     orthovec=transpose(orthovec)
     do i=1,orthovec.dim1
       orthovec(i,:)=orthovec(i,:)/sqrt(eigenvalues(i))
     end
     orthovec.unflatten_triplets(.contraction_wfs) 
     orthovec.destroy
     eigenvalues.destroy 
     if(print_hamiltonian) then
       stdout.text(" ")
       stdout.text("after sorting ")
     ! .put
!     .n_bas=.n_bas-.n_dependent
       ov= .overlap
       stdout.text(" ")
       stdout.show("is unit matrix =",ov.is_unit_matrix(TOL(6)))
!       stdout.text("Check: overlap matrix is ")
!       stdout.text(" ")
!       stdout.put(ov)
       stdout.text(" ")
     end
     ov.destroy
   end

   make_2RDM_singlet(order_ket,res)
   !calculate the 2nd order RDM  in a singlet basis set
     order_ket :: VEC{INT}, IN
     res :: MAT{REAL}(.n_bf*(.n_bf+1)/2,.n_bf*(.n_bf+1)/2)

   ENSURE(order_ket.dim==2,"no product for >2 gems")

     int1,int2 :: MAT{REAL}(.n_bf,.n_bf)
     b1,b2,b3,b4 :: INT
     count1,count2 :: INT
     n_bf :: INT

     n_bf=.n_bf
     count1=0
     count2=0
     do b1=1,n_bf
       count1=count1+1
       int1= .interior_product_by_geminal_ab_singlet(order_ket,b1,b1)
       count2=0
       do b3=1,n_bf
         count2=count2+1
         int2= .interior_product_by_geminal_ab_singlet(order_ket,b3,b3)
         res(count1,count2)=sum(int1*int2)
       end
       do b3=2,n_bf
         do b4=1,b3-1
           count2=count2+1
           int2= .interior_product_by_geminal_ab_singlet(order_ket,b3,b4)
           res(count1,count2)=sum(int1*int2)
         end
       end
     end
     do b1=2,n_bf
       do b2=1,b1-1
         count1=count1+1
         int1= .interior_product_by_geminal_ab_singlet(order_ket,b1,b2)
         count2=0
         do b3=1,n_bf
           count2=count2+1
           int2= .interior_product_by_geminal_ab_singlet(order_ket,b3,b3)
           res(count1,count2)=sum(int1*int2)
         end
         do b3=2,n_bf
           do b4=1,b3-1
             count2=count2+1
             int2= .interior_product_by_geminal_ab_singlet(order_ket,b3,b4)
             res(count1,count2)=sum(int1*int2)
           end
         end
       end
     end
     DIE_IF(count1/=n_bf*(n_bf+1)/2,"count1 not equal to n_bf*(n_bf+1)/2")
     DIE_IF(count2/=n_bf*(n_bf+1)/2,"count2 not equal to n_bf*(n_bf+1)/2")
   end

   interior_product_by_special_geminal_ab(order_ket,b1,b2) result(res) 
   ! Evaluate the interior product of the product of two geminals
   ! by an alpha-beta special geminal b1, b2 and put the result in res
     res :: MAT{REAL}(.n_bf,.n_bf)
     order_ket :: VEC{INT}, IN
     b1,b2 :: INT, IN
     ENSURE(order_ket.dim==2,"no product for >2 gems")
     g1,g2 :: MAT{REAL}*
     n_bf :: INT
     b3,b4 :: INT
     n_bf=.n_bf
     g1=>.ket(order_ket(1)).element
     g2=>.ket(order_ket(2)).element
     res=ZERO
     res=res+g1(b1,b2)*g2
     res=res+g2(b1,b2)*g1
     do b3=1,n_bf
       do b4=1,n_bf
         res(b3,b4)=res(b3,b4)-g1(b1,b4)*g2(b3,b2)-g2(b1,b4)*g1(b3,b2)
       end
     end
     nullify(g1)
     nullify(g2)
   end

   interior_product_by_geminal_ab_singlet(order_ket,b1,b2) result(res) 
   ! Evaluate the interior product of the product of two singlet geminals
   ! by an alpha-beta normalized singlet geminal b1, b2 and put the result in res
     res :: MAT{REAL}(.n_bf,.n_bf)
     order_ket :: VEC{INT}, IN
     b1,b2 :: INT, IN
     ENSURE(order_ket.dim==2,"no product for >2 gems")
     g1,g2 :: MAT{REAL}*
     n_bf :: INT
     b3,b4 :: INT
     n_bf=.n_bf
     g1=>.ket(order_ket(1)).element
     g2=>.ket(order_ket(2)).element
     res=ZERO
     if(b1==b2) then
       res=res+g1(b1,b1)*g2
       res=res+g2(b1,b1)*g1
       do b3=1,n_bf
         res(b3,b3)=res(b3,b3)-g1(b1,b3)*g2(b3,b1)-g2(b1,b3)*g1(b3,b1)
         do b4=1,b3-1
           res(b3,b4)=res(b3,b4)-g1(b1,b4)*g2(b3,b1)-g2(b1,b4)*g1(b3,b1)
           res(b4,b3)=res(b3,b4)
         end
       end
     else
     !  res=res+(g1(b1,b2)*g2+g1(b2,b1)*g2+g2(b1,b2)*g1+g2(b2,b1)*g1)/sqrt(TWO)
       res=res+(g1(b1,b2)*g2+g2(b1,b2)*g1)*sqrt(TWO)
       do b3=1,n_bf
         !res(b3,b3)=res(b3,b3)-(g1(b1,b3)*g2(b3,b2)+g1(b2,b3)*g2(b3,b1)+ &
         !g2(b1,b3)*g1(b3,b2)+g2(b2,b3)*g1(b3,b1))/sqrt(TWO)
         res(b3,b3)=res(b3,b3)-(g1(b1,b3)*g2(b3,b2)+g1(b2,b3)*g2(b3,b1))*sqrt(TWO)
         do b4=1,b3-1
           res(b3,b4)=res(b3,b4)-(g1(b1,b4)*g2(b3,b2)+g1(b2,b4)*g2(b3,b1)+ &
           g2(b1,b4)*g1(b3,b2)+g2(b2,b4)*g1(b3,b1))/sqrt(TWO)
           res(b4,b3)=res(b3,b4)
         end
       end
     end
     nullify(g1)
     nullify(g2)
   end

   make_gs_electric_dipole 
   ! make ground state electric dipole moment for geminal product
   ! function
     dip :: MAT{REAL}*
     n_bas :: INT
     n_bas=.n_bas
     .n_bas=1
     dip.create(1,1)
     dip=ZERO
     dip=.electric_dipole_x+.nuclear_electric_dipole(1)
     stdout.text(" ")
     stdout.show("The electric dipole x-component is (in a.u.):",dip(1,1))
     stdout.text(" ")
     stdout.show("The electric dipole x-component is (in Debye):",dip(1,1).to_units("debye"))
     stdout.text(" ")
     dip=ZERO
     dip=.electric_dipole_y+.nuclear_electric_dipole(2)
     stdout.text(" ")
     stdout.show("The electric dipole y-component is (in a.u.):",dip(1,1))
     stdout.text(" ")
     stdout.show("The electric dipole y-component is (in Debye):",dip(1,1).to_units("debye"))
     stdout.text(" ")
     dip=ZERO
     dip=.electric_dipole_z+.nuclear_electric_dipole(3)
     stdout.text(" ")
     stdout.show("The electric dipole z-component is (in a.u.):",dip(1,1))
     stdout.text(" ")
     stdout.show("The electric dipole z-component is (in Debye):",dip(1,1).to_units("debye"))
     stdout.text(" ")
     dip.destroy 
     .n_bas=n_bas
   end

end
