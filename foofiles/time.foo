!---------------------------------------------------------------------------
!
! Time: timing routines
!
! This module works with either CPU seconds (for short times) or with
! Julian Days/Hours/Minutes/Seconds/Milliseconds (a so-called 5-time).
! 5-times are based on date_and_time, CPU seconds based on cpu_time.
!
! There are stopwatch routines, and time output strings.
!
! Copyright (C) Daniel Grimwood, 1998
! Copyright (C) Dylam Jayatilaka, 2007
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module TIME

#ifdef MPI
  USE mpi
#endif

   implicit none

   std_time :: TIME, public

contains

! ==========
! Essentials
! ==========

   current_time8 result(time) ::: selfless
   ! Returns current time as a 8-vector from date_and_time
      time :: VEC{INT}(8)

      ! Send time from processor 0
      time = 0
      if (IO_IS_ALLOWED) then
      call date_and_time(values=time)
      end
      PARALLEL_BROADCAST(time,tonto.master_processor)

   end

   current_time5 result (res) ::: selfless
   ! Returns current time as a 5-vector, using Julian days
      res :: VEC{INT}(5)

      time :: VEC{INT}(8)
      y,m,d,j :: INT

      time = ::current_time8()

      y = time(1)
      m = time(2)
      d = time(3)

      ::to_julian_day(j,d,m,y)

      res(1) = j       ! Julian day
      res(2) = time(5) ! hour
      res(3) = time(6) ! minute
      res(4) = time(7) ! second
      res(5) = time(8) ! millisecond

   end

   current_cpu_time result (res) ::: selfless
   ! Return the current cpu_time.
      res :: REAL

      time :: REAL

      ! Get the CPU time
      time = ZERO
      if (IO_IS_ALLOWED) then
      call cpu_time(time)
      end
      PARALLEL_BROADCAST(time,tonto.master_processor)

      res = time

   end


! ============
! Current date
! ============

   current_date_YMD_str result (res) ::: selfless
   ! Return the date as a YYYY-MM-DD string
      res :: STR

      d,m,y :: INT

      ::get_current_date_DMY(d,m,y)

      res = trim(y.to_str) //"-"// &
            trim(m.to_str) //"-"// &
            trim(d.to_str)

   end

   current_date_DMY_str result (res) ::: selfless
   ! Return the date as a DD-MM-YYYY string
      res :: STR

      d,m,y :: INT

      ::get_current_date_DMY(d,m,y)

      res = trim(d.to_str) //"-"// &
            trim(m.to_str) //"-"// &
            trim(y.to_str)

   end

   get_current_date_DMY(d,m,y) ::: selfless, private
   ! Return the day "d", month "m", year "y"
      d,m,y :: INT, OUT

      time :: VEC{INT}(8)

      time = ::current_time8()

      y = time(1)
      m = time(2)
      d = time(3)

   end


! ============
! Current time
! ============

   current_time_message result (res) ::: selfless
   ! The current time message
      res :: STR(len=40)

      res = "The current time is " // current_time_str() // "."

   end

   current_time_str result (res) ::: selfless
   ! Return a string containing the time.
   ! Formatted as DD/MM/YYYY HH:MM:SS
      res :: STR(len=19)

      res = ::time5_to_DMY_HMS_str(::current_time5())

   end


! ===================
! Stopwatch functions
! ===================

   start_timing
   ! Starts the timer
      self :: INOUT

      .start_time5    = ::current_time5()
      .cpu_start_time = ::current_cpu_time()

   end

   stop_timing
   ! Stops the timer
      self :: INOUT

      .stop_time5    = ::current_time5()
      .cpu_stop_time = ::current_cpu_time()

   end


! ================
! Start/stop times
! ================

   start_time_message result (res)
   ! The start time message
      self :: IN
      res :: STR(len=37)

      res = "Timer started at " // .start_time_str // "."

   end

   start_time_str result (res)
   ! Return a string containing the start time.
   ! Formatted as DD/MM/YYYY HH:MM:SS
      self :: IN
      res :: STR(len=19)

      res = ::time5_to_DMY_HMS_str(.start_time5)

   end

   stop_time_message result (res)
   ! The stop time message
      self :: IN
      res :: STR(len=37)

      res = "Timer stopped at " // .stop_time_str // "."

   end

   stop_time_str result (res)
   ! Return a string containing the start time.
   ! Formatted as DD/MM/YYYY HH:MM:SS
      self :: IN
      res :: STR(len=19)

      res = ::time5_to_DMY_HMS_str(.stop_time5)

   end


! ================
! Elapsed CPU time
! ================

   elapsed_cpu_time result (res)
   ! Returns elapsed cpu time taken since .start_timing. 
      res :: REAL

      res = ::current_cpu_time() - .cpu_start_time

   end

   elapsed_cpu_time_message(task) result (res)
   ! Returns elapsed cpu time taken since .start_timing. Message
   ! returned is: "CPU time taken is ... CPU seconds." If "task" is 
   ! given, returns  "CPU time taken for "task" is ... CPU seconds."
      self :: IN
      task :: STR, optional
      res :: STR

      time_str :: STR(len=132)
      time :: REAL

      time = .elapsed_cpu_time

      write(time_str,"(f15.3)") time

      if (present(task)) then
         res = "CPU time taken for " // trim(task) // " is " // trim(adjustl(time_str)) // " CPU seconds."
      else
         res = "CPU time taken is " // trim(adjustl(time_str)) // " CPU seconds."
      end

   end


! ============
! Elapsed time
! ============

   elapsed_time_message(task) result (res)
   ! Returns time taken. "Time taken is ..."
   ! If "task" given, "Time taken for task" is ..."
   ! NOTE: YOU MUST STOP THE TIMER FIRST - this is only the message
      self :: IN
      res :: STR(len=132)
      task :: STR, optional

      if (present(task)) then
         res = "Wall-clock time taken for " // trim(task) // " is " // trim(.elapsed_time_str) // "."
      else
         res = "Wall-clock time taken is "  // trim(.elapsed_time_str) // "."
      end

   end

   elapsed_time_str result (res)
   ! Return a string containing the elapsed time.
      self :: IN
      res :: STR

      time :: VEC{INT}(5)

      time = .elapsed_time5
      res  = ::time5_to_DHMS_str(time)

   end

   elapsed_time5 result (time)
   ! Returns elapsed time vector
      self :: IN
      time :: VEC{INT}(5)

      time = ::current_time5()
      time = ::subtract_time5s(time,.start_time5)

   end

   elapsed_time_s result (secs)
   ! Returns elapsed time in seconds
      self :: IN
      secs :: REAL

      time :: VEC{INT}(5)

      time = ::current_time5()
      time = ::subtract_time5s(time,.start_time5)
      secs = ::time5_to_seconds(time)

   end

   subtract_time5s(time1,time2) result (res) ::: selfless, private
   ! result = time1 - time2
      time1,time2 :: VEC{INT}(5), IN
      res :: VEC{INT}(5)

      secs1,secs2 :: REAL

      secs1 = ::time5_to_seconds(time1)
      secs2 = ::time5_to_seconds(time2)
      res   = ::seconds_to_time5(secs1-secs2)

   end


! =====================
! Julian day conversion
! =====================

   to_julian_day(j,d,m,y) ::: selfless
   ! Converts the days "d", months "m", years "y", into the Julian date "j".
      j :: INT, OUT
      d,m,y :: INT, IN

      mm,yy,c :: INT

      mm = m
      yy = y

      if (mm>2) then
         mm = mm - 3
      else
         mm = mm + 9
         yy = yy - 1
      end

      c  = yy / 100
      yy = yy - 100 * c
      j  = (146097*c)/4 + (1461*yy)/4 + (153*mm+2)/5 + d + 1721119

   end

   from_julian_day(j,d,m,y) ::: selfless
   ! Converts the days "d", months "m", years "y", from the Julian date "j".
      j :: INT, IN
      d,m,y :: INT, OUT

      jj :: INT

      jj = j - 1721119
      y  = (4*jj-1)/146097
      jj = 4*jj - 1 - 146097 * y
      d  = jj/4
      jj = (4*d+3)/1461
      d  = 4*d + 3 - 1461*jj
      d  = (d+4)/4
      m  = (5*d-3)/153
      d  = 5*d - 3 - 153*m
      d  = (d+5)/5
      y  = 100*y + jj
      if (m<10) then
         m = m + 3
      else
         m = m - 9
         y = y + 1
      end

   end


! =================
! 5-time conversion
! =================

   seconds_to_time5(secs) result (res) ::: selfless, private
   ! Returns the number of days, hours, minutes, seconds, milliseconds from the
   ! number of seconds.
      res :: VEC{INT}(5)

      secs :: REAL, IN
      sex :: REAL

      sex = abs(secs)
      res(1) = floor( sex / 86400 ) ! days

      sex = sex - res(1) * 86400
      res(2) = floor( sex / 3600 )  ! hours

      sex = sex - res(2) * 3600
      res(3) = floor( sex / 60 )    ! minutes

      sex = sex - res(3) * 60
      res(4) = floor(sex)           ! seconds

      sex = sex - res(4)
      res(5) = floor(1000*sex)      ! milliseconds

      if (secs < 0) res = -res

   end

   time5_to_seconds(time) result (res) ::: selfless, private
   ! Returns the number of seconds from the "time" vector: 
   ! days, hours, minutes, seconds, and milliseconds.
      time :: VEC{INT}(5), IN
      res :: REAL

      res =       time(1)*86400d0
      res = res + time(2)*3600d0
      res = res + time(3)*60d0
      res = res + time(4)
      res = res + time(5)/1000d0

   end

   time5_to_DMY_HMS_str(time) result (res) ::: selfless, private
   ! Return a string containing the time.
   ! Formatted as DD/MM/YYYY HH:MM:SS
      time :: VEC{INT}(5), IN
      res :: STR(len=19)

      day,month,hour,min,sec :: STR(len=2)
      year :: STR(len=4)
      i,y,m,d :: INT

      ::from_julian_day(time(1),d,m,y)

      res = " "
      write(day  ,fmt='(i2)') d
      write(month,fmt='(i2)') m
      write(year ,fmt='(i4)') y
      write(hour ,fmt='(i2)') time(2)
      write(min  ,fmt='(i2)') time(3)
      write(sec  ,fmt='(i2)') time(4)
      res = day //"/"// month //"/"// year //" "// hour //":"// min //":"// sec

      do i = 1,19
         if (res(i:i)==" ") res(i:i) = "0"
      end
      res(11:11) = " "

   end

   time5_to_DHMS_str(time) result (res) ::: selfless, private
   ! Returns the elapsed time as a string.
   ! Formatted as days, hours, min, sec, msec.
   ! If time is greater than a day, does not output min or smaller.
      time :: VEC{INT}(5), IN
      res :: STR

      res = " "

      res =              number_with_units(time(1),"day")
      res = trim(res) // number_with_units(time(2),"hour")
      if (time(1) == 0) then
      res = trim(res) // number_with_units(time(3),"minute")
      if (time(2) == 0) then
      res = trim(res) // number_with_units(time(4),"second")
      res = trim(res) // number_with_units(time(5),"millisecond")
      end
      end

   end

   number_with_units(number,unit) result (res) ::: selfless, private
   ! Returns the number with its units, if the number is non-zero.
      number :: INT, IN
      unit :: STR, IN
      res :: STR

      comma :: BIN

      i :: INT
      res1 :: STR

      res = " "

      if (number/=0) then

         comma = TRUE
         
         ! Align left
         res1 = " "
         write(res1,'(i 20)') number
         res1 = adjustl(res1)
         i = 1
         
         ! insert comma at start if needed.
         if (comma) then           
            res(1:2) = ", "
            i = 3
         end
         res(i:) = trim(res1) // " " // unit
         
         ! add "s" to "unit"s if number not 1.
         if (number /= 1) then     
            i = len_trim(res)+1
            res(i:i) = "s"
         end

      end

   end


end
