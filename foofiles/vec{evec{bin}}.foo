!---------------------------------------------------------------------------
!
! VEC{EVEC{BIN}} : a list of vectors, or a matrix where each column is
! (possibly) a different length
!
! Copyright (C) Dylan Jayatilaka, 2020
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{EVEC{BIN}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(bounds) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower and upper bounds in "bounds"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   create(dim,dimv) ::: get_from(VEC{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate vector of vectors
   end

   create(bounds1,bounds2) ::: get_from(VEC{EVEC{INTRINSIC}}), leaky, PURE
   ! Create space for a vector of vectors
   end

   create_vec(bounds) ::: get_from(VEC{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate the vector parts of "self"
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   max_element_dim result (res) ::: get_from(VEC{EVEC{INTRINSIC}}), pure
   ! Return the maximum element dimension
   end


!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}, INIT?=>0), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

   append_fifo(value,length) ::: get_from(VEC{EVEC{INTRINSIC}}), leaky, PURE
   ! Expands self and insert "value"; if equal to "length", push the
   ! first/oldest vectors down/up the list
   end

   append_listed_to(res,list) ::: get_from(VEC{EVEC{INTRINSIC}}), leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
   end

end
