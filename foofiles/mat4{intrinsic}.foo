!---------------------------------------------------------------------------
!
! MAT4{INTRINSIC}:
!
! This is a virtual module, for 4 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module MAT4{INTRINSIC}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3,dim4) ::: leaky, PURE
   ! Allocate a matrix with the given dimensions
      self :: allocatable, OUT
      dim1,dim2,dim3,dim4 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3,dim4),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(dim1,dim2,dim3,dim4))
#endif

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: leaky, PURE
   ! Allocate a matrix with the given bounds
      self :: allocatable, OUT
      lb1,ub1 :: INT, IN
      lb2,ub2 :: INT, IN
      lb3,ub3 :: INT, IN
      lb4,ub4 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4))
#endif

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

! Old

   create(dim1,dim2,dim3,dim4) ::: leaky
   ! Create the object with the desired bounds
      self :: PTR
      dim1,dim2,dim3,dim4 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      nullify(self)

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3,dim4),STAT=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(dim1,dim2,dim3,dim4))
#endif

   end

   create(bounds) ::: leaky, PURE
   ! Create a 4-d array with all upper "bounds" specified
      self :: PTR
      bounds :: VEC{INT}(4), IN

      .create(bounds(1),bounds(2),bounds(3),bounds(4))

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      lb1,lb2,lb3,ub1,ub2,ub3,lb4,ub4 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      nullify(self)

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4),STAT=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4))
#endif

   end

   create(bounds1,bounds2,bounds3,bounds4) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      bounds1,bounds2,bounds3,bounds4 :: VEC{INT}(2), IN

      .create(bounds1(1),bounds1(2), &
              bounds2(1),bounds2(2), &
              bounds3(1),bounds3(2), &
              bounds4(1),bounds4(2))

   end

   create(bounds) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      bounds :: MAT{INT}(4,2), IN

      .create(bounds(1,1),bounds(1,2), &
              bounds(2,1),bounds(2,2), &
              bounds(3,1),bounds(3,2), &
              bounds(4,1),bounds(4,2))

   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object. This version does not destroy pointer parts.
   end

!  ====
!  Copy
!  ====

   create_copy(c) ::: leaky, PURE
   ! Create a copy of matrix "c"
      self :: PTR
      c :: MAT4{INTRINSIC}, IN

      .create(lbound(c,1),ubound(c,1), &
              lbound(c,2),ubound(c,2), &
              lbound(c,3),ubound(c,3), &
              lbound(c,4),ubound(c,4)  )

      self = c

   end

!  =======
!  Inquiry
!  =======

   is_same_shape_as(b) result (res) ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT4{INTRINSIC}, IN
      res :: BIN

      res = .dim1==b.dim1 AND .dim2==b.dim2 AND .dim3==b.dim3 AND .dim4==b.dim4

   end

   is_hypercube result (res) ::: pure
   ! Returns TRUE if self is a hypercube
      self :: IN
      res :: BIN

      res = .dim1==.dim2 AND .dim1==.dim3 AND .dim1==.dim4

   end

!  ===========
!  Set methods
!  ===========

   set_to(b) ::: PURE
   ! Set "self" to "b"
      self :: OUT
      b :: MAT4{INTRINSIC}, IN

   ENSURE(.is_same_shape_as(b),"different shapes")

      self = b

   end

   set_to(b) ::: PURE
   ! Set "self" to vector "b" in standard order
     self :: OUT
     b :: VEC{INTRINSIC}, IN

   ENSURE(size(self)==size(b),"different sizes")

     self = reshape(b,[.dim1,.dim2,.dim3,.dim4])

   end

!  ========================
!  Change of basis routines
!  ========================

   change_basis_using(V) ::: PURE
   ! Change the basis of "self" using vectors "V"; self = self ... V
      self :: INOUT
      V :: MAT{INTRINSIC}, IN

   ENSURE( .is_hypercube,"Non-hypercube matrix")
   ENSURE(V.is_square,"Non-square matrix")
   ENSURE(.dim1==V.dim1,"wrong shapes")

      new :: MAT4{INTRINSIC}*

      new.create(.dim1,.dim1,.dim1,.dim1)

      .change_basis_to(new,V)

      self = new

      new.destroy

   end

   change_basis_to(new,V) ::: PURE
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V
      self :: IN
      new :: MAT4{INTRINSIC}, OUT
      V :: MAT{INTRINSIC}, IN

   ENSURE(   .is_hypercube,"Non-hypercube matrix")
   ENSURE(new.is_hypercube,"Non-hypercube new matrix")
   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")

      i,j,k :: INT

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(:,i,j,k) = matmul(self(:,i,j,k),V)
      end
      end
      end

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(i,:,j,k) = matmul(new(i,:,j,k),V)
      end
      end
      end

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(i,j,:,k) = matmul(new(i,j,:,k),V)
      end
      end
      end

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(i,j,k,:) = matmul(new(i,j,k,:),V)
      end
      end
      end

   end

   back_transform_using(V) ::: PURE
   ! Change the basis of "self" using vectors "V"; self = self ... V^T
      self :: INOUT
      V :: MAT{INTRINSIC}, IN

   ENSURE( .is_hypercube,"Non-hypercube matrix")
   ENSURE(V.is_square,   "Non-square matrix")
   ENSURE(.dim1==V.dim1, "wrong shapes")

      new :: MAT4{INTRINSIC}*

      new.create(.dim1,.dim1,.dim1,.dim1)

      .back_transform_to(new,V)

      self = new

      new.destroy

   end

   back_transform_to(new,V) ::: PURE
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V^T
      self :: IN
      new :: MAT4{INTRINSIC}, OUT
      V :: MAT{INTRINSIC}, IN

   ENSURE(   .is_hypercube,"Non-hypercube matrix")
   ENSURE(new.is_hypercube,"Non-hypercube new matrix")
   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")

      i,j,k :: INT

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(:,i,j,k) = matmul(V,self(:,i,j,k))
      end
      end
      end

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(i,:,j,k) = matmul(V,new(i,:,j,k))
      end
      end
      end

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(i,j,:,k) = matmul(V,new(i,j,:,k))
      end
      end
      end

      do i = 1,.dim1
      do j = 1,.dim1
      do k = 1,.dim1
         new(i,j,k,:) = matmul(V,new(i,j,k,:))
      end
      end
      end

   end

!  ==============
!  Symmetrization
!  ==============

   make_symmetric ::: pure
   ! Make the upper pyramid of "self" the same as the lower pyramid
      self :: INOUT

 ! ENSURE(.dim1==.dim2,"non-cube tensor")
 ! ENSURE(.dim1==.dim3,"non-cube tensor")
 ! ENSURE(.dim1==.dim4,"non-cube tensor")

      dim,i1,i2,i3,i4 :: INT
      val :: REAL

      dim = .dim1

      do i1 = 1,dim
      do i2 = 1,i1
      do i3 = 1,i2
      do i4 = 1,i3

         val = self(i1,i2,i3,i4)

         self(i1,i2,i4,i3) = val
         self(i1,i3,i2,i4) = val
         self(i1,i3,i4,i2) = val
         self(i1,i4,i2,i3) = val
         self(i1,i4,i3,i2) = val

         self(i2,i1,i3,i4) = val
         self(i2,i1,i4,i3) = val
         self(i2,i3,i1,i4) = val
         self(i2,i3,i4,i1) = val
         self(i2,i4,i1,i3) = val
         self(i2,i4,i3,i1) = val

         self(i3,i1,i2,i4) = val
         self(i3,i1,i4,i2) = val
         self(i3,i2,i1,i4) = val
         self(i3,i2,i4,i1) = val
         self(i3,i4,i1,i2) = val
         self(i3,i4,i2,i1) = val

         self(i4,i1,i2,i3) = val
         self(i4,i1,i3,i2) = val
         self(i4,i2,i1,i3) = val
         self(i4,i2,i3,i1) = val
         self(i4,i3,i1,i2) = val
         self(i4,i3,i2,i1) = val

      end
      end
      end
      end

   end

!  ======================================
!  Compression and uncompression routines
!  ======================================

   compress_to_pyramid(py) ::: PURE
   ! Converts the lower pyramid of self to the pyramid "py".
      self :: IN
      py :: VEC{INTRINSIC}, OUT

   ENSURE(.is_hypercube,"matrix is not hypercube")
   ENSURE(py.dim>=.pyramid_size,"pyramid array too small")

      i,i1,i2,i3,i4 :: INT

      i = 0
      do i1 = 1,.dim1
      do i2 = 1,i1
      do i3 = 1,i2
      do i4 = 1,i3
         i = i + 1
         py(i) = self(i1,i2,i3,i4)
      end
      end
      end
      end

   end

   uncompress_from_pyramid(py) ::: PURE
   ! Converts the pyramid "py" into the symmetric cube "self".
      self :: OUT
      py :: VEC{INTRINSIC}, IN

   ENSURE(.is_hypercube,"matrix is not hypercube")
   ENSURE(py.dim>=.pyramid_size,"pyramid array too small")

      i,i1,i2,i3,i4 :: INT
      val :: INTRINSIC

      i = 0
      do i1 = 1,.dim1
      do i2 = 1,i1
      do i3 = 1,i2
      do i4 = 1,i3

         i = i + 1

         val = py(i)

         self(i1,i2,i3,i4) = val
         self(i1,i2,i4,i3) = val
         self(i1,i3,i2,i4) = val
         self(i1,i3,i4,i2) = val
         self(i1,i4,i2,i3) = val
         self(i1,i4,i3,i2) = val

         self(i2,i1,i3,i4) = val
         self(i2,i1,i4,i3) = val
         self(i2,i3,i1,i4) = val
         self(i2,i3,i4,i1) = val
         self(i2,i4,i1,i3) = val
         self(i2,i4,i3,i1) = val

         self(i3,i1,i2,i4) = val
         self(i3,i1,i4,i2) = val
         self(i3,i2,i1,i4) = val
         self(i3,i2,i4,i1) = val
         self(i3,i4,i1,i2) = val
         self(i3,i4,i2,i1) = val

         self(i4,i1,i2,i3) = val
         self(i4,i1,i3,i2) = val
         self(i4,i2,i1,i3) = val
         self(i4,i2,i3,i1) = val
         self(i4,i3,i1,i2) = val
         self(i4,i3,i2,i1) = val

      end
      end
      end
      end

   end

   pyramid_size result (res) ::: PURE
   ! Returns the size of the lower pyramid needed to store a
   ! totally symmetric self.
      self :: IN
      res :: INT

   ENSURE(.is_hypercube,"matrix is not hypercube")

      dim :: INT

      dim = .dim1
      res = dim*(dim+1)*(dim+3)/6

   end

!  =============
!  String widths
!  =============

   str_lengths(spaces) result (res) ::: pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      spaces :: INT, IN, optional
      res :: MAT4{INT}(.dim1,.dim2,.dim3,.dim4)

      i1,i2,i3,i4 :: INT

      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
      do i4 = 1,.dim4
         res(i1,i2,i3,i4) = self(i1,i2,i3,i4).str_length
      end
      end
      end
      end

      if (present(spaces)) res = res + spaces

   end

   str_lengths(dp,spaces) result (res) ::: pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      dp :: INT, IN
      spaces :: INT, IN, optional
      res :: MAT4{INT}(.dim1,.dim2,.dim3,.dim4)

      i1,i2,i3,i4 :: INT

      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
      do i4 = 1,.dim4
         res(i1,i2,i3,i4) = self(i1,i2,i3,i4).str_length(dp)
      end
      end
      end
      end

      if (present(spaces)) res = res + spaces

   end

   get_max_str_length(msl,spaces) ::: pure
   ! Returns the maximum of the string lengths.
      self :: IN
      msl :: INT, OUT
      spaces :: INT, IN

      i1,i2,i3,i4,sl :: INT

      msl = 0

      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
      do i4 = 1,.dim4
         self(i1,i2,i3,i4).get_str_length(sl,spaces)
         msl = max(msl,sl)
      end
      end
      end
      end

   end

   get_max_str_length(msl,max_dp,spaces) ::: pure
   ! Returns the maximum of the string lengths.
      self :: IN
      msl :: INT, OUT
      max_dp :: INT, IN
      spaces :: INT, IN

      i1,i2,i3,i4,sl :: INT

      msl = 0

      do i1 = 1,.dim1
      do i2 = 1,.dim2
      do i3 = 1,.dim3
      do i4 = 1,.dim4
         self(i1,i2,i3,i4).get_str_length_maxdp(sl,max_dp,spaces)
         msl = max(msl,sl)
      end
      end
      end
      end

   end

end
