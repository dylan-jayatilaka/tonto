!------------------------------------------------------------------------------
!
! QUADRATURE
!
! For integrating one dimensional functions by using quadrature. Most of the
! method implemented so far are for Gauss type quadratures --- i.e.  getting
! abscissas and weights based on orthogonal polynomial theory. The Gauss
! quadratures are based on the Numerical Recipes, pp. 144-149.
!
! The following Gauss quadratures are available, with weight function W(x):
! . Gauss-Chebyshev (1st kind): W(x) = (1-x^2)^{-1/2},        -1 < x < 1
! . Gauss-Chebyshev (2nd kind): W(x) = (1-x^2)^{+1/2},        -1 < x < 1
! . Gauss-Chebyshev (3rd kind): W(x) = (x/(1-x))^{+1/2},       0 < x < 1
! . Gauss-Laguerre:             W(x) = x^alpha e^-x,           0 < x < inf
! . Gauss-Legendre:             W(x) = 1,                     -1 < x < 1
! . Gauss-Hermite:              W(x) = e^{-x^2},            -inf < x < inf
! . Gauss-Jacobi:               W(x) = (1-x)^alpha(1+x)^beta, -1 < x < 1
!
! The following standard quadratures are available:
! . Open rectangle    :       0 < x < 1
! . Extended trapezoid:       0 < x < 1
! . Extended Simpson  :       0 < x < 1
! Note that the extended trapezoid method becomes the Euler-Maclaurin formula
! if the derivatives at the endpoints can be made zero.
!
! NOTE: is is up to you to transforms the points and weights to the appropriate
! integration interval in your problem.
!
! Copyright (C) Dylan Jayatilaka, 2004
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!------------------------------------------------------------------------------

module QUADRATURE

   implicit none

   allowed_kinds :: VEC{STR}(len=25,12), private

   data allowed_kinds/ &
      "extended_simpson         ", &                
      "extended_trapezoid       ", &                
      "gauss_chebyshev_1st      ", &     
      "gauss_chebyshev_2nd      ", &     
      "gauss_chebyshev_3rd      ", &     
      "gauss_laguerre           ", & 
      "gauss_legendre           ", & 
      "gauss_hermite            ", &
      "gauss_jacobi             ", &
      "open_extended_simpson    ", &
      "open_extended_trapezoid  ", &
      "open_rectangle           "  /                

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

!  ===========
!  Set methods
!  ===========

   set_eps(eps) ::: PURE
   ! Set the relative accuracy needed for the roots. Used only for Gauss
   ! quadrature methods.
      self :: INOUT
      eps :: REAL, IN

   ENSURE(eps>ZERO,"must have +ve eps")

      .eps = eps

   end

   set_maxit(maxit) ::: PURE
   ! Set the maximum number of iterations to use when solving for the roots.
   ! Used only for Gauss quadrature methods.
      self :: INOUT
      maxit :: INT, IN

   ENSURE(maxit>0,"maxit must be positive")

      .maxit = maxit

   end

   set_kind(kind) ::: PURE
   ! Set the kind of interpolation to use. 
      self :: INOUT
      kind :: STR, IN

   ENSURE(kind.is_one_of(allowed_kinds),"unrecognized kind, "//trim(kind))

      .kind = kind.lower_cased

   end

   set_n_points(n_points) ::: PURE
   ! Set the number of quadrature points wanted
      self :: INOUT
      n_points :: INT, IN

   ENSURE(n_points>0,"n_points must be positive")

      .n_points = n_points

   end
   
   set_gauss_laguerre_alpha(alpha) ::: PURE
   ! Set the Gauss-Laguerre alpha parameter
      self :: INOUT
      alpha :: REAL, IN

      .gauss_laguerre_alpha = alpha

   end

   set_gauss_jacobi_alpha(alpha) ::: PURE
   ! Set the Gauss-Jacobi alpha parameter
      self :: INOUT
      alpha :: REAL, IN

      .gauss_jacobi_alpha = alpha

   end

   set_gauss_jacobi_beta(beta) ::: PURE
   ! Set the Gauss-Jacobi beta parameter
      self :: INOUT
      beta :: REAL, IN

      .gauss_jacobi_beta = beta

   end

!  ==========================
!  Finalize quadrature points 
!  ==========================

   set_quadrature_points ::: leaky, PURE
   ! Set the quadrature points. NOTE: if you want non-standard limits you must
   ! call .set_limits after this routine to rescale the points and weights
      self :: INOUT

   ENSURE(.kind/=" ","the kind of quadrature has not been set")
   ENSURE(.n_points>0,"no points have been set")

      if (.kind(1:5)=="gauss") then; .set_roots_and_weights
      else;                          .set_points_and_weights
      end

      .finalized = TRUE

   end

   set_limits(limits) ::: PURE
   ! Read in the limits of integration
      self :: INOUT
      limits :: VEC{REAL}(2), IN

   ENSURE(limits(1)<=limits(2),"lower limit must be smaller than upper limit")
   ENSURE(.finalized,"set limits after defining quadrature points and weights")

      .lower_limit = limits(1)
      .upper_limit = limits(2)

      .rescale_points_and_weights

   end

   rescale_points_and_weights ::: private, PURE
   ! Rescale the points and weights using a linear transformation, if different
   ! lower and upper limits have been used.
      self :: INOUT

   ENSURE(.kind.is_one_of(allowed_kinds([1,2,3,4,5,7,9,12])),"unrecognized kind, "//trim(.kind))
   ENSURE(.kind/=" ","the kind of quadrature has not been set")
   ENSURE(.n_points>0,"no points have been set")
   ENSURE(.finalized,"set limits after defining quadrature points and weights")

      select case (.kind)
      case ("extended_simpson   "); .rescale_z0p1
      case ("extended_trapezoid "); .rescale_z0p1
      case ("gauss_chebyshev_1st"); .rescale_m1p1
      case ("gauss_chebyshev_2nd"); .rescale_m1p1
      case ("gauss_chebyshev_3rd"); .rescale_z0p1
      case ("gauss_laguerre     "); ! DIE("cant rescale linearly")
      case ("gauss_legendre     "); .rescale_m1p1
      case ("gauss_hermite      "); ! DIE("cant rescale linearly")
      case ("gauss_jacobi       "); .rescale_m1p1
      case ("open_rectangle     "); .rescale_z0p1
      end

   end

   rescale_m1p1 ::: private, PURE
   ! Rescale the points and weights using a linear transformation, from the
   ! range [-1,1] to the new range.
      self :: INOUT

   ENSURE(.kind/=" ","the kind of quadrature has not been set")
   ENSURE(.n_points>0,"no points have been set")
   ENSURE(.finalized,"set limits after defining quadrature points and weights")

      s,m :: REAL
      i :: INT

      if (.lower_limit==-ONE AND .upper_limit==ONE) return

      s = HALF*(.upper_limit-.lower_limit)
      m = HALF*(.upper_limit+.lower_limit)

      do i = 1,.n_points
         .point(i) = s*.point(i) + m
         .weight(i) = s*.weight(i)
      end

   end

   rescale_z0p1 ::: private, PURE
   ! Rescale the points and weights using a linear transformation, from the
   ! range [0,1] to the new range.
      self :: INOUT

   ENSURE(.kind/=" ","the kind of quadrature has not been set")
   ENSURE(.n_points>0,"no points have been set")
   ENSURE(.finalized,"set limits after defining quadrature points and weights")

      s,m :: REAL
      i :: INT

      if (.lower_limit==ZERO AND .upper_limit==ONE) return

      s = (.upper_limit-.lower_limit)
      m = HALF*(.upper_limit+.lower_limit)

      do i = 1,.n_points
         .point(i) = s*(.point(i)-HALF) + m
         .weight(i) = s*.weight(i)
      end

   end

!  ==================================
!  Gauss quadrature roots and weights
!  ==================================

   set_roots_and_weights ::: leaky, private, PURE
   ! Set the Gauss-Legendre roots and weights
      self :: INOUT

   ENSURE(.kind.is_one_of(allowed_kinds(3:9)),"unrecognized kind, "//trim(.kind))
   ENSURE(.n_points>0,"must have positive number of points")
   ENSURE(.kind(1:5)=="gauss","must be a gauss quadrature")

      .point.create(.n_points)  ! These are the roots
      .weight.create(.n_points)

      select case (.kind)
      case ("gauss_chebyshev_1st"); .set_gauss_chebyshev_1st
      case ("gauss_chebyshev_2nd"); .set_gauss_chebyshev_2nd
      case ("gauss_chebyshev_3rd"); .set_gauss_chebyshev_3rd
      case ("gauss_laguerre     "); .set_gauss_laguerre
      case ("gauss_legendre     "); .set_gauss_legendre
      case ("gauss_hermite      "); .set_gauss_hermite
      case ("gauss_jacobi       "); .set_gauss_jacobi
      end

   end

   set_gauss_chebyshev_1st ::: private, PURE
   ! Set the Gauss-Legendre roots and weights
      self :: INOUT

      i :: INT
      pi_n,c :: REAL

      .lower_limit = -ONE
      .upper_limit = ONE

      pi_n = PI/.n_points

      .weight = pi_n

      do i = 1,.n_points

         c = cos(pi_n*(i-HALF))
         .point(i) = c

         if (NOT .fold_weight_function_in) cycle

         ! Include weight function in quadrature weight
         .weight(i) = .weight(i) * sqrt(ONE-c*c)

      end

   end

   set_gauss_chebyshev_2nd ::: private, PURE
   ! Set the Gauss-Legendre roots and weights
      self :: INOUT

      i :: INT
      pi_n,c :: REAL

      .lower_limit = -ONE
      .upper_limit = ONE

      pi_n = PI/(.n_points+1)

      do i = 1,.n_points

         c = cos(i*pi_n)

         .point(i) = c
         .weight(i) = pi_n * (ONE-c*c) 

         if (NOT .fold_weight_function_in) cycle

         ! Include weight function in quadrature weight
         .weight(i) = .weight(i) / sqrt(ONE-c*c)

      end

   end

   set_gauss_chebyshev_3rd ::: private, PURE
   ! Set the Gauss-Legendre roots and weights
      self :: INOUT

      i :: INT
      pi_n,c :: REAL

      .lower_limit = ZERO
      .upper_limit = ONE

      pi_n = PI/(2*.n_points+1)

      do i = 1,.n_points

         c = cos(pi_n*(i-HALF))
         c = c*c

         .point(i) = c
         .weight(i) = pi_n * TWO*c

         if (NOT .fold_weight_function_in) cycle

         ! Include weight function in quadrature weight
         .weight(i) = .weight(i) * sqrt((ONE-c)/c)

      end

   end

   set_gauss_laguerre ::: private, PURE
   ! Set the Gauss-Laguerre roots and weights
      self :: INOUT

      i,j,n,i2,it :: INT
      a,p1,p2,p3,pp,z,z1,g1,g2 :: REAL

      .lower_limit = ZERO
      .upper_limit = huge(ONE)

      n = .n_points
      a = .gauss_laguerre_alpha

      do i = 1,n

         i2 = i-2
         z = ZERO

         select case (i)
         case(1);      z = (ONE+a)*(THREE+0.92*a)/(ONE+2.4*n+1.8*a)
         case(2);      z = z + (15.0+6.25*a)/(ONE+0.9*a*2.5*n)
         case default; z = ((ONE+2.55*i2)/(1.9*i2)+1.26*i2*a/(ONE+3.5*i2))*(z-.point(i2))/(ONE+0.3*a)
         end

         it = 0
         do 
            it = it + 1
            p1 = ONE
            p2 = ZERO
            do j = 1,n
               p3 = p2
               p2 = p1
               p1 = ((2*j-1+a-z)*p2 - (j-1+a)*p3)/j
            end
            pp = (n*p1 - (n+a)*p2)/z
            z1 = z
            z = z1 - p1/pp
            if (abs(z-z1)<.eps) exit
         end

         ENSURE(it<=.maxit,"too many interations")

         .point(i) = z
         g1 = a+n
         g2 = n
         .weight(i) = -exp(g1.ln_gamma-g2.ln_gamma)/pp*n*p2

      end

      if (NOT .fold_weight_function_in) return

      do i = 1,.n_points
         z = .point(i)
         z = z**(-a)*exp(z)
         .weight(i) = .weight(i) * z
      end

   end

   set_gauss_legendre ::: private, PURE
   ! Set the Gauss-Legendre roots and weights
      self :: INOUT

      i,j,n,m,it :: INT
      p1,p2,p3,pp,x1,x2,xl,xm,z,z1 :: REAL

      .lower_limit = -ONE
      .upper_limit = ONE

      ! Can change these limits and it will still work
      x1 = -ONE ! lower_limit
      x2 = +ONE ! upper_limit

      n = .n_points
      m = (n+1)/2

      xm = HALF*(x2+x1)
      xl = HALF*(x2-x1)

      do i = 1,m

         z = cos(PI*(i-QUARTER)/(n+HALF))
         it = 0

         do
            it = it + 1
            p1 = ONE
            p2 = ZERO
            do j = 1,n
               p3 = p2
               p2 = p1
               p1 = ((2*j-1)*z*p2 - (j-1)*p3)/j
            end
            pp = n*(z*p1-p2)/(z*z-ONE)
            z1 = z
            z = z1 - p1/pp
            if (abs(z-z1)<.eps) exit
         end

         ENSURE(it<=.maxit,"too many iterations")

         .point(i)      = xm - xl*z
         .point(n+1-i)  = xm + xl*z
         .weight(i)     = TWO*xl/((ONE-z*z)*pp*pp)
         .weight(n+1-i) = .weight(i)

      end

   end

   set_gauss_hermite ::: private, PURE
   ! Set the Gauss-Hermite roots and weights
      self :: INOUT

      i,j,n,m,it :: INT
      pim4,p1,p2,p3,pp,z,z1 :: REAL

      .lower_limit = -huge(ONE)
      .upper_limit =  huge(ONE)


      pim4 = 0.75112554444649425d0
      n = .n_points
      m = (n+1)/2

      do i = 1,m

         z = ZERO
         select case (i)
            case (1);     z = sqrt(REALIFY(2*n+1)) - 1.85575d0*(2*n+1)**(-SIXTH)
            case (2);     z = z - 1.14d0*n**0.426d0/z
            case (3);     z = 1.86d0*z - 0.86d0*.point(1)
            case (4);     z = 1.91d0*z - 0.91d0*.point(2)
            case default; z = TWO*z - .point(i-2)
         end

         it = 0
         do 
            it = it + 1
            p1 = pim4
            p2 = ZERO
            do j = 1,n
               p3 = p2
               p2 = p1
               p1 = z*sqrt(TWO/j)*p2 - sqrt(REALIFY(j-1)/REALIFY(j))*p3
            end
            pp = sqrt(TWO*n)*p2
            z1 = z
            z = z1 - p1/pp
            if (abs(z-z1)<.eps) exit
         end

         ENSURE(it<=.maxit,"too many interations")

         .point(i)      =  z
         .point(n+1-i)  = -z
         .weight(i)     = TWO/(pp*pp)
         .weight(n+1-i) = .weight(i)

      end

      if (NOT .fold_weight_function_in) return

      do i = 1,.n_points
         z = .point(i)
         z = exp(z*z)
         .weight(i) = .weight(i) * z
      end

   end

   set_gauss_jacobi ::: private, PURE
   ! Set the Gauss-Jacobi roots and weights
      self :: INOUT

      i,j,n,it :: INT
      al,be,albe,an,bn,a,b,c,r1,r2,r3,p1,p2,p3,pp,z,z1,tmp,g1,g2,g3,g4 :: REAL

      .lower_limit = -ONE
      .upper_limit =  ONE

      al   = .gauss_jacobi_alpha
      be   = .gauss_jacobi_alpha
      albe = al + be

      n = .n_points

      do i = 1,n

         z = ZERO
         if (i==1) then
            an = al/n
            bn = be/n
            r1 = (ONE+al)*(2.78/(FOUR+n*n)+0.768*an/n)
            r2 = ONE + 1.48*an + 0.96*bn + 0.452*an*an + 0.83*an*bn
            z = ONE - r1/r2
         else if (i==2) then
            r1 = (4.1+al)/((ONE+al)*(ONE+0.156*al))
            r2 = ONE + 0.06*(n-EIGHT)*(ONE+0.12*al)/n
            r3 = ONE + 0.012*be*(ONE+0.25*abs(al))/n
            z = z - (ONE-z)*r1*r2*r3
         else if (i==3) then
            r1 = (1.67+0.28*al)/(ONE+0.37*al)
            r2 = ONE + 0.22*(n-EIGHT)/n
            r3 = ONE + EIGHT*be/((6.28*be)*n*n)
            z = z - (.point(1)-z)*r1*r2*r3
         else if (i==(n-1)) then
            r1 = (ONE+0.235*be)/(0.766+0.119*be)
            r2 = ONE/(ONE+0.639*(n-FOUR)/(ONE+0.71*(n-FOUR)))
            r3 = ONE/(ONE+20.0*al/((7.5+al)*n*n))
            z = z + (z-.point(n-3))*r1*r2*r3
         else if (i==n) then
            r1 = (ONE+0.37*be)/(1.67+0.28*be)
            r2 = ONE/(ONE+0.22*(n-EIGHT)/n)
            r3 = ONE/(ONE+EIGHT*al/((6.28+al)*n*n))
            z = z + (z-.point(n-2))*r1*r2*r3
         else 
            z = THREE*.point(i-1) - THREE*.point(i-2) + .point(i-3)
         end

         it = 0
         do 
            it = it + 1
            tmp = TWO + albe
            p1 = (al-be+tmp*z)/TWO
            p2 = ONE
            do j = 2,n
               p3 = p2
               p2 = p1
               tmp = 2*j + albe
               a = 2*j*(j+albe)*(tmp-TWO)
               b = (tmp-ONE)*(al*al-be*be+tmp*(tmp-TWO)*z)
               c = TWO*(j-1+al)*(j-1+be)*tmp
               p1 = (b*p2-c*p3)/a
            end
            pp = (n*(al-be-tmp*z)*p1 + TWO*(n+al)*(n+be)*p2)/(tmp*(ONE-z*z))
            z1 = z
            z = z1 - p1/pp
            if (abs(z-z1)<.eps) exit
         end

         ENSURE(it<=.maxit,"too many interations")

         .point(i) =  z
         g1 = al+n
         g2 = be+n
         g3 = n+ONE
         g4 = n+albe+ONE
         .weight(i) = exp(g1.ln_gamma+g2.ln_gamma-g3.ln_gamma-g4.ln_gamma) *tmp*TWO**albe / (pp*p2)

      end

      if (NOT .fold_weight_function_in) return

      do i = 1,.n_points
         z = .point(i)
         z = (1-z)**(-al) * (1+z)**(-be)
         .weight(i) = .weight(i) * z
      end

   end

!  ============================
!  Non-gauss points and weights
!  ============================

   set_points_and_weights ::: leaky, private, PURE
   ! Set the points and weights
      self :: INOUT

   ENSURE(.kind.is_one_of(allowed_kinds([1,2,3,4,10,11,12])),"unrecognized kind, "//trim(.kind))
   ENSURE(.n_points>0,"must have positive number of points")

      .point.create(.n_points)  ! These are the roots
      .weight.create(.n_points)

      select case (.kind)
      case ("extended_simpson       "); .set_extended_simpson
      case ("extended_trapezoid     "); .set_extended_trapezoid
      case ("open_extended_simpson  "); .set_open_extended_simpson
      case ("open_extended_trapezoid"); .set_open_extended_trapezoid
      case ("open_rectangle         "); .set_open_rectangle
      end

   end

   set_open_rectangle ::: private, PURE
   ! Set open rectangle points and weights in the interval [0,1].
      self :: INOUT

   ENSURE(.n_points>=3,"must at least 1 points")

      i :: INT
      h,h2,r :: REAL

      .lower_limit = ZERO
      .upper_limit = ONE

      h  = ONE/(.n_points+1)
      h2 = 1.5d0*h

      .weight = h
      .weight(1) = h2
      .weight(.n_points) = h2

      r = h

      do i = 1,.n_points
         .point(i) = r
         r = r + h
      end

   end

   set_extended_trapezoid ::: private, PURE
   ! Set extended trapezoid points and weights
   ! The error is (-n h^3 f''(z)/12) where n in the number of points minus one,
   ! h is the point spacing, and z is a number in the integration interval,
   ! which is here [0,1].
      self :: INOUT

   ENSURE(.n_points>=2,"must at least 2 points")

      i :: INT
      h,h2,r :: REAL

      .lower_limit = ZERO
      .upper_limit = ONE

      h  = ONE/(.n_points-1)
      h2 = HALF*h

      .weight = h
      .weight(1) = h2
      .weight(.n_points) = h2

      r = ZERO

      do i = 1,.n_points
         .point(i) = r
         r = r + h
      end

   end

   set_open_extended_trapezoid ::: private, PURE
   ! Set open extended trapezoid points and weights. Use this if you know
   ! that the function to be quadrated is zero on the endpoints.
   ! The error is (-n h^3 f''(z)/12) where n in the number of points minus one,
   ! h is the point spacing, and z is a number in the integration interval,
   ! which is here [0,1].
      self :: INOUT

   ENSURE(.n_points>2,"must have greater than 2 points")

      i :: INT
      h,r :: REAL

      .lower_limit = ZERO
      .upper_limit = ONE

      h  = ONE/(.n_points+1)

      .weight = h

      r = h

      do i = 1,.n_points
         .point(i) = r
         r = r + h
      end

   end

   set_extended_simpson ::: private, PURE
   ! Set extended Simpson points and weights
   ! The error is (-n h^5 f''''(z)/90) where n in the number of points minus one,
   ! h is the point spacing, and z is a number in the integration interval,
   ! which is here [0,1].
      self :: INOUT

   ENSURE(.n_points>=5,"must at least 5 points")
   ENSURE(mod(.n_points,2)==1,"must have odd number of points")

      i :: INT
      h,h2,h3,h4,r :: REAL

      .lower_limit = ZERO
      .upper_limit = ONE

      h3 = THIRD/(.n_points-1)
      h4 = FOUR*h3
      h2 =  TWO*h3
      h  = THREE*h3

      .weight(1) = h3
      .weight(.n_points) = h3

      do i = 2,.n_points-1,2
         .weight(i) = h4
      end

      do i = 3,.n_points-2,2
         .weight(i) = h2
      end

      r = ZERO
      do i = 1,.n_points
         .point(i) = r
         r = r + h
      end

   end

   set_open_extended_simpson ::: private, PURE
   ! Set open extended Simpson points and weights. Use this if you know
   ! that the function to be quadrated is zero on the endpoints.
   ! The error is (-n h^5 f''''(z)/90) where n in the number of points minus one,
   ! h is the point spacing, and z is a number in the integration interval,
   ! which is here [0,1].
      self :: INOUT

   ENSURE(.n_points>=3,"must at least 3 points")
   ENSURE(mod(.n_points,2)==1,"must have odd number of points")

      i :: INT
      h,h2,h3,h4,r :: REAL

      .lower_limit = ZERO
      .upper_limit = ONE

      h3 = THIRD/(.n_points+1)
      h4 = FOUR*h3
      h2 =  TWO*h3
      h  = THREE*h3

      .weight(0) = h3
      .weight(.n_points+1) = h3

      do i = 1,.n_points-1,2
         .weight(i) = h4
      end

      do i = 2,.n_points-2,2
         .weight(i) = h2
      end

      r = h
      do i = 1,.n_points
         .point(i) = r
         r = r + h
      end

   end

!  ==================
!  Quadrature methods
!  ==================

   quadrate(func) result (res)
   ! Quadrate the function "func".
      interface
         func(x) result (res)
            x :: REAL, IN
            res :: REAL
         end
      end
      res :: REAL

   ENSURE(.n_points>0,"no points")
   ENSURE(.point.allocated,"no points")
   ENSURE(.weight.allocated,"no weights")

      i :: INT
      f :: VEC{REAL}@

      f.create(.n_points)

      do i = 1,.n_points
         f(i) = func(.point(i))
      end

      res = sum(.weight*f)

      f.destroy

   end

! Test functions

   test_sin(x) result (res) ::: selfless, public, pure
   ! Sine function for integrating
      x :: REAL, IN
      res :: REAL

      res = sin(x)

   end

   test_x2(x) result (res) ::: selfless, public, pure
   ! x^2 function for integrating
      x :: REAL, IN
      res :: REAL

      res = x*x

   end

   test_x3(x) result (res) ::: selfless, public, pure
   ! x^3 function for integrating
      x :: REAL, IN
      res :: REAL

      res = x*x*x

   end

   test_x4(x) result (res) ::: selfless, public, pure
   ! x^4 function for integrating
      x :: REAL, IN
      res :: REAL

      res = x*x*x*x

   end

end
