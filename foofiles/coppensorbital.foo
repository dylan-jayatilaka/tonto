!-------------------------------------------------------------------------------
!
! COPPENSORBITAL: used to describe contracted slater orbitals fitted to
! relativistic Hartree Fock calculations, as described by Coppens and Liu, and
! Macch and Coppens..
!
! Copyright (C) Mark Hore, Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: coppensorbital.foo 4071 2013-06-18 12:59:43Z dylan_ $
!-------------------------------------------------------------------------------
module COPPENSORBITAL

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

   values_cutoff :: REAL, private = COPPENSORBITAL_VALUES_CUTOFF

contains

! ===========================
! Create and destroy routines
! ===========================

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object
   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts of the atomvec
      self :: INOUT

      nullify(.n)
      nullify(.c)
      nullify(.z)

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts
      self :: INOUT

      .n.destroy
      .c.destroy
      .z.destroy

   end

!  ====
!  Copy
!  ====

   copy(c) ::: leaky
   ! Create a copy of c
       c :: COPPENSORBITAL
       self = c
       .nullify_ptr_part
       if (c.n.associated) .n.create_copy(c.n)
       if (c.c.associated) .c.create_copy(c.c)
       if (c.z.associated) .z.create_copy(c.z)
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: pure
   ! Set default values
      self :: INOUT

      .orb_kind = "?"
      .occupancy = 0
      .n_fun = 0

   end

!  =======
!  Inquiry
!  =======

   ex(i) result (res) ::: pure
   ! Return the exponent of the "i" th slater orbital
       self :: IN
       i :: INT, IN
       res :: REAL

       res = .z(i)

   end

   cc(i) result (res) ::: PURE
   ! Return the contraction coefficient of the "i" th slater orbital
       self :: IN
       i :: INT, IN
       res :: REAL

       res = .c(i)

   end

! ===========
! I/O methods
! ===========

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Data is inputted from "stdin", unless "keyword"
   ! is a sequence of blank separated strings.  In this case, the sequence is
   ! processed as if it were a separate file.
      keyword :: STR, IN
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
        case ("}                            ")  ! exit case
        case ("c=                           "); .read_c
        case ("orb_kind=                    "); .read_orb_kind
        case ("orb_kind,occupancy,num,n,c,z="); .read_orb_kind_occ_num_n_c_z
        case ("n=                           "); .read_n
        case ("n,c,z=                       "); .read_n_c_z
        case ("n,c,z*=                      "); .read_n_c_z_ptr
        case ("n_fun=                       "); .read_n_fun
        case ("num=                         "); .read_n_fun
        case ("occupancy=                   "); .read_occupancy
        case ("values_cutoff=               "); COPPENSORBITAL::read_values_cutoff
        case ("z=                           "); .read_z
        case  default;                        UNKNOWN(word)
      end
   end

   read_orb_kind
   ! Read in the orbital kind ("1s", "2s", "2p" ....)
      stdin.read(.orb_kind)
   end

   read_occupancy
   ! Read in the orbital occupancy
      stdin.read(.occupancy)
   end

   read_n_fun
   ! Read in the number of contracted functions.
      stdin.read(.n_fun)
   end

   read_n ::: leaky
   ! Read in the "n" quantum numbers. NOTE: n_fun must already have been input.
   ENSURE(.n_fun>0,"n_fun is negative; use n_fun= before this command")
      .n.destroy
      .n.create(.n_fun)
      stdin.read(.n)
   end

   read_c ::: leaky
   ! Read in the "c" contraction coefficients. NOTE: n_fun must already have
   ! been input.
   ENSURE(.n_fun>0,"n_fun is negative; use n_fun= before this command")
      .c.destroy
      .c.create(.n_fun)
      stdin.read(.c)
   end

   read_z ::: leaky
   ! Read in the "z" slater function exponents. NOTE: n_fun must already have
   ! been input.
   ENSURE(.n_fun>0,"n_fun is negative; use n_fun= before this command")
      .z.destroy
      .z.create(.n_fun)
      stdin.read(.z)
   end

   read_n_c_z ::: leaky
   ! Read in the "n", "c" and "z" vectors. NOTE: .n_fun must previously have been inputted.
   ENSURE(.n_fun>0,"n_fun is negative; use n_fun= before this command")
      i :: INT
      val :: REAL
      .n.destroy; .c.destroy; .z.destroy
      .n.create(.n_fun)
      .c.create(.n_fun)
      .z.create(.n_fun)
      do i = 1,.n_fun
         stdin.read(val)
         ENSURE(val.is_int,"n number is not integer")
         .n(i) = nint(val)
         stdin.read(.c(i))
         stdin.read(.z(i))
      end
   end

   read_n_c_z_ptr ::: leaky
   ! Read in the "n", "c" and "z" vectors. NOTE: it is not necessary to read in
   ! n_fun, it will be defined from the vector length.
      tmp :: VEC{REAL}*
      i,k :: INT
      stdin.read(tmp)
      ENSURE(mod(tmp.dim,3)==0,"number of data not divisible by three")
      .n_fun = tmp.dim/3
      .n.destroy; .c.destroy; .z.destroy
      .n.create(.n_fun)
      .c.create(.n_fun)
      .z.create(.n_fun)
      k = 1
      do i = 1,3
         ENSURE(tmp(k).is_int,"n number is not integer")
         .n(k) = nint(tmp(k))
         .c(k) = tmp(k+1)
         .z(k) = tmp(k+2)
         k = k + 3
      end
      tmp.destroy
   end

   read_orb_kind_occ_num_n_c_z ::: leaky
   ! Read in everything: the "kind", "occupnacy", "n_fun", and "n", "c" and "z".
      .read_orb_kind
      .read_occupancy
      .read_n_fun
      .read_n_c_z
   end

   read_values_cutoff ::: selfless, private
   ! Read in a cutoff below which values of the the coppensorbital on
   ! a grid are set to zero.
      stdin.read(values_cutoff)
   end

! ====================
! Key related routines
! ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

! =======
! Methods
! =======

   same_as(b) result (res)
   ! Return TRUE if "self" is the same as "b".
      self :: IN
      b :: COPPENSORBITAL, IN
      res :: BIN
      res = .orb_kind == b.orb_kind AND .occupancy == b.occupancy &
            AND .n.same_as(b.n) AND .c.same_as(b.c) AND .z.same_as(b.z)
   end

! ==============================
! Density and derivative density
! ==============================

   density_at_radius(R) result (res) ::: PURE
   ! Returns the value of the coppens orbital density  at radius "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      res = .value_at_radius(R)
      res = .occupancy*res*res
      ! Divide by 4*pi since the radial wavefunction
      ! is multiplied by Y(lm) which is (4pi)^(1/2)
      res = res/(FOUR*PI)

   end

   densities_at_radii(R) result (res) ::: PURE
   ! Returns the values of the coppens density at all the radii "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      res = .values_at_radii(R)
      res = .occupancy*res*res
      ! Divide by 4*pi since the radial wavefunction
      ! is multiplied by Y(lm) which is (4pi)^(1/2)
      res = res/(FOUR*PI)

   end

   value_at_radius(R) result (res) ::: PURE
   ! Returns the value of the coppens orbital at radius "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      j :: INT
      val :: REAL

      res = ZERO

      do j = 1,.n.dim

         val = .c(j) * exp(-.z(j)*R)

         if (.n(j)==1) then; res = res + val
         else;               res = res + val * R**(.n(j)-1)
         end

      end

   end

   values_at_radii(R) result (res) ::: PURE
   ! Returns the values of the coppens orbital at all the radii "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      i,j :: INT
      sm,val,Ri :: REAL

      do i = 1,R.dim

         Ri = R(i)

         sm = ZERO
         do j = 1,.n.dim
            val = .c(j) * exp(-.z(j)*Ri)
            if (.n(j)==1) then; sm = sm + val
            else;               sm = sm + val * Ri**(.n(j)-1)
            end
         end

         res(i) = sm

      end

   end

   radial_density_at_radius(R) result (res) ::: PURE
   ! Returns the radial value of the coppens orbital density at radius "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      res = .value_at_radius(R)
      res = .occupancy*res*res
      res = FOUR*PI*R*R*res

   end

! =============
! Normalisation
! =============

   unnormalise ::: pure
   ! Set the value of the coefficient to correspond to un-normalised Slater
   ! functions -- assuming they are normalised. This saves in computation time.
   ! We got this from Bunge (1993) At. Data Nucl. Data Tables 53, p113
   ! (p 118)
      self :: INOUT

      i,n2 :: INT

      do i = 1,.n_fun
         n2 = 2*.n(i)
         .c(i) = .c(i) * sqrt(TWO*.z(i)/n2.factorial) * (TWO*.z(i))**.n(i)
      end

   end

   renormalise ::: pure
   ! Set the value of the coefficient to correspond to normalised slater
   ! functions --- assuming they are w.r.t. unnormalised functions. 
      self :: INOUT

      i,n2 :: INT

      do i = 1,.n_fun
         n2 = 2*.n(i)
         .c(i) = .c(i) / (sqrt(TWO*.z(i)/n2.factorial) * (TWO*.z(i))**.n(i))
      end

   end

!  ====
!  Dump
!  ====

   do_dump ::: private
   ! Dump object data as text

      stdout.dump("orb_kind",.orb_kind)
      stdout.dump("occupancy",.occupancy)
      stdout.dump("n_fun",.n_fun)
      stdout.dmpp("n",.n)
      stdout.dmpp("c",.c)
      stdout.dmpp("z",.z)

   end

   dump(object_name,ptr) ::: get_from(OBJECT, TYPE?=>COPPENSORBITAL)
   ! Dump object data as text
   end

   dmpp(object_name) ::: get_from(OBJECT, TYPE?=>COPPENSORBITAL)
   ! Dump pointer object data as text
   end

! ======
! Output
! ======

   put
   ! Put the orbital information to "stdout"
      self :: IN

      table :: VEC{TABLE_COLUMN}@

      ! Title
      stdout.flush
      stdout.flush
      stdout.text("=======================")
      stdout.text("Su-Coppens type orbital")
      stdout.text("=======================")
      stdout.flush
      stdout.show("Kind                 =",.orb_kind)
      stdout.show("Electron occupancy   =",.occupancy)
      stdout.show("No. of fit functions =",.n_fun)
      stdout.flush

      ! Table headings
      table.create(3)
      table(1).set_heading("N quantum")
      table(1).set_subhead("  number ")
      table(2).set_heading("Contraction")
      table(3).set_heading("Exponent")
      table(3).set_subhead("/au")

      ! Set table column data
      table(1).set_values(.n)
      table(2).set_values(.c)
      table(3).set_values(.z)

      ! Make the table
      table.put

      ! Clean
      table.destroy

   end

end
