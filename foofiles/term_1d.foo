!-------------------------------------------------------------------------------
!
! TERM_1D
!
! A 1D monomial in a "degree of freedom" or "coordinate index", or
! "variable". The 1D monomial is recognized according to the text
! codes in the d1_codes map. Example: "q(5)^2" or "tpt(6)[2.0,0.3]".
! Here "q" or "tpt" is the variable type or text code. "5" and "6" are
! the degrees of freedon associated with the variable type. And "2"
! and "(2.0,0.3)" are the parameters associated with this variable (in
! the case of "q" it is just the power).
!
! Copyright (C) Dylan Jayatilaka, Patrick Cassam-Chenai, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------


module TERM_1D

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

!  ============
!  Set routines
!  ============

   set_defaults ::: pure
   ! Set defaults
      self :: INOUT

      .descriptor = " "
      .analyzed = FALSE
      .variable = " "
      .variable_code = 0
      .dof = 0

   end

   set_d1_codes(val)
   ! Set the 1D codes which are recognized
      self :: INOUT
      val :: MAP{STR,INT}, IN

      .d1_codes = val

   end

   set_descriptor(val) ::: get_from(OBJECT:set, VAL?=>STR, ARG?=>.descriptor), pure
   ! Generic set
   end

!  =====================
!  Read/process keywords
!  =====================

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: recursive, leaky
   ! Process a keyword "word". Data is inputted from "stdin", unless
   ! "word" is a sequence of blank separated strings. In this case,
   ! the sequence is processed as if it were a separate file.
      keyword :: STR

      select case (keyword)

        case ("}                 "); ! exit case
        case ("descriptor=       "); .read_descriptor
        case ("analyze_descriptor"); .analyze_descriptor
        case ("redirect          "); .redirect
        case ("revert            "); .revert
        case  default ;              UNKNOWN(keyword)

      end

   end

!  ============
!  Read methods
!  ============

   read_descriptor ::: get_from(OBJECT:read_and_set, VAL?=>STR, SET?=>.set_descriptor), private
   ! Generic read and set
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file
   end

!  =======
!  Analyze
!  =======

   analyze_descriptor ::: leaky
   ! Analyze the "descriptor" and decode its information
      self :: INOUT

   ENSURE(NOT .analyzed,"already analyzed")
   ENSURE(.descriptor/=" ","descriptor is blank")
   ENSURE(.parameters.disassociated,"parameters created")
   ENSURE(.d1_codes.allocated,"no d1_codes!")

      n_codes :: INT

      f,l :: INT
      val :: REAL
      textfile :: TEXTFILE@

      ! Normalize descriptor
      .descriptor.to_lower_case
      .descriptor.remove_blanks

      ! Closing brace of e.g. q(3) or m(2) 
      l = .descriptor.index_of(")")
      DIE_IF(l==0,"no closing brace in "//trim(.descriptor))

      ! Opening brace
      f = .descriptor.index_of("(")
      DIE_IF(f==0,"no opening brace in "//trim(.descriptor))
      DIE_IF(f>l ,"opening brace is after closing brace in "//trim(.descriptor))

      ! Get the variable
      .variable = .descriptor(1:f-1)

      ! Get the "dof" index
      .dof = .descriptor(f+1:l-1).to_int

      ! Get the variable code
      .variable_code = .d1_codes.value_for_key(.variable)
      DIE_IF(.variable_code==0,"unrecognised variable type in "//trim(.descriptor))

      ! Any polynomial power? Other parameters?
      if (.descriptor(l+1:)/=" ") then

         ! Get the parameter limits
         f = l + 1
         l = .descriptor.index_of(" ") - 1

         ! Must be recognised parameter list symbol
         DIE_IF(NOT .descriptor(f:f).is_one_of(["^","["]),"wrong parameter symbol: "//.descriptor(f:f))

         ! Power symbol "^"
         if (.descriptor(f:f)=="^") then

             val = .descriptor(f+1:l).to_real
             .parameters.create(1) ! leaky
             .parameters(1) = val

         ! Open bracket symbol "["
         else (.descriptor(f:f)=="[") then

             DIE_IF(.descriptor(l:l)/="]","expecting a close bracket symbol ]")

             if (.descriptor(f+1:l-1).includes(",") then
                textfile.create("{" // .descriptor(f+1:l-1) // "}"
                textfile.read_all(.parameters) ! leaky
                textfile.destroy
             else
                val = .descriptor(f+1:l-1).to_real
                .parameters.create(1) ! leaky
                .parameters(1) = val
             end

         ! Unknown ... so far ...
         else

            DIE("parameter processing not yet implemented")

         end

      end

      ! Set analyzed
      .analyzed = TRUE

   end

!  ============
!  Info methods 
!  ============

   power_of_q result (res) ::: pure
   ! Return the power of the q term, if there, else return 0
      self :: IN
      res :: INT

   ENSURE(.analyzed,"term not analyzed")

      ! Examine if we have it
      res = 0
      if (.variable_code==.d1_codes.value_for_key("q")) then
         ENSURE(.parameters.associated)
         res = int(.parameters(1))
      end

   end

   power_of_p result (res) ::: pure
   ! Return the power of the p term, if there, else return 0
      self :: IN
      res :: INT

   ENSURE(.analyzed,"term not analyzed")

      ! Examine if we have it
      res = 0
      if (.variable_code==.d1_codes.value_for_key("p")) then
         ENSURE(.parameters.associated)
         res = int(.parameters(1))
      end

   end

end
