!------------------------------------------------------------------------------
!
! ADAPTIVE_QUADRATURE:
!
! This module implements adaptive quadratures of 1D functions, and adaptive
! cubatures of 3D functions.
!
! The following adaptive quadratures are available in 1 dimension:
! . Adaptive trapezoid with Simpson's rule acceleration at the end
! . Adaptive Simpson's rule
!
! The following adaptive cubtures are available in 3 dimensions
! . Adaptive trapezoid (1st order method)
! . Adaptive Ewing's rule (3rd order method)
! . Adaptive Tyler rule (3rd order method)
! . Adaptive Hammer-Stroud rule (5th order method)
! . Adaptive Genz-Malik rule (5th order method)
!
! Copyright (C) Dylan Jayatilaka, 2005
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!------------------------------------------------------------------------------

module ADAPTIVE_QUADRATURE

   implicit none

   allowed_kinds :: VEC{STR}(len=25,5), private

   data allowed_kinds/ &
      "adaptive_ewing_41        ", &
      "adaptive_genz_malik_80   ", &
      "adaptive_hammer_stroud_58", &
      "adaptive_trapezoid       ", &
      "adaptive_tyler_53        ", /

   ! Points of a 3x3x3 cube in standard order
   cube3 :: MAT{INT}(3,27), private
   data cube3(1:3,1:27)/            &
      -1,-1,-1,  0,-1,-1,  1,-1,-1, &
      -1, 0,-1,  0, 0,-1,  1, 0,-1, &
      -1, 1,-1,  0, 1,-1,  1, 1,-1, &
      -1,-1, 0,  0,-1, 0,  1,-1, 0, &
      -1, 0, 0,  0, 0, 0,  1, 0, 0, & ! Point 14 is the center
      -1, 1, 0,  0, 1, 0,  1, 1, 0, &
      -1,-1, 1,  0,-1, 1,  1,-1, 1, &
      -1, 0, 1,  0, 0, 1,  1, 0, 1, &
      -1, 1, 1,  0, 1, 1,  1, 1, 1  /

   ! The corner indices of cube3
   corners :: VEC{INT}(8), private
   data corners(1:8)/1,3,7,9,19,21,25,27/

   ! Everything except the corner indices of cube3
   non_corners :: VEC{INT}(19), private
   data non_corners(1:19)/2,4,5,6,8,10,11,12,13,14,15,16,17,18,20,22,23,24,26/

   ! The indices of the 8 subcubes of a cube3
   subcube :: MAT{INT}(8,8), private
   data subcube(1:8,1:8)/      &
       1, 2, 4, 5,10,11,13,14, &
       2, 3, 5, 6,11,12,14,15, &
       4, 5, 7, 8,13,14,16,17, &
       5, 6, 8, 9,14,15,17,18, &
      10,11,13,14,19,20,22,23, &
      11,12,14,15,20,21,23,24, &
      13,14,16,17,22,23,25,26, &
      14,15,17,18,23,24,26,27  /

   ! Body centered points of a 5x5x5 cube in standard order
   bcc3 :: MAT{INT}(3,35), private
   data bcc3(1:3,1:35)/             &
      -2,-2,-2,  0,-2,-2,  2,-2,-2, &
      -2, 0,-2,  0, 0,-2,  2, 0,-2, &
      -2, 2,-2,  0, 2,-2,  2, 2,-2, &
      -2,-2, 0,  0,-2, 0,  2,-2, 0, &
      -2, 0, 0,  0, 0, 0,  2, 0, 0, & ! Point 14 is the center
      -2, 2, 0,  0, 2, 0,  2, 2, 0, &
      -2,-2, 2,  0,-2, 2,  2,-2, 2, &
      -2, 0, 2,  0, 0, 2,  2, 0, 2, &
      -2, 2, 2,  0, 2, 2,  2, 2, 2, & ! Now follows the subcube bcc points
      -1,-1,-1,  1,-1,-1, -1, 1,-1,  1, 1,-1, &
      -1,-1, 1,  1,-1, 1, -1, 1, 1,  1, 1, 1  /

   ! The indices of a body centered cube in a bcc3
   ! The body centered point is the last
   bcc :: VEC{INT}(9), private
   data bcc(1:9)/1,3,7,9,19,21,25,27,14/

   ! Everything except the body centered points of a bcc3
   non_bcc :: VEC{INT}(26), private
   data non_bcc(1:26)/2,4,5,6,8,10,11,12,13,15,16,17,18,20,22,23,24,26, &
                      28,29,30,31,32,33,34,35/

   ! The indices of the 8 sub-bcc cubes of a bcc3
   ! The body centered point is the last in each row
   subbcc :: MAT{INT}(9,8), private
   data subbcc(1:9,1:8)/          &
       1, 2, 4, 5,10,11,13,14,28, &
       2, 3, 5, 6,11,12,14,15,29, &
       4, 5, 7, 8,13,14,16,17,30, &
       5, 6, 8, 9,14,15,17,18,31, &
      10,11,13,14,19,20,22,23,32, &
      11,12,14,15,20,21,23,24,33, &
      13,14,16,17,22,23,25,26,34, &
      14,15,17,18,23,24,26,27,35  /

   ! Origin point
   e0 :: VEC{INT}(3), private = [0,0,0]

   ! Fully symmetric e1 points
   e1_fs :: MAT{INT}(3,6), private
   data e1_fs(1:3,1:6)/ &
      -1, 0, 0, &
       1, 0, 0, &
       0,-1, 0, &
       0, 1, 0, &
       0, 0,-1, &
       0, 0, 1  /

   ! Fully symmetric e2 points
   e2_fs :: MAT{INT}(3,12), private
   data e2_fs(1:3,1:12)/ &
      -1,-1, 0, &
       1,-1, 0, &
      -1, 1, 0, &
       1, 1, 0, &
      -1, 0,-1, &
       1, 0,-1, &
      -1, 0, 1, &
       1, 0, 1, &
       0,-1,-1, &
       0, 1,-1, &
       0,-1, 1, &
       0, 1, 1  /

   ! Fully symmetric e3 points
   e3_fs :: MAT{INT}(3,8), private
   data e3_fs(1:3,1:8)/ &
      -1,-1,-1, &
       1,-1,-1, &
      -1, 1,-1, &
       1, 1,-1, &
      -1,-1, 1, &
       1,-1, 1, &
      -1, 1, 1, &
       1, 1, 1  /

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

!  ===========
!  Set methods
!  ===========

   set_accuracy(accuracy) ::: PURE
   ! Set the accuracy of integration. Used only for adaptive integration methods.
      self :: INOUT
      accuracy :: REAL, IN

   ENSURE(accuracy>ZERO,"must have +ve accuracy")

      .accuracy = accuracy

   end

   set_algorithm(alg) ::: PURE
   ! Set the kind of algorithm to use.
      self :: INOUT
      alg :: STR, IN

   ENSURE(alg.is_one_of(allowed_kinds),"unknown algorithm, "//trim(alg))

      .algorithm = alg.lower_cased

      select case (.algorithm)
      case ("adaptive_ewing_41        ")
      case ("adaptive_genz_malik_80   ")
      case ("adaptive_hammer_stroud_58")
      case ("adaptive_trapezoid       ")
      case ("adaptive_tyler_53        ")
      end

   end

   set_limits(limits) ::: PURE
   ! Read in the limits of integration
      self :: INOUT
      limits :: VEC{REAL}(2), IN

   ENSURE(limits(1)<=limits(2),"lower limit must be smaller than upper limit")

      .lower_limit = limits(1)
      .upper_limit = limits(2)

   end

   set_lower_limit(limit) ::: PURE
   ! Set the lower limit of integration
      self :: INOUT
      limit :: REAL, IN

   ENSURE(limit<=.lower_limit,"lower limit must be smaller than upper")

      .lower_limit = limit

   end

   set_upper_limit(limit) ::: PURE
   ! Set the upper limit of integration
      self :: INOUT
      limit :: REAL, IN

   ENSURE(limit>=.lower_limit,"upper limit must be bigger than lower")

      .upper_limit = limit

   end

!  ===========================
!  Cubature points and weights
!  ===========================

   set_T53 ::: leaky, private, PURE
   ! Set the Tyler cubature and weights.
   ! Data taken from the free HIntLib of Rudolf Schurer.
   ! Original ref: G.W. Tyler (1953), Numerical Integration of functions of
   ! several variables, Can. J. Math. 5, p. 393
      self :: INOUT

      i,n_pt,n,m :: INT
      n_pt = e1_fs.dim2

      .point.create(3,n_pt)
      .weight.create(n_pt)

      n = 0
      m = e1_fs.dim2

      ! e1_fs points
      .point(:,n+1:n+m) = ONE*e1_fs            
      .weight(n+1:n+m)  = SIXTH

   end

   set_HS58 ::: leaky, private, PURE
   ! Set the Hammer-Stroud cubature points and weights.
   ! Data taken from the free HIntLib of Rudolf Schurer.
   ! Original ref: P.C. Hammer and A.H. Stroud (1958), Mathematical Tables and
   ! Other Aids to Computation 12, p. 272
      self :: INOUT

      i,d,n_pt,n,m :: INT
      w0,w1,w2, l1,l2 :: REAL

      ! The dimension
      d = 3                                     

      w0 = ONE*(25*d*d - 115*d + 162)/162
      w1 = ONE*(70 - 25*d)/162
      w2 = ONE*(25)/324

      ! Point scales
      l1 = sqrt(ONE*(3)/5)                     
      l2 = sqrt(ONE*(3)/5)

      n_pt = 1 + e1_fs.dim2 + e2_fs.dim2

      .point.create(3,n_pt)
      .weight.create(n_pt)

      ! Origin
      n = 0
      m = 1
      .point(:,n+1) = ONE*e0                    
      .weight(n+1)  = w0

      ! e1_fs points
      n = n + m
      m = e1_fs.dim2
      .point(:,n+1:n+m) = l1*e1_fs              
      .weight(n+1:n+m)  = w1

      ! e2_fs points
      n = n + m
      m = e2_fs.dim2
      .point(:,n+1:n+m) = l2*e2_fs              
      .weight(n+1:n+m)  = w2

   end

   set_GM80 ::: leaky, private, PURE
   ! Set the Genz-Malik cubature points and weights.
   ! Data taken from the free HIntLib of Rudolf Schurer.
   ! Original ref: A.C. Genz and A.A. Malik (1980) J. Comp. App. Math. 6 p. 295-302
      self :: INOUT

      i,d,n_pt,n,m :: INT
      w1,w2,w3,w4,w5, e1,e2,e3,e4, l2,l3,l4,l5 :: REAL

      ! The dimension
      d = 3                                     

      ! The 7th order weights
      w1 = ONE*(12824 - 9120*d + 400*d*d)/19683 
      w2 = ONE*(980)/6561
      w3 = ONE*( 1820 -  400*d)/19683
      w4 = ONE*(200)/19683
      w5 = ONE*( 6859)/19683/EIGHT

      ! Embedded 5th order weights
      e1 = ONE*(  729 -  950*d +  50*d*d)/729   
      e2 = ONE*(245)/486
      e3 = ONE*(  265 -  100*d)/1458
      e4 = ONE*(25)/729

      ! Point scales
      l2 = sqrt(ONE*(9)/70)                     
      l3 = sqrt(ONE*(9)/10)
      l4 = sqrt(ONE*(9)/10)
      l5 = sqrt(ONE*(9)/19)

      n_pt = 1 + 2*e1_fs.dim2 + e2_fs.dim2 + e3_fs.dim2

      .point.create(3,n_pt)
      .weight.create(n_pt)
      .embedded_weight.create(n_pt-e3_fs.dim2)

      ! Origin
      n = 0
      m = 1
      .point(:,n+1) = ONE*e0                    
      .weight(n+1)  = w1
      .embedded_weight(n+1) = e1

      ! e1_fs points
      n = n + m
      m = e1_fs.dim2
      .point(:,n+1:n+m) = l2*e1_fs              
      .weight(n+1:n+m)  = w2
      .embedded_weight(n+1:n+m) = e2

      ! e1_fs points
      n = n + m
      m = e1_fs.dim2
      .point(:,n+1:n+m) = l3*e1_fs              
      .weight(n+1:n+m)  = w3
      .embedded_weight(n+1:n+m) = e3

      ! e2_fs points
      n = n + m
      m = e2_fs.dim2
      .point(:,n+1:n+m) = l4*e2_fs              
      .weight(n+1:n+m)  = w4
      .embedded_weight(n+1:n+m) = e4

      ! e3_fs points
      n = n + m
      m = e3_fs.dim2
      .point(:,n+1:n+m) = l5*e3_fs              
      .weight(n+1:n+m)  = w5

   end

!  ===================
!  Adaptive quadrature
!  ===================

   adaptive_integrate(func) result (res)
   ! Adaptively integrate the function "func".
      interface
         func(x) result (res)
            x :: REAL, IN
            res :: REAL
         end
      end
      res :: REAL

   ENSURE(.algorithm.is_one_of(allowed_kinds),"unknown algorithm, "//trim(alg))

      select case (.algorithm)
      case ("adaptive_trapezoid"); res = .adaptive_trapezoid_integrate(func)
      case ("adaptive_simpson  "); res = .adaptive_simpson_integrate(func)
      case default
         print *, "Unknown algorithm, "//trim(.algorithm)
      end

   end

   adaptive_trapezoid_integrate(func) result (res) ::: private
   ! Integrate the function "func" using adaptive trapezoidal rule with Simpsons
   ! approximation acceleration on the final step.
      interface
         func(x) result (res)
            x :: REAL, IN
            res :: REAL
         end
      end
      res :: REAL

      a,b,fa,fb,trap :: REAL

      a  = .lower_limit
      b  = .upper_limit

      fa = func(a)
      fb = func(b)
      trap = HALF*(b-a)*(fa+fb)

      res = .adaptive_trapezoid_integrate(func,a,b,fa,fb,trap,.accuracy)

   end

   adaptive_trapezoid_integrate(func,a,b,fa,fb,trap,accuracy) result (res) ::: recursive, private
   ! Integrate the function "func" using adaptive trapezoidal rule with Simpsons
   ! approximation acceleration on the final step. "a" and "b" are the limits of
   ! integrations, "fa" and "fb" are the corresponding function values, "trap"
   ! is the value of the trapezoid approximation on the interval, and "accuracy"
   ! is the required accuracy of the integral.
      interface
         func(x) result (res)
            x :: REAL, IN
            res :: REAL
         end
      end
      a,b,fa,fb,trap,accuracy :: REAL, IN
      res :: REAL

      h,h4,m,fm,trap1,trap2,trapL,trapR,left,right,acc2 :: REAL

      m  = HALF*(a+b)
      fm = func(m)

      h  = b-a
      h4 = QUARTER*h

      trap1 = trap
      trapL = h4*(fa+fm)
      trapR = h4*(fm+fb)
      trap2 = trapL + trapR

      if (abs(trap1-trap2)<THREE*accuracy) then
         res = (FOUR*trap2 - trap1)/THREE
      else
         acc2  = HALF*accuracy
         left  = .adaptive_trapezoid_integrate(func,a,m,fa,fm,trapL,acc2)
         right = .adaptive_trapezoid_integrate(func,m,b,fm,fb,trapR,acc2)
         res = left + right
      end

   end

   adaptive_simpson_integrate(func) result (res) ::: private
   ! Integrate the function "func" using adaptive Simpson rule with
   ! acceleration.
      interface
         func(x) result (res)
            x :: REAL, IN
            res :: REAL
         end
      end
      res :: REAL

      a,m,b,h,fa,fm,fb,simp :: REAL

      a  = .lower_limit
      b  = .upper_limit
      m  = HALF*(a+b)
      h  = (b-a)

      fa = func(a)
      fm = func(m)
      fb = func(b)

      simp = THIRD*h*(fa+FOUR*fm+fb)

      res = .adaptive_simpson_integrate(func,a,m,b,fa,fm,fb,simp,.accuracy)

   end

   adaptive_simpson_integrate(func,a,m,b,fa,fm,fb,simp,accuracy) result (res) ::: recursive, private
   ! Integrate the function "func" using adaptive Simpson rule with
   ! acceleration. "a", "m" and "b" are the lower, midpoint, and upper limits of
   ! integration, while "fa", "fm" and "fb" are the corresponding function
   ! values. "simp" is the Simpsons approximation for the integral over [a,b],
   ! and "accuracy" is the required accuracy of the integral.
      interface
         func(x) result (res)
            x :: REAL, IN
            res :: REAL
         end
      end
      a,m,b,fa,fm,fb,simp,accuracy :: REAL, IN
      res :: REAL

      h,h6,m0,m1,m2,m3,m4,f0,f1,f2,f3,f4,s1,sl,sr,s2,left,right,acc2 :: REAL

      h  = HALF*(b-a)
      h6 = SIXTH*h
      m0 = a
      m1 = HALF*(a+m)
      m2 = m
      m3 = HALF*(m+b)
      m4 = b

      f0 = fa
      f1 = func(m1)
      f2 = fm
      f3 = func(m3)
      f4 = fb

      s1 = simp
      sl = h6*(f0+FOUR*f1+f2)
      sr = h6*(f2+FOUR*f3+f4)
      s2 = sl + sr

      if (abs(s1-s2)<15.0d0*accuracy) then
         res = (16.0d0*s2 - s1)/15.0d0
      else
         acc2  = HALF*accuracy
         left  = .adaptive_simpson_integrate(func,m0,m1,m2,f0,f1,f2,sl,acc2)
         right = .adaptive_simpson_integrate(func,m2,m3,m4,f2,f3,f4,sr,acc2)
         res = left + right
      end

   end

!  =================
!  Adaptive cubature
!  =================

   adaptive_integrate(func) result (res)
   ! Adaptively integrate the 3D function "func".
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      res :: REAL

   ENSURE(.algorithm.is_one_of(allowed_kinds),"unknown algorithm, "//trim(alg))

      select case (.algorithm)
      case ("adaptive_ewing_41        "); res = .adaptive_E41_integrate(func)
      case ("adaptive_genz_malik_80   "); res = .adaptive_GM80_integrate(func)
      case ("adaptive_hammer_stroud_58"); res = .adaptive_HS58_integrate(func)
      case ("adaptive_trapezoid       "); res = .adaptive_trapezoid_integrate(func)
      case ("adaptive_tyler_53        "); res = .adaptive_T53_integrate(func)
      end

   end

   adaptive_trapezoid_integrate(func) result (res) ::: private
   ! Integrate the 3D function "func" using adaptive (1st order) trapezoidal
   ! rule.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      res :: REAL

      c2 :: MAT{REAL}(3,8)
      v2 :: VEC{REAL}(8)
      m  :: VEC{REAL}(3)
      a,b,h,h2,trap :: REAL

      ! Integrate over a cube with these limits
      a  = .lower_limit
      b  = .upper_limit
      h  = (b-a)
      m = HALF*(a+b)
      h2 = HALF*h
    ! c2 = h2*cube2 + spread(m,dim=2,ncopies=8)
      c2 = h2*cube3(:,corners) + spread(m,dim=2,ncopies=8)

      ! calculate the values on them
      call func(c2,v2)

      .n_points = 8

      trap = EIGHTH*h*h*h*VEC{REAL}:sum_elements(v2)

      res = .adaptive_trapezoid_integrate(func,c2,v2,h,trap,.accuracy)

   end

   adaptive_trapezoid_integrate(func,c2,v2,h,trap,accuracy) result (res) ::: recursive, private
   ! Integrate the function "func" using adaptive (1st order) trapezoidal rule.
   ! "c2" are the positions of the 2x2x2 corner points in standard order (see
   ! the "cube3" and "corners" parameters). "v2" are the corresponding function
   ! values. "trap" is the value of the trapezoid approximation on the cube, "h"
   ! is the width of the cube which will be divided, and "accuracy" is the
   ! required accuracy of the integral.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      c2 :: MAT{REAL}(3,8)
      v2 :: VEC{REAL}(8)
      h,trap,accuracy :: REAL
      res :: REAL

      c3  :: MAT{REAL}(3,27)
      sc3 :: MAT{REAL}(3,8)
      v3 :: VEC{REAL}(27)
      w2 :: VEC{REAL}(19)
      sv3,subtrap :: VEC{REAL}(8)
      m  :: VEC{REAL}(3)
      i :: INT
      h2,fac,trap8,acc,acc8 :: REAL

      ! Copy the corner points and values
      c3(:,corners) = c2
      v3(corners)   = v2

      ! New subcube side length
      h2 = HALF*h

      ! Midpoint of cube of points "c3"
      m = EIGHTH*VEC{REAL}:sum_elements(c2,dim=2)

      ! Calculate the new edge points
      c3(:,non_corners) = h2*cube3(:,non_corners) + spread(m,dim=2,ncopies=19)

      ! Calculate the edge values
      call func(c3(:,non_corners),w2)
      .n_points = .n_points + 19
      v3(non_corners) = w2

      ! Get the 8 trapezoid values
      fac = EIGHTH*h2*h2*h2
      do i = 1,8
         sv3 = v3(subcube(:,i))
         subtrap(i) = fac*VEC{REAL}:sum_elements(sv3)
      end

      ! Sum them up ...
      trap8 = VEC{REAL}:sum_elements(subtrap)

      ! Good enough approximation?
      acc = THREE*accuracy
      if (abs(trap-trap8)<acc) then
         res = trap8
      else ! divide again
         acc8 = EIGHTH*accuracy
         res = ZERO
         do i = 1,8
            sc3 = c3(:,subcube(:,i))
            sv3 = v3(subcube(:,i))
            res = res + .adaptive_trapezoid_integrate(func,sc3,sv3,h2,subtrap(i),acc8)
         end
      end

   end

   adaptive_E41_integrate(func) result (res) ::: private
   ! Integrate the 3D function "func" using adaptive (3rd order) Ewing's rule.
   ! Original ref: G.M. Ewing (1941), Am. Math. Monthly 48, p.134
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      res :: REAL

      b2 :: MAT{REAL}(3,9)
      v2 :: VEC{REAL}(9)
      m  :: VEC{REAL}(3)
      a,b,h,h2,h4,vol,fac1,fac2,ewe :: REAL

      ! Integrate over a cube with these limits
      a  = .lower_limit
      b  = .upper_limit
      h  = (b-a)
      m = HALF*(a+b)
      h2 = HALF*h
      h4 = QUARTER*h
      b2 = h4*bcc3(:,bcc) + spread(m,dim=2,ncopies=9)

      ! Calculate the values on the points
      call func(b2,v2)

      ! There were 9 evaluations
      .n_points = 9

      vol  = h2*h2*h2
      fac1 = THIRD*EIGHTH*vol
      fac2 = TWOTHIRD*vol
      ewe  = fac1*VEC{REAL}:sum_elements(v2(1:8)) + fac2*v2(9)
      res  = .adaptive_E41_integrate(func,b2,v2,h,ewe,.accuracy)

   end

   adaptive_E41_integrate(func,b2,v2,h,ewe,accuracy) result (res) ::: recursive, private
   ! Integrate the function "func" using an adaptive (3rd order) Ewing's rule.
   ! "b2" are the positions of the body centered points in standard order (see
   ! the "bcc" and "bcc3" parameters). "v2" are the corresponding function
   ! values. "ewe" is the value of the Ewing approximant on the cube, "h" is the
   ! width of the cube to be divided, and "accuracy" is the required accuracy of
   ! the integral.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      b2 :: MAT{REAL}(3,9)
      v2 :: VEC{REAL}(9)
      h,ewe,accuracy :: REAL
      res :: REAL

      b3  :: MAT{REAL}(3,35)
      sb3 :: MAT{REAL}(3,9)
      v3  :: VEC{REAL}(35)
      w2  :: VEC{REAL}(26)
      sv3 :: VEC{REAL}(9)
      subewe :: VEC{REAL}(8)
      m  :: VEC{REAL}(3)
      i :: INT
      h2,h4,vol,fac1,fac2,ewe8,acc,acc8 :: REAL

      ! Copy the BCC points and values
      b3(:,bcc) = b2
      v3(bcc)   = v2

      ! New subcube side length
      h2 = HALF*h
      h4 = QUARTER*h

      ! Midpoint of cube
      m = b2(:,9)

      ! Calculate the new BCC points
      b3(:,non_bcc) = h4*bcc3(:,non_bcc) + spread(m,dim=2,ncopies=26)

      ! Calculate function values
      call func(b3(:,non_bcc),w2)

      ! It cost 26 evaluations
      .n_points = .n_points + 26

      v3(non_bcc) = w2
      vol  = h2*h2*h2
      fac1 = THIRD*EIGHTH*vol
      fac2 = TWOTHIRD*vol
      do i = 1,8
         sv3 = v3(subbcc(:,i))
         subewe(i) = fac1*VEC{REAL}:sum_elements(sv3(1:8)) + fac2*sv3(9)
      end

      ! The sum of the 8 Ewing subcubes
      ewe8 = VEC{REAL}:sum_elements(subewe)

      ! Is it good enough?
      acc = accuracy
      if (abs(ewe-ewe8)<acc) then
         res = ewe8
      else ! divide again
         acc8 = EIGHTH*accuracy
         res = ZERO
         do i = 1,8
            sb3 = b3(:,subbcc(:,i))
            sv3 = v3(subbcc(:,i))
            res = res + .adaptive_E41_integrate(func,sb3,sv3,h2,subewe(i),acc8)
         end
      end

   end

   adaptive_T53_integrate(func) result (res) ::: leaky, private
   ! Integrate 3D function "func" using an adaptive (3rd order) Tyler rule.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      res :: REAL

      pts :: MAT{REAL}(3,.point.dim2)
      val :: VEC{REAL}(.point.dim2)
      m :: VEC{REAL}(3)
      n :: INT
      a,b,h,h2,ty :: REAL

      ! Set points & weights (leaky)
      .set_T53

      ! Integrate over a cube with these limits
      a  = .lower_limit
      b  = .upper_limit

      ! Cube width
      h  = (b-a)
      ! Cube midpoint
      m = HALF*(a+b)

      n = .point.dim2
      h2 = HALF*h
      pts = h2*.point + spread(m,dim=2,ncopies=n)

      ! Calculate function values
      call func(pts,val)

      .n_points = n

      ty = h*h*h*VEC{REAL}:sum_elements(.weight*val)
      res = .adaptive_T53_integrate(func,m,h,ty,.accuracy)

   end

   adaptive_T53_integrate(func,m,h,ty,accuracy) result (res) ::: recursive, private
   ! Integrate function "func" using an adaptive (3rd order) Tyler rule.
   ! "m" is the midpoint of the cube, "h" is its width, "ty" is the Tyler
   ! approximation for the integral over the cube, and "accuracy" is the
   ! required accuracy of the integral.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      m :: VEC{REAL}(3)
      h,ty,accuracy :: REAL
      res  :: REAL

      pts  :: MAT{REAL}(3,8*.point.dim2)
      val  :: VEC{REAL}(8*.point.dim2)
      m8   :: MAT{REAL}(3,8)
      sub8 :: VEC{REAL}(8)
      h2,h4,vol,ty8,acc,acc8 :: REAL
      n,i,k :: INT

      n  = .point.dim2

      h2 = HALF*h
      h4 = QUARTER*h
      m8 = h4*bcc3(:,28:35) + spread(m,dim=2,ncopies=8)

      ! 8 subcubes of T53 points
      k = 0
      do i = 1,8
         pts(:,k+1:k+n) = h4*.point + spread(m8(:,i),dim=2,ncopies=n)
         k = k + n
      end

      ! Calculate function values
      call func(pts,val)

      ! This is the # of function evals
      .n_points = .n_points + 8*n

      vol = h2*h2*h2
      k = 0
      do i = 1,8
         sub8(i) = vol*VEC{REAL}:sum_elements(.weight*val(k+1:k+n))
         k = k + n
      end
      ty8 = VEC{REAL}:sum_elements(sub8)

      ! Is it good enough?
      acc = accuracy
      if (abs(ty-ty8)<acc) then
         res = ty8
      else ! divide again
         acc8 = EIGHTH*accuracy
         res = ZERO
         do i = 1,8
            res = res + .adaptive_T53_integrate(func,m8(:,i),h2,sub8(i),acc8)
         end
      end

   end

   adaptive_HS58_integrate(func) result (res) ::: leaky, private
   ! Integrate 3D function "func" using an adaptive (5th order) Hammer-Stroud rule.
   ! Original ref: P.C. Hammer and A.H. Stroud (1958), Mathematical Tables and
   ! Other Aids to Computation 12, p. 272
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      res :: REAL

      pts :: MAT{REAL}(3,.point.dim2)
      val :: VEC{REAL}(.point.dim2)
      m :: VEC{REAL}(3)
      n :: INT
      a,b,h,h2,hs :: REAL

      ! Set points & weights (leaky)
      .set_HS58

      ! Integrate over a cube with these limits
      a  = .lower_limit
      b  = .upper_limit

      ! Cube width
      h  = (b-a)

      ! Cube midpoint
      m = HALF*(a+b)

      n = .point.dim2
      h2 = HALF*h
      pts = h2*.point + spread(m,dim=2,ncopies=n)

      ! Calculate function values
      call func(pts,val)

      .n_points = n

      hs = h*h*h*VEC{REAL}:sum_elements(.weight*val)
      res = .adaptive_HS58_integrate(func,m,h,hs,.accuracy)

   end

   adaptive_HS58_integrate(func,m,h,hs,accuracy) result (res) ::: recursive, private
   ! Integrate function "func" using an adaptive (5th order) Hammer-Stroud rule.
   ! "m" is the midpoint of the cube, "h" is its width, "hs" is the
   ! Hammer-Stroud approximation for the integral over the cube, and "accuracy"
   ! is the required accuracy of the integral.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      m :: VEC{REAL}(3)
      h,hs,accuracy :: REAL
      res  :: REAL

      pts  :: MAT{REAL}(3,8*.point.dim2)
      val  :: VEC{REAL}(8*.point.dim2)
      m8   :: MAT{REAL}(3,8)
      sub8 :: VEC{REAL}(8)
      h2,h4,vol,hs8,acc,acc8 :: REAL
      n,i,k :: INT

      n  = .point.dim2

      h2 = HALF*h
      h4 = QUARTER*h
      m8 = h4*bcc3(:,28:35) + spread(m,dim=2,ncopies=8)

      ! 8 subcubes of HS58 points
      k = 0
      do i = 1,8
         pts(:,k+1:k+n) = h4*.point + spread(m8(:,i),dim=2,ncopies=n)
         k = k + n
      end

      ! Calculate function values
      call func(pts,val)

      ! This is the # of function evals
      .n_points = .n_points + 8*n

      vol = h2*h2*h2
      k = 0
      do i = 1,8
         sub8(i) = vol*VEC{REAL}:sum_elements(.weight*val(k+1:k+n))
         k = k + n
      end
      hs8 = VEC{REAL}:sum_elements(sub8)

      ! Is it good enough?
      acc = accuracy
      if (abs(hs-hs8)<acc) then
         res = hs8
      else ! divide again
         acc8 = EIGHTH*accuracy
         res = ZERO
         do i = 1,8
            res = res + .adaptive_HS58_integrate(func,m8(:,i),h2,sub8(i),acc8)
         end
      end

   end

   adaptive_GM80_integrate(func) result (res) ::: leaky, private
   ! Integrate 3D function "func" using an adaptive (7th order) Genz-Malik rule.
   ! Original ref: A.C. Genz and A.A. Malik (1980) J. Comp. App. Math. 6 p. 295-302
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      res :: REAL
      m :: VEC{REAL}(3)
      a,b,h :: REAL
      .set_GM80           ! Set points & weights (leaky)
      a  = .lower_limit   ! Integrate over a cube with these limits
      b  = .upper_limit
      h  = (b-a)          ! Cube width
      m = HALF*(a+b)      ! Cube midpoint
      .n_points = 0
      res = .adaptive_GM80_integrate(func,m,h,.accuracy)
   end

   adaptive_GM80_integrate(func,m,h,accuracy) result (res) ::: recursive, private
   ! Integrate function "func" using an adaptive (7th order) Genz-Malik rule.
   ! "m" is the midpoint of the cube, "h" is its width, and "accuracy" is the
   ! required accuracy of the integral.
      interface
         func(x,res)
            x :: MAT{REAL}, IN
            res :: VEC{REAL}, OUT
         end
      end
      m :: VEC{REAL}(3)
      h,accuracy :: REAL
      res :: REAL

      pts :: MAT{REAL}(3,.point.dim2)
      val :: VEC{REAL}(.point.dim2)
      m8  :: MAT{REAL}(3,8)
      h2,h4,vol,gm7,gm5,acc,acc8 :: REAL
      n,ne,i :: INT

      n  = .point.dim2
      ne = .embedded_weight.dim

      h2 = HALF*h
      pts = h2*.point + spread(m,dim=2,ncopies=n)

      ! Calculate function values
      call func(pts,val)

      ! This is the # of function evals
      .n_points = .n_points + n

      vol = h*h*h
      gm7 = vol*VEC{REAL}:sum_elements(.weight*val)
      gm5 = vol*VEC{REAL}:sum_elements(.embedded_weight*val(1:ne))

      ! Good enough?
      acc = accuracy
      if (abs(gm7-gm5)<acc) then
         res = gm7
      else ! divide again
         acc8 = EIGHTH*accuracy
         h4 = QUARTER*h
         m8 = h4*bcc3(:,28:35) + spread(m,dim=2,ncopies=8)
         res = ZERO
         do i = 1,8
            res = res + .adaptive_GM80_integrate(func,m8(:,i),h2,acc8)
         end
      end

   end

!  ==============
!  Test functions
!  ==============

   test_sin(x) result (res) ::: selfless, public, pure
   ! Sine function for integrating
      x :: REAL, IN
      res :: REAL

      res = sin(x)

   end

   test_x2(x) result (res) ::: selfless, public, pure
   ! x^2 function for integrating
      x :: REAL, IN
      res :: REAL

      res = x*x

   end

   test_x3(x) result (res) ::: selfless, public, pure
   ! x^3 function for integrating
      x :: REAL, IN
      res :: REAL

      res = x*x*x

   end

   test_x4(x) result (res) ::: selfless, public, pure
   ! Sine function for integrating
      x :: REAL, IN
      res :: REAL

      res = x*x*x*x

   end

   test_gauss(x,res) ::: selfless, public, PURE
   ! Sine function for integrating
      self :: IN
      x :: MAT{REAL}, IN
      res :: VEC{REAL}, OUT

   ENSURE(x.dim2==res.dim,"incompatible arrays")

      v :: VEC{REAL}(3)
      r :: REAL
      i :: INT

      do i = 1,res.dim
         v = x(:,i)
         r = sqrt(dot_product(v,v))
         res(i) = exp(-r*r*r)
      end

   end

end
