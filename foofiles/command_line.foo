!---------------------------------------------------------------------------
!
! COMMAND_LINE: Object for processing the command line.
!
! The command line is separated into separate items comprising unix-style
! options, their arguments, and items (which is the whole command line).
!
! By default it is *assumed* that every -option is followed by an option
! value, like: -option <value> ...
!   *unless* immediately followed by another option,
!   like: -option1 -option2 -option3, or
!   like: -option1 -option2 -option3 <value3> arg1 arg2
!
! Copyright (C) Dylan Jayatilaka, 2014
! Copyright (C) Dylan Jayatilaka, 2021
!
! ===
!
! This library is free software; you can redistribute it and/or modify it under
! the terms of the GNU Library General Public License as published by the Free
! Software Foundation; either version 2 of the License, or (at your option) any
! later version.
!
! This library is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
! FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more
! details.
!
! You should have received a copy of the GNU Library General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
!
! $Id: command_line.foo $
!---------------------------------------------------------------------------

module COMMAND_LINE

   implicit none

contains

! ==========
! Allocation
! ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts of self
      self :: INOUT

      .command_optarg.destroy
      .item.destroy
      .option.destroy
      .option_value.destroy
      .arg.destroy

   end

! ===========
! Set methods
! ===========

   set_defaults ::: PURE
   ! Set up the default settings
      self :: INOUT

      .command   = "?"
      .n_items   = 0
      .n_options = 0
      .n_args    = 0

   end

   process_options ::: public
   ! Process unix-style options on the command line
      self :: INOUT

      token,opt :: STR
      i,length :: INT
      expecting_option_value :: BIN

      ! Defaults

      ! Get the command line arguments
      if (IO_IS_ALLOWED) then
      call get_command_argument(0,token)
      end
      PARALLEL_BROADCAST(token,tonto.master_processor)

      if (token==" ") token = "?"
      .command = token

      ! Loop over command line & process

      i = 0
      .n_items = 0
      .command_arguments = " "
      expecting_option_value = FALSE

      do

         i = i + 1

         if (IO_IS_ALLOWED) then
         call get_command_argument(i,token,length)
         end
         PARALLEL_BROADCAST(token,tonto.master_processor)
         PARALLEL_BROADCAST(length,tonto.master_processor)

         if (length==0) exit

         ! New item
         .n_items = .n_items + 1

         ! Add to item list
         .item.append(token)

         ! Append command_arguments
         .command_arguments = trim(.command_arguments) // " " // trim(token.to_quoted_str) // " "

         ! Is it an option?
         if (token(1:1)=="-") then

            ! Add it to list
            opt = token
            .option.append(trim(token(2:)))
            .option_value.append("none")
            .n_options = .n_options + 1
            expecting_option_value = TRUE

         ! Is it an option value?
         else if (expecting_option_value) then

            .option_value(.n_options) = token
            expecting_option_value = FALSE

         else

            ! Add command line argument
            .arg.append(token)
            .n_args = .n_args + 1
            expecting_option_value = FALSE

         end

      end

      .command_arguments = trim(.command_arguments)

      ENSURE(.n_items==(.n_args+2*.n_options),"inconsistent command line processing")


      ! Make command_optarg

      .command_optarg.create(.n_options+.n_args)

      ! Options
      do i = 1,.n_options
         .command_optarg(i) = "-" // trim(.option(i)) // " " // trim(.option_value(i).to_quoted_str)
      end

      ! Arguments
      do i = 1,.n_args
         .command_optarg(.n_options+i) = trim(.arg(i))
      end

   end

! ===============
! Inquiry methods
! ===============

   has_items result (res) ::: pure
   ! Return TRUE if there are items on the command line
   ! WARNING: do not confuse this with arguments.
      self :: IN
      res :: BIN

      res = .n_items>0

   end

   has_arguments result (res) ::: pure
   ! Return TRUE if there are *non-optional* arguments ...
      self :: IN
      res :: BIN

      res = .n_args>0

   end

   has_options result (res) ::: pure
   ! Return TRUE if there are any options ...
      self :: IN
      res :: BIN

      res = .n_options>0

   end

   has_option(opt) result (res) ::: pure
   ! Return TRUE if the command line has *specific* option "opt"
      self :: IN
      opt :: STR, IN
      res :: BIN

      if (.option.deallocated) then; res = FALSE
      else;                          res = any(.option==opt)
      end

   end

   value_for_option(opt) result (res) ::: pure
   ! Return the (string) value for option "opt"
      self :: IN
      opt :: STR, IN
      res :: STR

   ENSURE(.option.allocated,"no options given")

      i :: INT

      do i = 1,.option.dim
         if (.option(i)/=opt) cycle
         res = .option_value(i)
         exit
      end

   end

! ===
! Put
! ===

   put
   ! Put out the command line info
      self :: IN

      stdout.flush
      stdout.text("=================")
      stdout.text("Command line info")
      stdout.text("=================")

      stdout.flush
      stdout.show("Command (program) name        =",.command)
      stdout.show("No. of items on command line  =",.n_items)
      stdout.show("No. of unix-style options     =",.n_options)
      stdout.show("No. of non-optional arguments =",.n_args)

      if (.n_items>0) then
      stdout.flush
      stdout.text("Items: ")
      stdout.put(.item,by_column=TRUE,left=TRUE)

      if (.n_options>0) then
      stdout.flush
      stdout.text("Options: ")
      stdout.put(.option,by_column=TRUE,left=TRUE)
      end

      if (.n_options>0) then
      stdout.flush
      stdout.text("Option values: ")
      stdout.put(.option_value,by_column=TRUE,left=TRUE)
      end

      if (.n_args>0) then
      stdout.flush
      stdout.text("Arguments: ")
      stdout.put(.arg,by_column=TRUE,left=TRUE)
      end

      end

   end

   put_command_optarg
   ! Put out the command_optarg's
      self :: IN

      if (.n_items>0) then
      stdout.save_style
      stdout.set_margin_width(2)
      stdout.set_using_array_labels(FALSE)
      stdout.clear_and_put_margin
      stdout.put(.command_optarg,by_column=TRUE,left=TRUE,width=STR_SIZE)
      stdout.unsave_style
      end

   end

end
