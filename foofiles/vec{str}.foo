!---------------------------------------------------------------------------
!
!  VEC{STR}: String vectors
!
!  Notes
!
!  Normally, a STR variable means a character string of length STR_SIZE.
!  However, in this module we use assumed length character strings.
!  Note also that ELEMENT_TYPE_SIZE is defind as "len(self(1))*CHR_SIZE".
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{STR}

   implicit none

   interface to_str
      to_str_vec_str_0
      to_str_vec_str_1
      to_str_vec_str_2
   end

contains

!  =================
!  Memory allocation
!  =================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower and upper bounds in "bounds"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

! Old

   create(dim) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create space for object
   end

   create(lb,ub) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create the vector with "bounds"
   end

   destroy ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Destroy space for object
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, PURE
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, PURE
   ! Return the size of the 1st dimension
   end

!  ====
!  Copy
!  ====

   create_copy(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create a copy of vector "v".
   end

   copy(v) ::: get_from(VEC{INTRINSIC}), PURE
   ! Copy vector "v".
   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,init,grow_start) ::: get_from(VEC{OBJECT}, INIT?=>BLANK), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" from the end. New
   ! slots are zeroed unless scalar "init" is set. If "grow_start" is
   ! present and TRUE, then "self" is expanded from the start, keeping
   ! the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(v1,v2) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends vectors "v1" and "v2" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

   prepend(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Prepend vector "v" to allocatable "self".
   end

   prepend(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Prepend a single "value" to allocatable "self".
   end

   prune_element(k) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Removes the element at position "k" from allocatable "self".
   ! Elements after that position are moved downward.
   end

   prune(values) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Removes the scalar "values" from allocatable "self" (if there).
   ! The order of the elements is otherwise unchanged.
   end

   prune(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Remove the scalar "value" from allocatable "self" (if there).
   ! The order of the elements is otherwise unchanged.
   end

! Old

   shrink(dim,chop_start) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Shrink "self" from the last element, to dimension "dim". Contents are
   ! retained.  If "chop_start" is present and TRUE, then "self" is shrunk or
   ! chopped from the start, and the contents from the end are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expand "self" to dimension "dim" from the end. New slots are left undefined.
   ! If "grow_start" is present and TRUE, then "self" is expanded from the
   ! start. Again, the starting slots are undefined.
   end

   append(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self and appends the contents of vector "v".
   end

   append(v1,v2) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self and appends the contents of vectors "v1" and "v2".
   end

   append(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

   append_only_if_unique(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self by 1, and appends the single scalar "value" onto the end, but
   ! only if the "value" is unique
   end

   prepend(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Prepend the vector "v" to "self". "self" is expanded.
   end

   prepend(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Prepend an single "value" to "self". "self" is expanded.
   end

   prune(values) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Removes the scalar "values" from the vector, if they are there.
   ! The order of the elementsis otherwise unchanged.
   end

   prune(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Removes the single scalar "value" from the vector, if it is there.
   ! The order of the elementsis otherwise unchanged.
   end

! ====================
! Comparison functions
! ====================

   equals(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" is the same as "v".
   end

   same_as(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" is the same as "v".
   end

   has_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" has elements common with "v"
   end

   has_no_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" has no elements common with "v"
   end

   has_all_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if ALL elements of "self" are common with any in "v"
   end

   n_elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of elements of "self" which are common with "v"
   end

   n_elements_uncommon_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of elements of "self" which are uncommon with "v"
   end

   elements_common_with(v) result (res) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Return the elements of "self" which are common with "v",
   ! e.g. if self = [1,1,2,1] and v = [1], res = [1,1,1].
   ! See also routine below.
   end

   elements_uncommon_with(v) result (res) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Return the elements of "self" which are uncommon with "v"
   ! e.g. if self = [1,1,2,1] and v = [1], res = [2].
   ! See also routine above.
   end

   indices_of_elements_matching(item) result (res) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Return the indices of the elements in "self" which match "item"
   ! NOTE: this routine returns a pointer!
   end

! =============================
! Repetition related operations
! =============================

   remove_repetitions ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Remove repeated elements which come later in the list. 
   ! NOTE: the vector may shrink. 
   ! NOTE: this version for bin, str, int
   end

   has_repetitions result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return TRUE if self has at least one repeated element.
   end

   get_1st_repetition(fi,fj) ::: get_from(VEC{OBJECT}), pure
   ! Return "fi" and "fj", the first two indices with the same element
   end

   no_of_unique_elements result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the number of unique elements in the vector.
   end

! ================
! Sorting routines
! ================

   sort(decreasing_order) ::: get_from(VEC{OBJECT}), PURE
   ! Sort array "self" from lowest to highest, using simple insertion sort.  If
   ! "decreasing_order" is present and TRUE sort from highest to lowest instead.
   end

   quick_sort(decreasing_order) ::: get_from(VEC{OBJECT}), PURE
   ! Sort the vector into increasing order.If "decreasing_order" is present and
   ! TRUE, the vector is sorted from largest to smallest
   end

   quick_sort_increasing ::: get_from(VEC{OBJECT}), recursive, private, PURE
   ! Sort the vector into order, smallest to largest
   end

   quick_sort_decreasing ::: get_from(VEC{OBJECT}), recursive, private, PURE
   ! Sort the vector into order, largest to smallest
   end

   quick_sort(indices,decreasing_order) ::: get_from(VEC{OBJECT}), PURE
   ! Return the "indices" which sort self from smallest to largest, i.e. on
   ! return "self(indices)" is sorted. NOTE: self is *not* sorted.
   ! If "decreasing_order" is present and TRUE, the indices are sorted from
   ! largest to smallest
   end

   quick_sort_increasing(indices) ::: get_from(VEC{OBJECT}), recursive, private, PURE
   ! Return the indices which sort vector from smallest to largest, i.e. on
   ! return "self(indices)" is sorted. NOTE: self is *not* sorted.
   end

   quick_sort_decreasing(indices) ::: get_from(VEC{OBJECT}), recursive, private, PURE
   ! Return the indices which sort vector from largest to smallest, i.e. on
   ! return "self(indices)" is sorted. NOTE: self is *not* sorted.
   end

   reverse_order ::: get_from(VEC{INTRINSIC}), PURE
   ! Reverse the order of the elements of self
   end

   swap_elements(e1,e2) ::: get_from(VEC{INTRINSIC}), pure
   ! Swap elements "e1" and "e2" in "self".
   end

! =========================================
! Inclusion and matching related operations
! =========================================

   has_any_included_in(string,at_start) result (res) ::: pure
   ! Return TRUE if self has any element included in "string" which starts at
   ! the start of the "string", provided "at_start" is TRUE; otherwise
   ! returns TRUE even if the match was not at the start.
      self :: IN
      string :: STR, IN
      at_start :: BIN, optional, IN
      res :: BIN

      first :: BIN

      first = FALSE
      if (present(at_start)) first = at_start

      if (first) then
         res = any(index(spread(string,1,.dim),self) == 1)
      else
         res = any(index(spread(string,1,.dim),self) /= 0)
      end

   end

   index_of_first_included_in(string) result (res) ::: pure
   ! Return the index of the first element in self which is included in
   ! "string", or zero otherwise.
      self :: IN
      string :: STR, IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,size(self)
         res = index(string,self(i))
         if (res>0) exit
      end

   end

   has_any_including(string) result (res) ::: pure
   ! Return TRUE if self has any element which includes "string".
      self :: IN
      string :: STR, IN
      res :: BIN

      res = any(index(self,spread(string,1,.dim)) /= 0)

   end

   includes(string,at_start) result (res) ::: pure
   ! Return TRUE for a particular element, if that element of self includes "string".
   ! Returns FALSE if no element matches. If "at_start" is present and TRUE, then the
   ! result is TRUE only if the item matches at the start of the string.
      self :: IN
      string :: STR, IN
      at_start :: BIN, optional, IN
      res :: VEC{BIN}(size(self))

      first :: BIN

      first = FALSE
      if (present(at_start)) first = at_start

      if (first) then
         res = index(self,spread(string,1,.dim)) == 1
      else
         res = index(self,spread(string,1,.dim)) /= 0
      end

   end

   index_of_first_that_includes(string) result (res) ::: pure
   ! Return the index of the first element of self that includes "string".
   ! Returns 0 if no element matches.
      self :: IN
      string :: STR, IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         res = index(self(i),string)
         if (res==0) cycle
         res = i
         exit
      end

   end

   index_of(string) result (res) ::: pure
   ! Return the first index of the "string" in self.
   ! Returns 0 if no element matches.
      self :: IN
      string :: STR, IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         if (self(i)/=string) cycle
         res = i
         exit
      end

   end

   index_of_matching_bracket(symbol) result (res) ::: PURE
   ! Return the first index of the matching bracket "symbol" in self.
   ! The first element of self need not be an opening bracket symbol.
      self :: IN
      symbol :: STR, IN
      res :: INT

   ENSURE(.index_of(symbol)>0,"no open bracket symbol in self")
   ENSURE(.index_of(symbol)<.dim,"open bracket is at end of self")

      opening,closing :: VEC{STR}(len=1,4)
      op,cl :: STR(len=1)
      i,s,n :: INT

      opening = ["{","(","[","<"]
      closing = ["}",")","]",">"]

   ENSURE(any(symbol==opening),"unrecognised open bracket symbol")

      op = symbol
      cl = closing(opening.index_of(symbol))

      s = .index_of(op)
      n = 0

      do i = s+1,.dim
         if (self(i)==op) n = n + 1
         if (self(i)==cl AND n==0) exit
         if (self(i)==cl AND n>0) n = n - 1
      end

      res = i

   ENSURE(n==0,"unmatching number of closing bracket symbols")

   end

! =============
! String widths
! =============
   
   str_lengths result (res) ::: pure
   ! Returns the minimal string lengths.
      self :: IN
      res :: VEC{INT}(.dim)
      res = len_trim(self)
   end 

   get_max_str_length(msl,spaces) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns "msl", the maximum of the string lengths for "self",
   ! and with optional extra "spaces". 
   end

! =====================
! Conversion to strings
! =====================

! Below are strangely named?

   to_str_vec_str_0 result (res) ::: pure
   ! Change self to a string of minimal length
      self :: IN
      res :: VEC{STR}(.dim)

      res = self

   end 

   to_str_vec_str_1(fmt,left_justify) result (res) ::: get_from(VEC{INTRINSIC}:to_str), pure
   ! Change self to a "string" using the specified fortran "fmt".
   end

   to_str_vec_str_2(width,left_justify) result (res) ::: get_from(VEC{INTRINSIC}:to_str), pure
   ! Change self to a string with specified "width".
   end

   char_array_to_str(self) result (res) ::: selfless, PURE
   ! Change len=1 char array "self" to a string
      self :: STR(len=1), dimension(:), IN
      res :: STR

   ENSURE(.dim<=len(res),"self is too large")

      i :: INT

      do i = 1,len(res)
         if (i <= .dim) then
            res(i:i) = self(i)
         else
            res(i:i) = " " ! pad with spaces
         end if
      end do

   end

   to_concatenated_str(fmt,separator) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string using "fmt" if specified, and with
   ! "separator" between each item, if specified.
   end

   concatenate_elementwise_with(v) ::: pure
   ! Yield a vector which is the elementwise concatenation of "self"
   ! and "v" 
      self :: INOUT
      v :: VEC{STR}, IN

      i :: INT

      do i = 1,.dim
         self(i) = trim(self(i)) // trim(v(i))
      end

   end

   concatenate_elementwise_with(value) ::: pure
   ! Yield a vector which is the elementwise concatenation of "self"
   ! and "value" 
      self :: INOUT
      value :: STR, IN

      i :: INT

      do i = 1,.dim
         self(i) = trim(self(i)) // trim(value)
      end

   end

! ==========
! Misc stuff
! ==========

   to_lower_case ::: pure
   ! Change upper case charaters to lower case in all elements
      self :: INOUT

      i :: INT

      do i = 1,size(self)
         self(i).to_lower_case
      end

   end

   to_upper_case ::: pure
   ! Change lower case charaters to upper case in all elements
      self :: INOUT

      i :: INT

      do i = 1,size(self)
         self(i).to_upper_case
      end

   end

   replace_all(a,b) ::: pure
   ! Replace all occurences of string "a" by "b". String "b" can be zero
   ! length, however, replacements only occur up to the last nonblank
   ! character in "self" i.e. up to len_trim(self).
      self :: INOUT
      a,b :: STR, IN

      i :: INT

      do i = 1,size(self)
         self(i).replace_all(a,b)
      end

   end

   remove_blanks ::: pure
   ! Replace all blanks by moving all non-blank characters leftwards
      self :: INOUT

      i :: INT

      do i = 1,size(self)
         self(i).remove_blanks
      end

   end

   pad_with(symbol,width,prepad) ::: pure
   ! Pad the end of the string with "symbol" up to length "width".
   ! If "prepad" is present and TRUE, put the symbol before.
      self :: INOUT
      symbol :: STR(len=1), IN
      width :: INT, IN
      prepad :: BIN, IN, optional

      pre :: BIN
      i,l :: INT

      pre = FALSE
      if (present(prepad)) pre = prepad

      if (pre) then
         do i = 1,.dim
            l = len_trim(self(i))
            if (l>=width) cycle
            self(i) = trim(repeat(symbol,width-l)) // trim(self(i))
         end
      else
         do i = 1,.dim
            l = len_trim(self(i))
            if (l>=width) cycle
            self(i) = trim(self(i)) // repeat(symbol,width-l) 
         end
      end

   end

end
