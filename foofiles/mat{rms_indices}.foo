!-------------------------------------------------------------------------------
!
! MAT{RMS_INDICES}
!
! This object is used to store precalculated information pertaining to the
! reduced multiplication scheme (RMS) used in electron repulsion integral 
! evaluation. 
!
! Copyright (C) Dylan Jayatilaka, 2006
! Copyright (C) Dylan Jayatilaka, 2021
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module MAT{RMS_INDICES}

   implicit none

contains

! ==========
! Allocation
! ==========

   create(dim1,dim2) ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Allocate object
   end

   create(lb1,ub1,lb2,ub2) ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Allocate object with the given bounds
   end

   destroy ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Deallocate the object
   end

   destroy_ptr_part ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Destroy the pointer parts of self
   end

! ===========
! Set indices
! ===========

   set_indices(l_max,nx,ny,nz,px,py,pz) ::: leaky
   ! Set the rms indices. 
      self :: allocatable, INOUT
      l_max :: INT, IN
      nx,ny,nz :: VEC{INT}, IN
      px,py,pz :: VEC{INT}, IN

   ENSURE(.allocated,"no self object")
   ENSURE(lbound(self,1)==0,"lower bound 1 wrong")
   ENSURE(lbound(self,2)==0,"lower bound 2 wrong")
   ENSURE(ubound(self,1)==l_max,"upper bound 1 wrong")
   ENSURE(ubound(self,2)==l_max,"upper bound 2 wrong")
   ENSURE(nx.dim==MAT{RMS_INDICES}::n_comp_up_to(2*l_max),"wrong size, nx")
   ENSURE(ny.dim==nx.dim,"wrong size, ny")
   ENSURE(nz.dim==nx.dim,"wrong size, nz")

      lmax,lmin,f,l :: INT

      do lmax = 0,l_max   ! Maximum l for one shell
      do lmin = 0,lmax    ! l for the other shell

        f = MAT{RMS_INDICES}::n_comp_up_to(lmax-1)+1
        l = MAT{RMS_INDICES}::n_comp_up_to(lmin+lmax)

        self(lmax,lmin).set_indices(nx(f:l),ny(f:l),nz(f:l),px(f:l),py(f:l),pz(f:l))

      end
      end

   end

   n_comp_up_to(l) result (res) ::: selfless, pure, private
   ! No. of gaussian cartesian component functions up to and including the shell
   ! with momentum "l".
      l :: INT, IN
      res :: INT
      res = (l+1)*(l+2)*(l+3)/6
   end

end
