!---------------------------------------------------------------------------
!
!  FILE : Unformatted sequential advancing I/O, for fast mass data storage
!
!  NOTE: If ascii files are required consider using TEXTFILE.
!
!  A file is referred to only by a STR name. Unit numbers are not required.
!  Creation of a file object does not lead to creation of the actual file
!  on the computer, it merely creates the label for the file.
!  The actual file may already exist. If it does not exist, then an
!  FILE_open command will bring it into existence. Otherwise, FILE_open
!  will open the existing file. Closing a file does not delete the actual
!  file unless specifically requested.
!
!  When reading or writing an object to the file, it is assumed that
!  each object occupied one abstract "record". After a recor5d is written,
!  it may not be overwritten without destroying all data objects in the
!  following records. It is recommended that multiple data objects which
!  are logically related be stored in different files with appropriate names
!  for each file which indicate the relationship of the data objects
!  within them.
!
!  Strings are regarded as type STR for purposes of output to the file.
!
!  If the read or write statements give a segmentation fault for large
!  arrays or matrices, try increasing your stack size.
!
!  Copyright (C) Dylan Jayatilaka, 1997, 2019
! 
!  This library is free software; you can redistribute it and/or
!  modify it under the terms of the GNU Library General Public
!  License as published by the Free Software Foundation; either
!  version 2 of the License, or (at your option) any later version.
! 
!  This library is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
!  Library General Public License for more details.
! 
!  You should have received a copy of the GNU Library General Public
!  License along with this library; if not, write to the
!  Free Software Foundation, Inc., 59 Temple Place - Suite 330,
!  Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module FILE

   implicit none

contains

!  ==================
!  Allocation methods
!  ==================

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   create(name) ::: leaky, PURE
   ! Allocate an object. Set the filename to "name".
   ! DOes not open the file!
      self :: allocatable, INOUT
      name :: STR, IN

      .create
      .set_name(name)

   end

   destroy ::: leaky
   ! Destroy a file-label object and close corresponding file, if open
      self :: allocatable, INOUT

      if (.deallocated) return

      ! Close the unit
      if (.is_open AND .unit_used) .close

      deallocate(self)

   end


!  ===========
!  Set methods
!  ===========

   set_name(name) ::: pure
   ! Sets the filename to "name"
      self :: INOUT
      name :: STR, IN

      .name = name

   end

   set_action(action)
   ! Set the to "action" indicated whether the file is "read_write",
   ! "read-only" or "write-only".
      self :: INOUT
      action :: STR, IN

      select case (action)
      case("rw        ","readwrite ","read-write") ;              .action = "readwrite"
      case("r         ","read      ","reading   ","read-only ") ; .action = "read"
      case("w         ","write     ","writing   ","write-only") ; .action = "write"
      case default; UNKNOWN(action)
      end

   end


!  ==============================
!  Opening, closing, and deletion
!  ==============================

   open_for(action)
   ! Open the file. The file object must already be created.
   ! If present, "action" indicated whether the file is "read_write",
   ! "read-only" or "write-only".
      self :: INOUT
      action :: STR, optional, IN

      if (present(action)) then
         .set_action(action)
      end

      .file_status = "new"
      if (.exists) .file_status = "old"

      ! Open file and set unit number
      if (IO_IS_ALLOWED) then
         open(file   = .name,         &
              newunit= .unit,         &
              status = .file_status,  &
              access = "sequential",  &
              form   = "unformatted", & ! <---------
              action = .action,       &
              iostat = .io_status)
      end

      ! Check for failure
      PARALLEL_BROADCAST(.unit,tonto.master_processor)
      PARALLEL_BROADCAST(.io_status,tonto.master_processor)
      DIE_IF(.io_status/=0,"error opening "//trim(.file_status)//" file "//.name)

   end

   close
   ! Close the file
      self :: INOUT

   DIE_IF(NOT .exists, "not an existing file!")

      opened :: BIN

      ! Check if unit is opened
      .io_status = 0
      if (IO_IS_ALLOWED) then
         inquire(unit=.unit,iostat=.io_status,opened=opened)
      end

      ! Failure?
      PARALLEL_BROADCAST(.io_status,tonto.master_processor)
      DIE_IF(.io_status/=0,"error opening new file "//trim(.name))

      ! Close the file
      if (IO_IS_ALLOWED) then
      if (opened) then
         close(unit=.unit)
      end
      end

   end

   close_and_delete ::: leaky
   ! Close the file and delete it from the file system
      self :: INOUT

      if (IO_IS_ALLOWED) then
         close(unit=.unit,status="delete",iostat=.io_status)
      end
      DIE_IF(.io_status/=0,"error closing and deleting"//trim(.file_status)//" file "//.name)

   end

   delete
   ! Delete the file from the file system
      self :: INOUT

      if (NOT .is_open) .open_for("read")

      .close_and_delete

   end


!  ==========================
!  Data input type operations
!  ==========================

!  Scalars

   read(value) ::: template
   ! Read a "value" from the file.
      self :: INOUT
      value :: VALUE?, OUT

      if (IO_IS_ALLOWED) then
         read(unit=.unit,iostat=.io_status) value
         ENSURE(.io_status==0,"read error, #"// trim(.io_status.to_str))
      end
      PARALLEL_BROADCAST(value,0)
      
      .record = .record + 1

   end

   read(value) ::: get_from(FILE, VALUE?=>INT)
   ! Read a "value" from the file.
   end

   read(value) ::: get_from(FILE, VALUE?=>REAL)
   ! Read a "value" from the file.
   end

   read(value) ::: get_from(FILE, VALUE?=>CPX)
   ! Read a "value" from the file.
   end

!  Arrays

   read(values) ::: template
   ! Read a series of "values" from the file.
      self :: INOUT
      values :: VALUES?, OUT

      if (IO_IS_ALLOWED) then
         read(unit=.unit,iostat=.io_status) values
         ENSURE(.io_status==0,"read error, #"// trim(.io_status.to_str))
      end
      PARALLEL_BROADCAST(values,0)

      .record = .record + 1

   end

   read(values) ::: get_from(FILE, VALUES?=>VEC{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>VEC{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>VEC{CPX})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT{CPX})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT3{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT3{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT3{CPX})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT4{INT})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT4{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT4{CPX})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT5{REAL})
   ! Read a series of "values" from the file.
   end

   read(values) ::: get_from(FILE, VALUES?=>MAT5{CPX})
   ! Read a series of "values" from the file.
   end

!  Vectors of embedded arrays

   read(v) ::: template
   ! Read an vector of embedded array types 
      self :: INOUT
      v :: V?, OUT

      i :: INT

      do i = 1,v.dim

         if (IO_IS_ALLOWED) then
            read(unit=.unit,iostat=.io_status) v(i).element
            ENSURE(.io_status==0,"read error, #"// trim(.io_status.to_str))
         end
         PARALLEL_BROADCAST(v(i).element,0)

         .record = .record + 1

      end

   end

   read(v) ::: get_from(FILE, V?=>VEC{MAT_{REAL}})
   ! Read an vector of embedded array types 
   end


!  ============================
!  Parallel data input routines
!  ============================

!  Allow each processor to separately do a read

!  Arrays

   parallel_read(values) ::: template
   ! Parallel read the "values" array from the file.
      self :: INOUT
      values :: VALUES?, OUT

      read(unit=.unit,iostat=.io_status) values
      ENSURE(.io_status==0,"write error, #"//trim(.io_status.to_str))

      .record = .record + 1

   end

   parallel_read(values) ::: get_from(FILE, VALUES?=>VEC{INT})
   ! Parallel read the "values" array from the file.
   end

   parallel_read(values) ::: get_from(FILE, VALUES?=>VEC{REAL})
   ! Parallel read the "values" array from the file.
   end

   parallel_read(values) ::: get_from(FILE, VALUES?=>VEC{CPX})
   ! Parallel read the "values" array from the file.
   end

   parallel_read(values) ::: get_from(FILE, VALUES?=>MAT{INT})
   ! Parallel read the "values" array from the file.
   end

   parallel_read(values) ::: get_from(FILE, VALUES?=>MAT{REAL})
   ! Parallel read the "values" array from the file.
   end

   parallel_read(values) ::: get_from(FILE, VALUES?=>MAT{CPX})
   ! Parallel read the "values" array from the file.
   end


!  ====================
!  Data output routines
!  ====================

!  Scalars

   write(value) ::: template
   ! Write the "value" to the file.
      self :: INOUT
      value :: VALUE?, IN

      if (IO_IS_ALLOWED) then
         write(unit=.unit,iostat=.io_status) value
         ENSURE(.io_status==0,"write error, #"//trim(.io_status.to_str))
      end

      .record = .record + 1

   end

   write(value) ::: get_from(FILE, VALUE?=>INT)
   ! Write the "value" to the file.
   end

   write(value) ::: get_from(FILE, VALUE?=>REAL)
   ! Write the "value" to the file.
   end

   write(value) ::: get_from(FILE, VALUE?=>CPX)
   ! Write the "value" to the file.
   end

!  Arrays

   write(values) ::: template
   ! Write the "values" to the file.
      self :: INOUT
      values :: VALUES?, IN

      if (IO_IS_ALLOWED) then
         write(unit=.unit,iostat=.io_status) values
         ENSURE(.io_status==0,"write error, #"//trim(.io_status.to_str))
      end

      .record = .record + 1

   end

   write(values) ::: get_from(FILE, VALUES?=>VEC{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>VEC{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>VEC{CPX})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT{CPX})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT3{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT3{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT3{CPX})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT4{INT})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT4{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT4{CPX})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT5{REAL})
   ! Write the "values" to the file.
   end

   write(values) ::: get_from(FILE, VALUES?=>MAT5{CPX})
   ! Write the "values" to the file.
   end

!  Vectors of embedded arrays

   write(v) ::: template
   ! Write a vector of embedded array types 
      self :: INOUT
      v :: V?, IN

      i :: INT

      do i = 1,v.dim

         if (IO_IS_ALLOWED) then
            write(unit=.unit,iostat=.io_status) v(i).element
            ENSURE(.io_status==0,"read error, #"// trim(.io_status.to_str))
         end

         .record = .record + 1

      end

   end

   write(v) ::: get_from(FILE, V?=>VEC{MAT_{REAL}})
   ! Write a vector of embedded array types 
   end


!  =============================
!  Parallel data output routines
!  =============================

!  Allow each processor to separately do a write

!  Arrays

   parallel_write(values) ::: template
   ! Parallel write the "value" array to the file.
      self :: INOUT
      values :: VALUES?, IN

      write(unit=.unit,iostat=.io_status) values
      ENSURE(.io_status==0,"write error, #"//trim(.io_status.to_str))

      .record = .record + 1

   end

   parallel_write(values) ::: get_from(FILE, VALUES?=>VEC{INT})
   ! Parallel write the "value" array to the file.
   end

   parallel_write(values) ::: get_from(FILE, VALUES?=>VEC{REAL})
   ! Parallel write the "value" array to the file.
   end

   parallel_write(values) ::: get_from(FILE, VALUES?=>VEC{CPX})
   ! Parallel write the "value" array to the file.
   end

   parallel_write(values) ::: get_from(FILE, VALUES?=>MAT{INT})
   ! Parallel write the "value" array to the file.
   end

   parallel_write(values) ::: get_from(FILE, VALUES?=>MAT{REAL})
   ! Parallel write the "value" array to the file.
   end

   parallel_write(values) ::: get_from(FILE, VALUES?=>MAT{CPX})
   ! Parallel write the "value" array to the file.
   end


!  ==================================
!  File repositioning type operations
!  ==================================

   rewind
   ! Rewind the file
      self :: INOUT

      if (IO_IS_ALLOWED) rewind(unit=.unit,iostat=.io_status)
      ENSURE(.io_status==0,"rewind error, #"// trim(.io_status.to_str))

      .record = 1

   end

   backspace
   ! Backspace the file one record of the file. Backspacing before
   ! record 1 has no effect.
      self :: INOUT

      if (IO_IS_ALLOWED) backspace(unit=.unit,iostat=.io_status)
      ENSURE(.io_status==0,"backspace error, #"// trim(.io_status.to_str))

      .record = max(1,.record-1)

   end

   skip
   ! Skip over the next record of the file. An error is generated if
   ! at the end of the file
      self :: INOUT

      if (IO_IS_ALLOWED) read(unit=.unit,iostat=.io_status)
      ENSURE(.io_status==0,"read error, #"// trim(.io_status.to_str))

      .record = .record + 1

   end

   move_to_end
   ! Move to the end of the file, say for adding more data
      self :: INOUT

      do

         if (IO_IS_ALLOWED) read(unit=.unit,iostat=.io_status)
         PARALLEL_BROADCAST(.io_status,0)

         if (.io_status/=0) exit

         .record = .record + 1

      end

   end

   move_to_position(pos)
   ! Move to a particular record position in the file
      self :: INOUT
      pos :: INT, IN

      .move_to_record(pos)

   end

   move_to_record(rec)
   ! Move to a particular record position in the file
      self :: INOUT
      rec :: INT

   ENSURE(rec>=1,"can't move to non-positive record")

      if (rec<.position) then

         do
            .backspace
            if (.position==rec) exit
         end

      else if (rec>.position) then

         do
            .skip
            if (.position==rec) exit
         end

      end

   end


!  ===============
!  Inquiry methods
!  ===============

   exists(name) result (res)
   ! Returns true if the file exists on the file system.  If present,
   ! "name" is used, otherwise .name is used.
      self :: IN
      name :: STR, optional, IN
      res :: BIN

      if (present(name)) then
         if (IO_IS_ALLOWED) inquire(file=name,exist=res)
      else
         if (IO_IS_ALLOWED) inquire(file=.name,exist=res)
      end
      PARALLEL_BROADCAST(res,0)

   end

   is_open result (res)
   ! Returns true if the file has been opened
      self :: IN
      res :: BIN

      if (IO_IS_ALLOWED) then
       ! inquire(unit=.unit,opened=res)
         inquire(file=.name,opened=res)
      end
      PARALLEL_BROADCAST(res,0)

   end

   unit_used result (res)
   ! Returns true if the file unit is in use
      self :: IN
      res :: BIN

      if (IO_IS_ALLOWED)  inquire(unit=.unit,opened=res)
      PARALLEL_BROADCAST(res,0)

   end

   position result (res) ::: pure
   ! Return record position of the file
      self :: IN
      res :: INT

      res = .record
   
   end

   is_for_reading result (res)
   ! Return whether the file is opened for reading.
      self :: IN
      res :: BIN

      reading :: STR(len=5)

      if (IO_IS_ALLOWED) inquire(unit=.unit,read=reading)
      PARALLEL_BROADCAST(reading,0)

      if (reading=="YES") then; res = TRUE
      else;                     res = FALSE
      end

   end

end
