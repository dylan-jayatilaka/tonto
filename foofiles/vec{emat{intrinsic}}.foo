!---------------------------------------------------------------------------
!
! VEC{EMAT{INTRINSIC}}: Vector of matrices
!
! Copyright (C) Daniel Grimwood, 1999
! Copyright (C) Dylan Jayatilaka, 2021
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{EMAT{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   create(dim,dim1,dim2) ::: leaky, PURE
   ! Create space for a vector of matrices
      self :: allocatable, OUT
      dim,dim1,dim2 :: INT, IN

      .create(dim)
      .create_mat(dim1,dim2)

   end

   create_mat(dim1,dim2) ::: leaky, PURE
   ! Allocate the pointer parts
      self :: INOUT
      dim1,dim2 :: INT, IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(dim1,dim2)
      end

   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Deallocate the vector
   end

!  ======
!  Resize
!  ======

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

end
