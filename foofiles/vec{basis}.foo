!---------------------------------------------------------------------------
!
! VEC{BASIS}: BASIS vectors
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{BASIS}

   implicit none

   library_directory :: STR, private = VEC_BASIS_LIBRARY_DIRECTORY

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Create space for object
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy space for object
   end

   nullify_ptr_part ::: get_from(VEC{OBJECT}), pure
   ! Nullify the pointer parts of self
   end

   destroy_ptr_part ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy the pointer parts of self
   end

!  ====
!  Copy
!  ====

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec".
   end

!  ============
!  Set routines
!  ============

   set_defaults ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Set default values
   end

   set_library_directory(directory) ::: public
   ! Set the directory name for where the basis set libraries are stored.
      self :: PTR
      directory :: STR, IN

      ! Remove warning
      if (.associated) then 
      end

      library_directory = directory

   end

   library_file(basis_kind) result (res) ::: pure
   ! Return the basis set library file for a particular "basis_kind".
      self :: PTR
      basis_kind :: STR, IN
      res :: STR

      ! Remove warning
      if (.associated) then 
      end

      res = trim(library_directory)//"/"//trim(basis_kind)

   end

   set_spherical(val) ::: pure
   ! Set sphericals to "val" 
      self :: INOUT
      val :: BIN, IN

      i :: INT

      do i = 1,.dim
         self(i).set_spherical(val)
      end

   end

!  =======================
!  Shrinking and expansion 
!  =======================

   shrink(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Shrink self to dimension dim.  Contents are retained.
   end

   expand(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Expand the vector "self" to "dim". New slots are left undefined.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

!  =============================
!  Repetition related operations
!  =============================

   remove_repetitions ::: get_from(VEC{OBJECT}), leaky
   ! Sort through the vector and remove repeated elements which come
   ! later in the list.  NOTE: the vector may shrink
   end

   has_repetitions result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if self has at least one repeated element.
   end

   no_of_unique_elements result (res) ::: get_from(VEC{OBJECT}), pure
   ! Return the number of unique elements in the vector.
   end

!  =======================
!  List-based I/O Routines
!  =======================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are not needed.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! Read a new set of keys
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file
   end

!  ===========================
!  Non-list based I/O routines
!  ===========================

   read_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword)
   ! Process a normal (non list-type) "keyword".
      self :: PTR
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
          case("}                 ") ! do nothing.
          case("library_directory="); .read_library_directory
          case("put               "); .put
          case("redirect          "); .redirect
          case("revert            "); .revert
          case default;               UNKNOWN(word)
      end

   end

   read_library_directory
   ! Read the directory name for where the basis set libraries are stored.
      self :: PTR

      if (.associated) then ! remove warning
      end

      stdin.read(library_directory)
   end

   read_library_data(library,labels,n_unique_labels) ::: leaky
   ! Open the file named "library", read the basis sets which have the right
   ! "labels", and assign them to the basis vector.  The file must begin with a
   ! "{" symbol and must have at least one "data=" list-type keyword following
   ! the open bracket. NOTE: Self is created or expanded by the number of unique
   ! labels in "labels" -- those which cannot be found already in "self".
      self :: PTR
      library :: STR, IN
      labels :: VEC{STR}, IN
      n_unique_labels :: INT, OUT, optional

      unique_labels :: VEC{STR}*
      echo,stdin_created :: BIN
      word,lib :: STR
      basis :: BASIS*
      found,i,u,n_labels,N :: INT
      file :: TEXTFILE

      if (NOT .associated) then
        N = 0
        n_labels = labels.dim    ! All labels are unique
        unique_labels.create_copy(labels)
        if (n_labels>0) .create(n_labels)
      else                        
        N = .dim
        n_labels = labels.dim    ! Find and add only unique labels
        unique_labels.create(n_labels)
        u = 0
        do i = 1,n_labels
           if (any(self(:).label==labels(i))) cycle
           u = u + 1
           unique_labels(u) = labels(i)
        end
        n_labels = u
        unique_labels.shrink(n_labels)
        if (n_labels>0) .expand(N+n_labels)
      end

      if (present(n_unique_labels)) n_unique_labels = n_labels

      if (n_labels==0) then
        unique_labels.destroy
        return
      end

      echo = tonto.keyword_echo
      if (echo) tonto.set_keyword_echo(FALSE)

      ! Get basis library directory; use "./basis_sets" if needed
      lib = library
      if (NOT file.exists(lib)) lib = "./basis_sets/" // trim(library.filename_head)
      DIE_IF(NOT file.exists(lib),"no library basis set")

      ! Redirect/open stdin
      stdin_created = stdin.associated
      if (stdin_created) then
         stdin.redirect(lib)
      else
         stdin.create(name=lib)
         stdin.open_for("read")
      end

      ! Sanity check
      ENSURE(stdin.next_item=="{","expecting open bracket symbol, {")
      stdin.read(word)             ! Read the open bracket

      do                           ! Loop over input list-type keywords
         stdin.read(word)          ! NOTE: The keys must be set here ...
         if (word=="}")      exit
         if (word=="data=")  exit
         .process_list_keyword(word)
      end
      ENSURE(.keys_created,"no keys= supplied")
      ENSURE(word=="data=","no data= list keyword")
      ENSURE(stdin.next_item=="{","expecting open bracket symbol, {")

      stdin.read(word)             ! move past open brace
      found = 0                    ! Explicitly process data= keyword
      do                           ! Try to match all basis labels
         basis.create
         basis.process_keys        ! Keys were set above.
         do i = 1,n_labels
            if (basis.label.same_as(unique_labels(i),ignore_case=TRUE)) then
               found = found + 1
               self(N+i).copy(basis)
            end
         end
         basis.destroy
         if (found==n_labels) exit ! All bases found
         ENSURE(stdin.next_item/="}","missing basis sets in library")
      end

      if (echo) tonto.set_keyword_echo(echo)

      if (stdin_created) then
         stdin.revert
         stdin.reset_io_status
      else
         stdin.destroy
      end

      unique_labels.destroy

   end

!  =======
!  Methods
!  =======

   unnormalise ::: PURE
   ! Take the normalisation factors out of the primitives, assuming
   ! that the contraction coeff's refer to normalised basis functions
      self :: INOUT

      b :: INT

      do b = 1,size(self)
         self(b).unnormalise
      end

   end

   renormalise ::: PURE
   ! Put back in the normalisation factors of the primitives, assuming
   ! that the contraction coeff's refer to unnormalised basis functions
      self :: INOUT

      b :: INT

      do b = 1,size(self)
         self(b).renormalise
      end

   end

!  ===============
!  Inquiry methods
!  ===============

   no_of_basis_functions result (res) ::: pure
   ! Return the number of basis functions in this basis set
      self :: IN
      res :: INT

      b :: INT

      res = 0
      do b = 1,.dim
         res = res + self(b).no_of_basis_functions
      end

   end

   no_of_shells result (res) ::: pure
   ! Return the number of shells in this basis set
      self :: IN
      res :: INT

      s :: INT

      res = 0
      do s = 1,.dim
         res = res + self(s).no_of_shells
      end

   end

   maximum_basis_set_l_value result (res)
   ! Returns the maximum basis set l value
      self :: IN
      res :: INT
      i,j,l :: INT
      res = 0
      do i = 1,size(self)
       do j = 1,size(self(i).shell)
         l = self(i).shell(j).l
         res = max(l,res)
       end
      end
   end

   xyz_basis_fn_part result (res) ::: PURE
   ! Return a character representation for the cartesian product part
   ! of the gaussians in this shell.
      self :: IN
      res :: VEC{STR}(no_of_basis_functions(self))

      b,f,l :: INT

      l = 0

      do b = 1,.dim

         f = l + 1
         l = l + self(b).no_of_basis_functions

         res(f:l) = self(b).xyz_basis_fn_part

      end

   end

!  ======
!  Output
!  ======

   dump(object_name) ::: get_from(VEC{OBJECT})
   ! Dump a vector object
   end

   dmpp(object_name) ::: get_from(VEC{OBJECT})
   ! Dump a vector pointer object
   end

   put ::: get_from(VEC{OBJECT})
   ! Output the list information
   end

end

