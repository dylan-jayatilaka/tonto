!---------------------------------------------------------------------------
!
! MAP{INT,INT}
!
! This is a virtual module.
!
! A map table (or associative array) with KEY keys and VAL values.
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
! 
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAP{INT,INT}

   implicit none

contains
      
!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   create(n_size) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Create the map with key and value arrays with length "n_size".
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   destroy_ptr_part ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Destroy the pointer parts
   end

!  ===
!  Set
!  ===

   set_defaults ::: get_from(MAP{KEY,VAL}), PURE
   ! Set defaults
   end

   set_reverse_search(value) ::: get_from(MAP{KEY,VAL}), PURE
   ! Set the .reverse_search switch to "value". This determines
   ! whether the search through the keys arrays occurs in reverse
   ! order, which may be useful if you know that the most recent keys
   ! added are more likely to contain the values you are looking for.
   end

!  ======================
!  Resize, append, delete
!  ======================

   shrink ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Shrinks the size of the keys and values arrays to dimension
   ! ".n_keys", *only* when ".n_size" is bigger than the number of
   ! keys stored.  Contents are retained. This is used to save memory.
   end

   shrink(n_size) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Shrinks the size of the keys and values arrays to dimension
   ! "n_size".  Contents are retained, where possible.
   end

   expand(n_size) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Expands the size of the keys and values arrays to dimension
   ! "n_size".  Contents are retained.  
   end

   resize(n_size) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Resize the size of the keys and values arrays to dimension
   ! "n_size".  Contents are retained.  
   end

   append_pair(key,value) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Append the "key" and the corresponding "value" to the map table.
   ! If the .keys or .values arrays are too small, the arrays are
   ! doubled in size.
   end

   set(key,value) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Append the "key" and the corresponding "value" to the map table.
   ! If the .keys or .values arrays are too small, the arrays are
   ! doubled in size.
   end

   append_pairs(keys,values) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Append the "keys" and the corresponding "values" to the map
   ! table.  If the .keys or .values arrays are too small, they are
   ! doubled in size.
   end

   set(keys,values) ::: get_from(MAP{KEY,VAL}), leaky, PURE
   ! Append the "keys" and the corresponding "values" to the map
   ! table.  If the .keys or .values arrays are too small, they are
   ! doubled in size.
   end

   delete(key,has_key) ::: get_from(MAP{KEY,VAL}), PURE
   ! Delete the "key" and the corresponding "value" from the map 
   ! table.  A fatal error occurs if the "key" is not there, unless
   ! "has_key" is present.  If it is present, "has_key" is set to TRUE
   ! if element *was* there (after the delete operation it is not
   ! there!), otherwise it is set false.  There is no change made to
   ! the size of the map table.
   end

   delete_item(index) ::: get_from(MAP{KEY,VAL}), PURE
   ! Delete element "index" from the map table.  No change is made to
   ! the size of the map table.
   end

   delete_items(list) ::: get_from(MAP{KEY,VAL}), PURE
   ! Delete elements "list" from the map table.  No change is made to
   ! the size of the map table.
   end

!  ===================
!  Search and retrieve
!  ===================

   index_of_key(key) result (res) ::: get_from(MAP{KEY,VAL}), PURE
   ! Returns the index of any key which matches "key" in the map
   ! table. If there is no match, then the result is 0.
   end

   has_key(key,index) result (res) ::: get_from(MAP{KEY,VAL})
   ! Returns TRUE if the map contains a specific "key". If present,
   ! "index" is set to the index of that key.
   end

   value_for_key(key,has_key,index) result (res) ::: get_from(MAP{KEY,VAL})
   ! Returns the value corresponding to the map "key". If "has_key" is
   ! not present, an error is generated if no matching "key" can be
   ! found in the map; if it is present, it is set to TRUE if the the
   ! key is present, or FALSE otherwise. If "index" is present, then
   ! it is set to the value of the index of "key" in the map table.
   end

   value_for_item(index) result (res) ::: get_from(MAP{KEY,VAL}), PURE
   ! Returns the "index"-th element in the map table. 
   end

end 
