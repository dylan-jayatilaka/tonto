!---------------------------------------------------------------------
!
! TABLE_COLUMN:
!
! For setting up table columns ready to print
!
! Copyright (C) Dylan Jayatilaka, June 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------

module TABLE_COLUMN

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object
   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts
      self :: INOUT
      
       nullify(.b_values)
       nullify(.i_values)
       nullify(.r_values)
       nullify(.e_values)
       nullify(.s_values)
      nullify(.iv_values)
      nullify(.sv_values)

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts, only if created
      self :: INOUT

      if (.values_created) then
          .b_values.destroy ! leaky
          .i_values.destroy
          .r_values.destroy
          .e_values.destroy
          .s_values.destroy
         .iv_values.destroy
         .sv_values.destroy
         .values_created = FALSE
      else
        .nullify_ptr_part  ! *not* leaky
      end

   end

!  ====
!  Copy
!  ====

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(column) ::: leaky
   ! Set self to be "group".
      column :: TABLE_COLUMN, IN
      self = column
   end

!  ============
!  Set routines
!  ============

   set_defaults ::: PURE
   ! Set up defaults
      self :: INOUT

      .heading        = " "
      .subheading     = " "
      .sb3heading     = " "
      .sb4heading     = " "

      ! Set some defaults from stdout
      if (stdout.associated) then
         .width          = stdout.real_width
         .real_precision = stdout.real_precision
      else
         .width          = TABLE_COLUMN_WIDTH
         .real_precision = TABLE_COLUMN_REAL_PRECISION
      end

      .max_cb         = TABLE_COLUMN_REAL_PRECISION

      .item_width     = TABLE_COLUMN_WIDTH
      .spacing        = TABLE_COLUMN_SPACING
      .item_spacing   = TABLE_COLUMN_SPACING
      .spacer         = TABLE_COLUMN_SPACER 
      .center         = TABLE_COLUMN_CENTER
      .left_justify   = TABLE_COLUMN_LEFT_JUSTIFY
      .list_as_column = TABLE_COLUMN_LIST_AS_COLUMN

      .width_set      = FALSE
      .item_width_set = FALSE
      .values_created = FALSE

   end

   clear_column ::: leaky, PURE
   ! Remove the column data
      self :: INOUT

      .destroy_ptr_part

   end

   set_heading(val) ::: PURE
   ! Set the heading
      self :: INOUT
      val :: STR, IN

      .heading = val
      .set_width_from(.heading)

   end

   set_subheading(val) ::: PURE
   ! Set the subheading
      self :: INOUT
      val :: STR, IN

      .subheading = val
      .set_width_from(.subheading)

   end

   set_subhead(val) ::: PURE
   ! Set the subheading
      self :: INOUT
      val :: STR, IN

      .set_subheading(val)

   end

   set_sb3head(val) ::: PURE
   ! Set the sub3 heading
      self :: INOUT
      val :: STR, IN

      .sb3heading = val
      .set_width_from(.sb3heading)

   end

   set_sb4head(val) ::: PURE
   ! Set the sub3 heading
      self :: INOUT
      val :: STR, IN

      .sb4heading = val
      .set_width_from(.sb4heading)

   end

   set_real_precision(val) ::: PURE
   ! Set the real precision
      self :: INOUT
      val :: INT, IN

 ! ENSURE(val>0,"real_precision must be positive")
   ENSURE(val<.width,"real_precision must be less than column width")

      .real_precision = max(val,0)

   end

   set_max_cb(val) ::: PURE
   ! Set the maximum closing bracket pos, for imprecise real
      self :: INOUT
      val :: INT, IN

   ENSURE(val<.width,"max_cb must be less than column width")

      .max_cb = max(val,0)

   end

   set_spacing(val) ::: PURE
   ! Set the free space within each column width
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"spacing must be non-negative")
   ENSURE(NOT .width_set,"set spacing before width or heading")

      .spacing = val

   end

   set_item_spacing(val) ::: PURE
   ! Set the free space between items in a list-item column
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"spacing must be non-negative")
   ENSURE(NOT .width_set,"set spacing before width or heading")

      .item_spacing = val

   end

   set_spacer(val) ::: PURE
   ! Set the space character between each column
      self :: INOUT
      val :: STR, IN

      .spacer = val

   end

   set_center(val) ::: PURE
   ! Set whether to center a STR column
      self :: INOUT
      val :: BIN, IN

      .center = val

   end

   set_left_justify(val) ::: PURE
   ! Set whether to left-justify a column
      self :: INOUT
      val :: BIN, IN

      .left_justify = val

   end

   set_left(val) ::: PURE
   ! Set whether to left-justify a column
      self :: INOUT
      val :: BIN, IN

      .left_justify = val

   end

   set_list_as_column(val) ::: PURE
   ! Set whether to put a list-of-lists as a column, one-per-line.
   ! NOTE: this can only be set when the list is the last column.
      self :: INOUT
      val :: BIN, IN

      .list_as_column = val

   end

   set_width(val) ::: PURE
   ! Set the column width to be the maximum of what it was and "val"
   ! If headings are set, take into account those widths too.
      self :: INOUT
      val :: INT, IN

      if (.width_set) then; .width = max(.width,val)
      else;                 .width = val
      end

      .width_set = TRUE

   end

   force_width(val) ::: PURE
   ! Force set the column width to be "val"
      self :: INOUT
      val :: INT, IN

      .width = val
      .width_set = TRUE

   end

   set_item_width(val) ::: PURE
   ! Set the list item width
      self :: INOUT
      val :: INT, IN

      if (.item_width_set) then; .item_width = max(.item_width,val)
      else;                      .item_width = val
      end

      .item_width_set = TRUE

   end

! =====================================
! Set column width from width of values
! =====================================

! Non-real ...

   set_width_from(val) ::: template, PURE
   ! Set width from the width of scalar value "val"
      self :: INOUT
      val :: VAL?, IN

      wid :: INT

      val.get_str_length(wid,.spacing)
      .set_width(wid)

   end

   set_width_from(val) ::: get_from(TABLE_COLUMN, VAL?=>BIN), PURE
   ! Set width from the width of scalar value "val"
   end

   set_width_from(val) ::: get_from(TABLE_COLUMN, VAL?=>INT), PURE
   ! Set width from the width of scalar value "val"
   end

   set_width_from(val) ::: get_from(TABLE_COLUMN, VAL?=>STR), PURE
   ! Set width from the width of scalar value "val"
   end

! Real ...

   set_width_from(val) ::: PURE
   ! Set width from the width of the REAL value "val".
      self :: INOUT
      val :: REAL, IN

      wid :: INT

      val.get_str_length_maxdp(wid,.real_precision,.spacing)
      .set_width(wid)

   end

! Arrays of non-real ...

   set_width_from(v) ::: template, PURE
   ! Set width from the maximum width of values in array "v"
      self :: INOUT
      v :: V?, IN

      wid :: INT

      v.get_max_str_length(wid,.spacing)
      .set_width(wid)

   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{BIN}), PURE
   ! Set width from the maximum width of values in array "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{INT}), PURE
   ! Set width from the maximum width of values in array "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{STR}), PURE
   ! Set width from the maximum width of values in array "v"
   end

! Arrays of real ...

   set_width_from(v) ::: template, PURE
   ! Set width from the maximum width of REALs in array "v"
      self :: INOUT
      v :: V?, IN

      wid :: INT

      v.get_max_str_length(wid,.real_precision,.spacing)
      .set_width(wid)

   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{REAL}), PURE
   ! Set width from the maximum width of REALs in array "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>MAT{REAL}), PURE
   ! Set width from the maximum width of REALs in array "v"
   end

! Real with errors ...

   set_width_from(r,e) ::: PURE
   ! Set width from the width of value "r" and its error "e".
   ! Also set the precision.
      self :: INOUT
      r,e :: REAL, IN

      wid,dp, de,le,pad :: INT

      ! Get width & precision
      r.get_str_length_align(e,wid,dp,de,le,pad,.real_precision)

      ! Set width & precision
      .set_width(wid+.spacing)
      .set_real_precision(dp)

   end

! Arrays of real with errors ...

   set_width_from(r,e) ::: PURE
   ! Set width from the maximum  width of value "r" and its error "e".
   ! Also set the precision.
      self :: INOUT
      r,e :: VEC{REAL}, IN

      msl,mdp,mcb,mcc :: INT

      ! Get max width & precision & closing bracket
      r.get_max_str_length(msl,mdp,mcc,e,.real_precision)
      r.get_max_str_length(msl,mdp,mcb,e,.real_precision,max_cb=mcc)

      ! Set 
      .set_width(msl+.spacing)
      .set_real_precision(mdp)
      .set_max_cb(mcb)

   end

! List of lists VEC{VEC_{TYPE}} of non-real ...  

   set_width_from(v) ::: template, PURE
   ! Set width from the width of list-of-lists value(s) in "v"
      self :: INOUT
      v :: V?, IN

      wid :: INT

      wid = v.list_str_length(.item_spacing)
      wid = wid + .spacing
      .set_width(wid)

      wid = v.item_str_length
      wid = wid + .item_spacing
      .set_item_width(wid)

   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{INT}}), PURE
   ! Set width from the width of list-of-lists value(s) in "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{STR}}), PURE
   ! Set width from the width of list-of-lists value(s) in "v"
   end

! =================
! Set column values
! =================

   set_values(v) ::: template
   ! Set the column values "v"
      v :: V?, target

   DIE_IF(.values_set,"column has already been set!")

      .VALUES? => v
      .set_width_from(v)

   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{BIN}, VALUES?=>b_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{INT}, VALUES?=>i_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{INT}}, VALUES?=>iv_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{STR}}, VALUES?=>sv_values)
   ! Set the column values "v"
   end

   set_values(v)
   ! Set the column values "v"
      v :: VEC{STR}(len=STR_SIZE,:), target

   DIE_IF(.values_set,"column has already been set!")

      .s_values => v
      .set_width_from(v)

   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{REAL}, VALUES?=>r_values)
   ! Set the column values "v"
   end

   set_values_and_errors(r,e)
   ! Set the column values "r" and errors "e"
      r :: VEC{REAL}, target
      e :: VEC{REAL}, target

   DIE_IF(.values_set,"column has already been set!")

      .r_values => r
      .e_values => e
      .set_width_from(r,e)

   end

! ====================
! Create column values
! ====================

   create_values(v) ::: template
   ! Create the column values "v"
      v :: V?

   DIE_IF(.values_set,"column has already been set!")

      .VALUES?.create_copy(v)
      .set_width_from(v)
      .values_created = TRUE

   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{BIN}, VALUES?=>b_values), leaky
   ! Create the column values "v"
   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{INT}, VALUES?=>i_values), leaky
   ! Create the column values "v"
   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{INT}}, VALUES?=>iv_values), leaky
   ! Create the column values "v"
   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{STR}}, VALUES?=>sv_values), leaky
   ! Create the column values "v"
   end

   create_values(v)
   ! Create the column values "v"
      v :: VEC{STR}

   DIE_IF(.values_set,"column has already been set!")

      .s_values.create_copy(v)
      .set_width_from(v)
      .values_created = TRUE

   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{REAL}, VALUES?=>r_values), leaky
   ! Create the column values "v"
   end

   create_values_and_errors(r,e)
   ! Create the column values "r" and errors "e"
      r,e :: VEC{REAL}

   DIE_IF(.values_set,"column has already been set!")

      .r_values.create_copy(r)
      .e_values.create_copy(e)
      .set_width_from(r,e)
      .values_created = TRUE

   end

!  ================
!  Inquiry routines
!  ================

   values_set result (res) ::: pure
   ! Return true if any column has been set
      self :: IN
      res :: BIN
      res =  .b_values.associated &
         OR  .i_values.associated &
         OR  .r_values.associated &
         OR  .s_values.associated &
         OR .iv_values.associated &
         OR .sv_values.associated 
   end

   n_rows result (res) ::: pure
   ! Returns the number of rowa
      self :: IN
      res :: INT

   ENSURE(.values_set,"column not set")

      res = 0
      if      ( .b_values.associated)  then; res =  .b_values.dim
      else if ( .i_values.associated)  then; res =  .i_values.dim
      else if ( .r_values.associated)  then; res =  .r_values.dim
      else if ( .s_values.associated)  then; res =  .s_values.dim
      else if (.iv_values.associated)  then; res = .iv_values.dim
      else if (.sv_values.associated)  then; res = .sv_values.dim
      end

   end

!  ============
!  Put routines
!  ============

   put_heading
   ! Put the column heading out
      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.heading,center=.center,left=.left_justify,width=.width)
   end

   put_subheading
   ! Put the column subheading out
      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.subheading,center=.center,left=.left_justify,width=.width)
   end

   put_sb3heading
   ! Put the column subheading out
      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.sb3heading,center=.center,left=.left_justify,width=.width)
   end

   put_sb4heading
   ! Put the column subheading out
      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.sb4heading,center=.center,left=.left_justify,width=.width)
   end

   put_value(i)
   ! Put out the value "i"
      i :: INT

   ENSURE(.values_set,"column not set")

      w,p :: INT
      l,c :: BIN
      j,margin :: INT

      ! Widths & centering
      w = .width
      p = .real_precision
      l = .left_justify
      c = .center

      ! Put the spacer
      if (.spacer/=" ") stdout.put(trim(.spacer))

      ! Write out the item
      if      (.b_values.associated) then

         ! BIN
         stdout.put(.b_values(i),left=l,center=c,width=w)

      else if (.i_values.associated) then

         ! INT
         stdout.put(.i_values(i),left=l,center=c,width=w)

      else if (.r_values.associated AND .e_values.associated) then

         ! REAL(ERR)
         stdout.put(.r_values(i),.e_values(i),width=w,precision=p,max_cb=.max_cb)

      else if (.r_values.associated) then

         ! REAL
         stdout.put(.r_values(i),left=l,center=c,width=w,precision=p)

      else if (.s_values.associated) then

         ! STR
         stdout.put(.s_values(i),left=l,center=c,width=w)

      else if (.iv_values.associated) then

         ! VEC{INT}
         if (.list_as_column) then

            stdout.put(" ",width=.spacing)
            margin = stdout.buffer.item_end
            do j = 1,.iv_values(i).element.dim
               if (j>1) then
                  stdout.flush
                  stdout.tab(width=margin)
               end
               stdout.put(.iv_values(i)[j],left=l,center=c,width=.item_width)
            end

         else

            stdout.put(" ",width=.spacing)
            do j = 1,.iv_values(i).element.dim
            stdout.put(.iv_values(i)[j],left=l,center=c,width=.item_width)
            end

         end

      else if (.sv_values.associated) then

         ! VEC{STR}
         if (.list_as_column) then

            stdout.put(" ",width=.spacing)
            margin = stdout.buffer.item_end
            do j = 1,.sv_values(i).element.dim
               if (.sv_values(i)[j]==" ") cycle
               if (j>1) then
                  stdout.flush
                  stdout.tab(width=margin)
               end
               stdout.put(.sv_values(i)[j],left=l,center=c,width=.item_width)
            end

         else

            stdout.put(" ",width=.spacing)
            do j = 1,.sv_values(i).element.dim
            if (.sv_values(i)[j]==" ") cycle
            stdout.put(.sv_values(i)[j],left=l,center=c,width=.item_width)
            end

         end

      end

   end

end
