!---------------------------------------------------------------------
!
! TABLE_COLUMN:
!
! For setting up table columns ready to print
!
! Copyright (C) Dylan Jayatilaka, June 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------

module TABLE_COLUMN

   implicit none

   std_table_column  :: TABLE_COLUMN*, public  DEFAULT_NULL

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object
   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts
      self :: INOUT
      
       nullify(.b_values)
       nullify(.i_values)
       nullify(.r_values)
       nullify(.e_values)
       nullify(.s_values)
      nullify(.iv_values)
      nullify(.sv_values)

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts, only if created
      self :: INOUT

      if (.values_created) then
          .b_values.destroy ! leaky
          .i_values.destroy
          .r_values.destroy
          .e_values.destroy
          .s_values.destroy
         .iv_values.destroy
         .sv_values.destroy
         .values_created = FALSE
      else
        .nullify_ptr_part  ! *not* leaky
      end

   end


   create_std_table_column ::: selfless
   ! Create an object

      std_table_column.destroy
      std_table_column.create

   end

!  ====
!  Copy
!  ====

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(column) ::: leaky
   ! Set self to be "group".
      column :: TABLE_COLUMN, IN
      self = column
   end

!  ============
!  Set routines
!  ============

   set_defaults ::: PURE
   ! Set up defaults
      self :: INOUT

      .heading        = " "
      .subheading     = " "
      .sb3heading     = " "

      ! Set some defaults from stdout
      if (stdout.associated) then
         .width          = stdout.real_width
         .real_precision = stdout.real_precision
      else
         .width          = TABLE_COLUMN_WIDTH
         .real_precision = TABLE_COLUMN_REAL_PRECISION
      end

      .max_cp            = TABLE_COLUMN_REAL_PRECISION

      .item_width        = TABLE_COLUMN_WIDTH
      .column_spacing    = TABLE_COLUMN_SPACING
      .list_item_spacing = TABLE_COLUMN_SPACING
      .spacer            = TABLE_COLUMN_SPACER 
      .center            = TABLE_COLUMN_CENTER
      .left_justify      = TABLE_COLUMN_LEFT_JUSTIFY
      .list_as_column    = TABLE_COLUMN_LIST_AS_COLUMN
                         
      .width_set         = FALSE
      .item_width_set    = FALSE
      .values_created    = FALSE

      if (std_table_column.associated) then

         .column_spacing    = std_table_column.column_spacing
         .list_item_spacing = std_table_column.list_item_spacing
         .e_under_r         = std_table_column.e_under_r

      end

   end

   clear_column ::: leaky, PURE
   ! Remove the column data
      self :: INOUT

      .destroy_ptr_part

   end

   set_heading(val) ::: PURE
   ! Set the heading
      self :: INOUT
      val :: STR, IN

      .heading = val
      .set_width_from(.heading)

   end

   set_subheading(val) ::: PURE
   ! Set the subheading
      self :: INOUT
      val :: STR, IN

      .subheading = val
      .set_width_from(.subheading)

   end

   set_subhead(val) ::: PURE
   ! Set the subheading
      self :: INOUT
      val :: STR, IN

      .set_subheading(val)

   end

   set_sb3head(val) ::: PURE
   ! Set the sub3 heading
      self :: INOUT
      val :: STR, IN

      .sb3heading = val
      .set_width_from(.sb3heading)

   end

   set_real_precision(val) ::: PURE
   ! Set the real precision
      self :: INOUT
      val :: INT, IN

 ! ENSURE(val>0,"real_precision must be positive")
   ENSURE(val<.width,"real_precision must be less than column width")

      .real_precision = max(val,0)

   end

   set_max_cp(val) ::: PURE
   ! Set the maximum closing parenthesis position, for imprecise real
      self :: INOUT
      val :: INT, IN

   ENSURE(val<.width,"max_cp must be less than column width")

      .max_cp = max(val,0)

   end

   set_e_under_r(val) ::: PURE
   ! Set whether to print the error value under the real.
   ! In the case errors are not shown as parentheses.
      self :: INOUT
      val :: BIN, IN

      .e_under_r = val

   end

   set_column_spacing(val) ::: PURE
   ! Set the free space within each column width
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"column_spacing must be non-negative")
   ENSURE(NOT .width_set,"set column_spacing before width or heading")

      .column_spacing = val

   end

   set_list_item_spacing(val) ::: PURE
   ! Set the free space between items in a list-item column
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"spacing must be non-negative")
   ENSURE(NOT .width_set,"set spacing before width or heading")

      .list_item_spacing = val

   end

   set_spacer(val) ::: PURE
   ! Set the space character between each column
      self :: INOUT
      val :: STR, IN

      .spacer = val

   end

   set_center(val) ::: PURE
   ! Set whether to center a STR column
      self :: INOUT
      val :: BIN, IN

      .center = val

   end

   set_left_justify(val) ::: PURE
   ! Set whether to left-justify a column
      self :: INOUT
      val :: BIN, IN

      .left_justify = val

   end

   set_left(val) ::: PURE
   ! Set whether to left-justify a column
      self :: INOUT
      val :: BIN, IN

      .left_justify = val

   end

   set_list_as_column(val) ::: PURE
   ! Set whether to put a list-of-lists as a column, one-per-line.
   ! NOTE: this can only be set when the list is the last column.
      self :: INOUT
      val :: BIN, IN

      .list_as_column = val

   end

   set_width(val) ::: PURE
   ! Set the column width to be the maximum of what it was and "val"
   ! If headings are set, take into account those widths too.
      self :: INOUT
      val :: INT, IN

      if (.width_set) then; .width = max(.width,val)
      else;                 .width = val
      end

      .width_set = TRUE

   end

   force_width(val) ::: PURE
   ! Force set the column width to be "val"
      self :: INOUT
      val :: INT, IN

      .width = val
      .width_set = TRUE

   end

   set_item_width(val) ::: PURE
   ! Set the list item width
      self :: INOUT
      val :: INT, IN

      if (.item_width_set) then; .item_width = max(.item_width,val)
      else;                      .item_width = val
      end

      .item_width_set = TRUE

   end

! =====================================
! Set column width from width of values
! =====================================

! Non-real ...

   set_width_from(val) ::: template, PURE
   ! Set width from the width of scalar value "val"
      self :: INOUT
      val :: VAL?, IN

      wid :: INT

      val.get_str_length(wid,.column_spacing)
      .set_width(wid)

   end

   set_width_from(val) ::: get_from(TABLE_COLUMN, VAL?=>BIN), PURE
   ! Set width from the width of scalar value "val"
   end

   set_width_from(val) ::: get_from(TABLE_COLUMN, VAL?=>INT), PURE
   ! Set width from the width of scalar value "val"
   end

   set_width_from(val) ::: get_from(TABLE_COLUMN, VAL?=>STR), PURE
   ! Set width from the width of scalar value "val"
   end

! Real ...

   set_width_from(val) ::: PURE
   ! Set width from the width of the REAL value "val".
      self :: INOUT
      val :: REAL, IN

      wid :: INT

      val.get_str_length_maxdp(wid,.real_precision,.column_spacing)
      .set_width(wid)

   end

! Arrays of non-real ...

   set_width_from(v) ::: template, PURE
   ! Set width from the maximum width of values in array "v"
      self :: INOUT
      v :: V?, IN

      wid :: INT

      v.get_max_str_length(wid,.column_spacing)
      .set_width(wid)

   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{BIN}), PURE
   ! Set width from the maximum width of values in array "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{INT}), PURE
   ! Set width from the maximum width of values in array "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{STR}), PURE
   ! Set width from the maximum width of values in array "v"
   end

! Arrays of real ...

   set_width_from(v) ::: template, PURE
   ! Set width from the maximum width of REALs in array "v"
      self :: INOUT
      v :: V?, IN

      wid :: INT

      v.get_max_str_length(wid,.real_precision,.column_spacing)
      .set_width(wid)

   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{REAL}), PURE
   ! Set width from the maximum width of REALs in array "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>MAT{REAL}), PURE
   ! Set width from the maximum width of REALs in array "v"
   end

! Real with errors ...

   set_width_from(r,e) ::: PURE
   ! Set width from the width of value "r" and its error "e".
   ! Also set the precision.
      self :: INOUT
      r,e :: REAL, IN

      wid,dp, de,le,pad :: INT

      ! Get width & precision
      r.get_str_length_align(e,wid,dp,de,le,pad,.real_precision)

      ! Set width & precision
      .set_width(wid+.column_spacing)
      .set_real_precision(dp)

   end

! Arrays of real with errors ...

   set_width_from(r,e) ::: PURE
   ! Set width from the maximum  width of value "r" and its error "e".
   ! Also set the precision.
      self :: INOUT
      r,e :: VEC{REAL}, IN

      msl,mdp,mcb,mcc :: INT

      ! Get max width & precision & closing bracket
      r.get_max_str_length(msl,mdp,mcc,e,.real_precision)
      r.get_max_str_length(msl,mdp,mcb,e,.real_precision,max_cb=mcc)

      ! Set 
      .set_width(msl+.column_spacing)
      .set_real_precision(mdp)
      .set_max_cp(mcb)

   end

! List of lists VEC{VEC_{TYPE}} of non-real ...  

   set_width_from(v) ::: template, PURE
   ! Set width from the width of list-of-lists value(s) in "v"
      self :: INOUT
      v :: V?, IN

      wid :: INT

      wid = v.list_str_length(.list_item_spacing)
      wid = wid + .column_spacing
      .set_width(wid)

      wid = v.item_str_length
      wid = wid + .list_item_spacing
      .set_item_width(wid)

   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{INT}}), PURE
   ! Set width from the width of list-of-lists value(s) in "v"
   end

   set_width_from(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{STR}}), PURE
   ! Set width from the width of list-of-lists value(s) in "v"
   end

! =================
! Set column values
! =================

   set_values(v) ::: template
   ! Set the column values "v"
      self :: INOUT
      v :: V?, target

   DIE_IF(.values_set,"column has already been set!")

      .VALUES? => v
      .set_width_from(v)

   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{BIN}, VALUES?=>b_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{INT}, VALUES?=>i_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{STR}, VALUES?=>s_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{INT}}, VALUES?=>iv_values)
   ! Set the column values "v"
   end

   set_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{STR}}, VALUES?=>sv_values)
   ! Set the column values "v"
   end

   set_values(v)
   ! Set the column values "v"
      self :: INOUT
      v :: VEC{REAL}, target

   DIE_IF(.values_set,"column has already been set!")

      .r_values => v
      .set_width_from(v)
      .set_e_under_r(FALSE) ! <---

   end

   set_values_and_errors(r,e)
   ! Set the column values "r" and errors "e"
      self :: INOUT
      r :: VEC{REAL}, target
      e :: VEC{REAL}, target

   DIE_IF(.values_set,"column has already been set!")

      .r_values => r
      .e_values => e
      .set_width_from(r,e)

   end

! ====================
! Create column values
! ====================

   create_values(v) ::: template
   ! Create the column values "v"
      self :: INOUT
      v :: V?, IN

   DIE_IF(.values_set,"column has already been set!")

      .VALUES?.create_copy(v)
      .set_width_from(v)
      .values_created = TRUE

   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{BIN}, VALUES?=>b_values), leaky
   ! Create the column values "v"
   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{INT}, VALUES?=>i_values), leaky
   ! Create the column values "v"
   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{INT}}, VALUES?=>iv_values), leaky
   ! Create the column values "v"
   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{VEC_{STR}}, VALUES?=>sv_values), leaky
   ! Create the column values "v"
   end

   create_values(v)
   ! Create the column values "v"
      self :: INOUT
      v :: VEC{STR}, IN

   DIE_IF(.values_set,"column has already been set!")

      .s_values.create_copy(v)
      .set_width_from(v)
      .values_created = TRUE

   end

   create_values(v) ::: get_from(TABLE_COLUMN, V?=>VEC{REAL}, VALUES?=>r_values), leaky
   ! Create the column values "v"
   end

   create_values_and_errors(r,e)
   ! Create the column values "r" and errors "e"
      self :: INOUT
      r,e :: VEC{REAL}, IN

   DIE_IF(.values_set,"column has already been set!")

      .r_values.create_copy(r)
      .e_values.create_copy(e)
      .set_width_from(r,e)
      .values_created = TRUE

   end

!  ================
!  Inquiry routines
!  ================

   values_set result (res) ::: pure
   ! Return true if any column has been set
      self :: IN
      res :: BIN
      res =  .b_values.associated &
         OR  .i_values.associated &
         OR  .r_values.associated &
         OR  .s_values.associated &
         OR .iv_values.associated &
         OR .sv_values.associated 
   end

! This is very important

   values_set_as_str result (res) ::: pure
   ! Return a string value describing the type of column set.
      self :: IN
      res :: STR

      res = "none"

           if (.b_values.associated)  then; res = "bin"
      else if (.i_values.associated)  then; res = "int"
      else if (.r_values.associated AND .e_values.disassociated) then
                                            res = "real"
      else if (.r_values.associated AND .e_values.associated) then
           if (.e_under_r)            then; res = "real"        ! 1st row is real
           else;                            res = "real(error)" ! default
           end
      else if (.s_values.associated)  then; res = "str"
      else if (.iv_values.associated) then; res = "int-list"
      else if (.sv_values.associated) then; res = "str-list"
      end

   end

   is_a_real_error_column result (res) ::: pure
   ! Return TRUE if the column has r_values and e_values.
      self :: IN
      res :: BIN

      res = .r_values.associated AND .e_values.associated

   end

   n_rows result (res) ::: pure
   ! Returns the number of rows.
   ! NOTE: if the error column is printed, this may not correspond
   ! to the actual number of outputted rows, because the error may be
   ! wriiten underneath the real value.
      self :: IN
      res :: INT

   ENSURE(.values_set,"column not set")

      res = 0
      if      ( .b_values.associated)  then; res =  .b_values.dim
      else if ( .i_values.associated)  then; res =  .i_values.dim
      else if ( .r_values.associated)  then; res =  .r_values.dim
      else if ( .s_values.associated)  then; res =  .s_values.dim
      else if (.iv_values.associated)  then; res = .iv_values.dim
      else if (.sv_values.associated)  then; res = .sv_values.dim
      end

   end

!  ============
!  I/O Routines
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      self :: INOUT
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case ("}                 ")  ! exit case
      case ("column_spacing=   "); .read_column_spacing
      case ("error_under_value="); .read_su_under_value
      case ("list_item_spacing="); .read_list_item_spacing
      case ("real_precision=   "); .read_real_precision
      case ("su_under_value=   "); .read_su_under_value
      case  default;               UNKNOWN(word)
      end

   end

   read_column_spacing
   ! Read space to apply between columns
      self :: INOUT

      val :: INT

      stdin.read(val)
      .set_column_spacing(val)

   end

   read_list_item_spacing
   ! Read spacing to apply between list-of-items column
      self :: INOUT

      val :: INT

      stdin.read(val)
      .set_list_item_spacing(val)

   end

   read_real_precision
   ! Read the number of decimal places for rea number output
      self :: INOUT

      val :: INT

      stdin.read(val)
      .set_real_precision(val)

   end

   read_su_under_value
   ! Read whether to priunt su's under tha colum value.
      self :: INOUT

      val :: BIN

      stdin.read(val)
      .set_e_under_r(val)

   end

!  ============
!  Put routines
!  ============

   put_heading
   ! Put the column heading out
      self :: IN

      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.heading,center=.center,left=.left_justify,width=.width)

   end

   put_subheading
   ! Put the column subheading out
      self :: IN

      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.subheading,center=.center,left=.left_justify,width=.width)

   end

   put_sb3heading
   ! Put the column subheading out
      self :: IN

      if (.spacer/=" ") stdout.put(trim(.spacer))
      stdout.put(.sb3heading,center=.center,left=.left_justify,width=.width)

   end

! This is the main procedure

   put_value(i,valtype)
   ! Put out the value "i"
      self :: IN
      i :: INT, IN
      valtype :: STR, optional, IN

   ENSURE(.values_set,"column not set")
   ENSURE(i.is_in_range([1,.n_rows]),"column index i out of range")
   ENSURE(present(valtype) EQV valtype=="error","if used, valtype must be 'error'")

      w,p :: INT
      l,c :: BIN
      j,margin :: INT
      coltyp :: STR

      ! Widths & centering
      w = .width
      p = .real_precision
      l = .left_justify
      c = .center

      ! Put the spacer
      if (.spacer/=" ") stdout.put(trim(.spacer))

      ! Column value type
      coltyp = .values_set_as_str

      ! Is this an "error" underneath a "real"?
      if (present(valtype)) then
         DIE_IF(valtype/="error","if used, valtype must be 'error'")
         if (.e_under_r AND coltyp=="real" AND .e_values.associated) then
            coltyp = "error" ! Safe: reset to "error"
         else
            coltyp = "blank" ! Column is "blank"
         end
      end

      ! Cases
      select case (coltyp)

      case ("blank      "); stdout.put(" ",width=w,blank=TRUE)                   ! Output a blank
      case ("bin        "); stdout.put(.b_values(i),left=l,center=c,width=w)
      case ("int        "); stdout.put(.i_values(i),left=l,center=c,width=w)
      case ("real(error)"); stdout.put(.r_values(i),.e_values(i),width=w,precision=p,max_cb=.max_cp) ! Default
      case ("real       "); stdout.put(.r_values(i),left=l,center=c)             ! Handle outside
      case ("error      "); stdout.put(.e_values(i),left=l,center=c)             ! with valtype
      case ("str        "); stdout.put(.s_values(i),left=l,center=c,width=w)

      case ("int-list   ")

         ! VEC{INT}
         if (.list_as_column) then

            stdout.put(" ",width=.column_spacing)
            margin = stdout.buffer.item_end
            do j = 1,.iv_values(i).element.dim
               if (j>1) then
                  stdout.flush
                  stdout.tab(width=margin)
               end
               stdout.put(.iv_values(i)[j],left=l,center=c,width=.item_width)
            end

         else

            stdout.put(" ",width=.column_spacing)
            do j = 1,.iv_values(i).element.dim
            stdout.put(.iv_values(i)[j],left=l,center=c,width=.item_width)
            end

         end

      case ("str-list")

         ! VEC{STR}
         if (.list_as_column) then

            stdout.put(" ",width=.column_spacing)
            margin = stdout.buffer.item_end
            do j = 1,.sv_values(i).element.dim
               if (.sv_values(i)[j]==" ") cycle
               if (j>1) then
                  stdout.flush
                  stdout.tab(width=margin)
               end
               stdout.put(.sv_values(i)[j],left=l,center=c,width=.item_width)
            end

         else

            stdout.put(" ",width=.column_spacing)
            do j = 1,.sv_values(i).element.dim
            if (.sv_values(i)[j]==" ") cycle
            stdout.put(.sv_values(i)[j],left=l,center=c,width=.item_width)
            end

         end


      end ! case

   end

end
