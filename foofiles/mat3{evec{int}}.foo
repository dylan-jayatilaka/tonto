!---------------------------------------------------------------------------
!
! MAT3{EVEC{INT}}
!
! A 3D matrix where each element is a vector of (possibly) a different length
!
! Copyright (C) Dylan Jayatilaka, 2002
! Copyright (C) Dylan Jayatilaka, 2021
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAT3{EVEC{INT}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given dimensions
      self :: allocatable, OUT
      dim1,dim2,dim3 :: INT, IN
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given bounds
   end
  
   create(dim1,dim2,dim3,dimv) ::: get_from(MAT3{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate object with desired dimensions, ".element" part with bounds "dimv".
   end

   create(dim,dimv) ::: get_from(MAT3{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate object with desired dimensions, ".element" part size "dimv".
   end

   create(dim,dimv) ::: get_from(MAT3{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate object with desired dimensions, ".element" part with bounds "dimv".
   end

   create_vec(dimv) ::: get_from(MAT3{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate only the the ".element" pointer parts with size "dimv".
   end

   create_vec(dimv) ::: get_from(MAT3{EVEC{INTRINSIC}}), leaky, PURE
   ! Allocate only the the ".element" pointer parts with bounds "dimv".
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   destroy_ptr_part ::: get_from(MAT3{EVEC{INTRINSIC}}), leaky, PURE
   ! Deallocate the ".element" allocatable parts
   end

!  =======
!  Methods
!  =======

   is_same_shape_as(b) result (res) ::: get_from(MAT3{INTRINSIC}), pure
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   zero ::: get_from(MAT3{EVEC{INTRINSIC}}), pure
   ! Zero all elements
   end

   set_to(v) ::: get_from(MAT3{EVEC{INTRINSIC}}), PURE
   ! Set self to "v". Up to you to make sure they are compatible!
   end

end
