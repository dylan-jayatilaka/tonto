!---------------------------------------------------------------------------
!
! VEC{MAT3_{INTRINSIC}}: Vector of MAT3{INTRINSIC} matrices
!
! Copyright (C) Dylan Jayatilaka, 2006
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{MAT3_{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: leaky, PURE
   ! Create the object with dimension "dim"
      self :: PTR
      dim :: INT, IN

      status :: INT

      allocate(self(dim),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      .nullify_ptr_part

   end

   create(lb,ub) ::: leaky, PURE
   ! Create the object with lower and upper bounds "lb" and "ub"
      self :: PTR
      lb,ub :: INT, IN

   ENSURE(ub>=lb,"upper bound must be greater than or equal to lower bound")

      status :: INT

      allocate(self(lb:ub),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      .nullify_ptr_part

   end

   destroy ::: leaky, PURE
   ! Destroy the object
      self :: PTR

      status :: INT

      if (.disassociated) return

      .destroy_ptr_part

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts
      self :: INOUT

      i :: INT

      do i = 1,.dim1
         nullify(self(i).element)
      end

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts
      self :: INOUT

      i :: INT

      do i = 1,.dim1
         self(i).element.destroy
      end

   end

!  ====
!  Copy
!  ====

   create_copy(m) ::: leaky
   ! Create a copy of "m"
      self :: PTR
      m :: VEC{MAT3_{INTRINSIC}}
      .create(m.lb,m.ub)
      .copy(m)
   end

   copy(m) ::: leaky
   ! Make a copy of "m"
      m :: VEC{MAT3_{INTRINSIC}}
      i :: INT
      do i = m.lb,m.ub
         if (m(i).element.disassociated) cycle
         self(i).element.create_copy(m(i).element)
      end
   end

!  ======
!  Sizing
!  ======

   lb result (res) ::: pure
   ! Returns the lower bound of self
      self :: IN
      res :: INT
      res = lbound(self,1)
   end

   ub result (res) ::: pure
   ! Returns the upper bound of self
      self :: IN
      res :: INT
      res = ubound(self,1)
   end

end
