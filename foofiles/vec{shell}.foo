!==================================================================
!
! VEC{SHELL}: A vector of gaussian SHELL data
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!==================================================================

module VEC{SHELL}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Deallocate the vector
   end

   destroy_ptr_part ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy the pointer parts of self
   end

!  =======================
!  Shrinking and expansion 
!  =======================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

!  ============
!  Set routines
!  ============

   set_spherical(val) ::: pure
   ! Set sphericals to "val"
      self :: INOUT
      val :: BIN, IN

      i :: INT

      do i = 1,.dim
         self(i).set_spherical(val)
      end

   end

!  =======================
!  List-based I/O Routines
!  =======================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! This version is for allocatable arrays.
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are not needed.
   end

   read_data_BL_terminated ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. Opening
   ! braces are not needed, but a blank line (BL) is used as an
   ! end-of-list terminator.
   end

   data_length_BL_terminated result (length) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Read ahead in stdin to get the "length" of the data list. The
   ! data list begins with the first data item, *not* a "{" symbol.
   ! The data list must be terminated by a blank line (BL).
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read a new set of keys
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input. (This code is for non-pointer self objects).
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file. (This code is for non-pointer self
   ! objects).
   end

!  ===========================
!  Non-list based I/O routines
!  ===========================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
      self :: INOUT
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case("}           ") ! do nothing.
      case("put         "); .put
      case("redirect    "); .redirect
      case("revert      "); .revert
      case default;       UNKNOWN(word)
      end

   end

!  =======
!  Methods
!  =======

   unnormalise ::: PURE
   ! Take the normalisation factors out of the primitives, assuming
   ! that the contraction coeff's refer to normalised basis functions
      self :: INOUT

      i :: INT

      do i= 1,.dim
         self(i).unnormalise
      end

   end

   renormalise ::: PURE
   ! Put back in the normalisation factors of the primitives, assuming
   ! that the contraction coeff's refer to unnormalised basis functions
      self :: INOUT

      i :: INT

      do i= 1,.dim
         self(i).renormalise
      end

   end

!  ===============
!  Inquiry methods
!  ===============

   maximum_l_value result (res) ::: pure
   ! Return the maximum l value in the shell vector
      self :: IN
      res :: INT

      i :: INT

      res = 0

      do i = 1,.dim
         res = max(res,self(i).l)
      end

   end

   same_as(sh) result (same) ::: pure
   ! Return TRUE if the shell vector set "self" is the same as "sh".
      self :: IN
      sh :: VEC{SHELL}, IN
      same :: BIN

      i :: INT

      if (.dim /= sh.dim) then 

         same = FALSE

      else

         same = TRUE
         do i = 1,.dim
            same = same AND self(i).same_as(sh(i))
            if (NOT same) exit
         end

      end

   end

!   no_of_shells result (res) ::: pure
!   ! Work out and return the number of shells 
!      self :: IN
!      res :: INT
!      res = .dim
!   end

   no_of_primitive_shells result (res) ::: pure
   ! Work out and return the number of primitives shells
      self :: IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         res = res + self(i).n_cc
      end

   end

   no_of_basis_functions result (res) ::: pure
   ! Work out and return the number of basis functions 
      self :: IN
      res :: INT
      i :: INT

      res = 0
      do i = 1,.dim
         res = res + self(i).n_bf
      end

   end

   no_of_sph_basis_functions result (res) ::: pure
   ! Work out and return the number of spherical basis functions 
      self :: IN
      res :: INT

      i,l :: INT

      res = 0
      do i = 1,.dim
         l = self(i).l
         res = res + 2*l + 1
      end

   end

   no_of_primitives result (res) ::: pure
   ! Work out and return the number of primitives 
      self :: IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         res = res + self(i).n_bf*self(i).n_cc
      end

   end

   no_of_sph_primitives result (res) ::: pure
   ! Work out and return the number of spherical primitives 
      self :: IN
      res :: INT

      i,l :: INT

      res = 0
      do i = 1,.dim
         l = self(i).l
         res = res + (2*l+1)*self(i).n_cc
      end

   end

   xyz_basis_fn_part result (res) ::: PURE
   ! Return a character representation for the cartesian product part
   ! of the gaussians in this shell.
      self :: IN
      res :: VEC{STR}(no_of_basis_functions(self))

      s,f,l :: INT

      l = 0
      do s = 1,.dim
         f = l + 1
         l = l + self(s).n_comp
         res(f:l) = self(s).xyz_basis_fn_part
      end

   end

!  ==============================
!  Exponents and cutoff distances
!  ==============================

   min_exponent result (res) ::: pure
   ! Return the minimum exponent in the basis.
      self :: IN
      res :: REAL

      tmp :: REAL
      i :: INT

      res = huge(ONE)
      do i = 1,.dim
         tmp = minval(self(i).exponent)
         res = min(tmp,res)
      end

   end

   r_max(cutoff) result (res) ::: pure
   ! Return the radius where all basis functions becomes smaller than "cutoff".
      self :: IN
      cutoff :: REAL, IN
      res :: REAL

      i :: INT

      res = ZERO
      do i = 1,.dim
         res = max(res,self(i).r_max(cutoff))
      end

   end

   r2_max(cutoff) result (res) ::: pure
   ! Return the radius where all basis functions becomes smaller than "cutoff".
      self :: IN
      cutoff :: REAL, IN
      res :: REAL

      i :: INT

      res = ZERO
      do i = 1,.dim
         res = max(res,self(i).r2_max(cutoff))
      end

   end

!  ====
!  Dump
!  ====

   dump(object_name) ::: get_from(VEC{OBJECT})
   ! Dump a vector object
   end

   dmpp(object_name) ::: get_from(VEC{OBJECT})
   ! Dump an allocatable vector object
   end

!  ======
!  Output
!  ======

   put
   ! Put to "stdout"
      self :: IN

      i :: INT

      stdout.flush
      stdout.show("No. of shells   =",.dim)
      stdout.show("Maximum l value =",.maximum_l_value)
      stdout.flush
      stdout.text("Shell list:")
      do i = 1,.dim
         self(i).put
      end

   end

end
