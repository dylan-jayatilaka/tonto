!---------------------------------------------------------------------------
!
! VEC{PAIR_ENERGY}: PAIR_ENERGY vectors
!
! Copyright (C) Peter Spackman, 2018
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------
module VEC{PAIR_ENERGY}

   implicit none

   energy_model_ce_b3lyp :: VEC{REAL}(4) = [1.0573d0, 0.6177d0, 0.7399d0, 0.8708d0] 
   energy_model_ce_hf :: VEC{REAL}(4) = [1.019, 0.811, 0.651, 0.901] 
   energy_model_scale_factors :: VEC{REAL}(4) = [ONE, ONE, ONE, ONE]
                                  ! E_ele, E_rep, E_pol, E_dis
   energy_model :: STR = "ce-hf"

contains

!  ==================
!  Allocation methods
!  ==================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Create space for object
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy space for object
   end

   nullify_ptr_part ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Nullify the pointer parts of self
   end

   destroy_ptr_part ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy the pointer parts of self
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
   end


!  ====
!  Copy
!  ====

   copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec".
   end

   copy(vec,list) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec" for the elements in "list".
   end

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   create_copy(vec,list) ::: get_from(VEC{OBJECT}), leaky
   ! Create a copy of "vec" for the elements in "list".
   end

   expand(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Expand the vector "self" to "dim". New slots are left undefined.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

   prune_element(k) ::: get_from(VEC{OBJECT}), leaky
   ! Removes the single element at position "k" from the vector.
   ! The order of the elements is unchanged.
   end

!  ===
!  Set
!  ===

   set_defaults ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Set default values
   end

!  ===
!  Container operations
!  ===

   equivalent_pair(pair) result(res) ::: pure
      self :: IN
      pair :: PAIR_ENERGY, IN
      res :: INT
      i :: INT
      res = -1
      do i = 1, .dim
          if (self(i).is_equivalent(pair)) then
              res = i
              return
          end if
      end
   end

   identical_pair(pair) result(res) ::: pure
      self :: IN
      pair :: PAIR_ENERGY, IN
      res :: INT
      i :: INT
      res = -1
      do i = 1, .dim
          if (self(i).is_identical(pair)) then
              res = i
              return
          end if
      end
   end

   append_or_increment(val) ::: pure
      self :: allocatable, INOUT
      val :: PAIR_ENERGY, value, IN
      idx :: INT
      idx = -1
      if (NOT allocated(self)) then
         self = [ val ]
         return
      end
      idx = self.identical_pair(val)
      if(idx > 0) then
          return
      end
      idx = self.equivalent_pair(val)
      if(idx > 0) then
          self(idx).increment_count(val.pos_b(:,1))
          return
      end
      self = [ self, val ]
   end


   
   total_energy(scaled) result(res)
      scaled :: BIN, optional
      res :: REAL
      i :: INT
      use_scale :: BIN = TRUE
      fac :: VEC{REAL}(4)
      res = ZERO
      if(present(scaled)) use_scale = scaled

      if(use_scale) then
          fac = energy_model_scale_factors
      else
          fac = ONE
      end

      do i = 1, .dim
          res = res + fac.dot(self(i).components(:)) * self(i).n_equivalent
      end
      res = res * KJOULEMOL_PER_HARTREE
   end


   total_ele(scaled) result(res)
      scaled :: BIN, optional
      res :: REAL
      i :: INT
      use_scale :: BIN = TRUE
      fac :: REAL = 1.0
      res = ZERO
      if(present(scaled)) use_scale = scaled

      if(use_scale) fac = energy_model_scale_factors(1)

      do i = 1, .dim
          res = res + (self(i).components(1) * self(i).n_equivalent)
      end
      res = res * KJOULEMOL_PER_HARTREE * fac
   end

   total_rep(scaled) result(res)
      scaled :: BIN, optional
      res :: REAL
      i :: INT
      use_scale :: BIN = TRUE
      fac :: REAL = 1.0
      res = ZERO
      if(present(scaled)) use_scale = scaled

      if(use_scale) fac = energy_model_scale_factors(2)

      do i = 1, .dim
          res = res + (self(i).components(2) * self(i).n_equivalent)
      end
      res = res * KJOULEMOL_PER_HARTREE * fac
   end

   total_pol(scaled) result(res)
      scaled :: BIN, optional
      res :: REAL
      i :: INT
      use_scale :: BIN = TRUE
      fac :: REAL = 1.0
      res = ZERO
      if(present(scaled)) use_scale = scaled

      if(use_scale) fac = energy_model_scale_factors(3)

      do i = 1, .dim
          res = res + (self(i).components(3) * self(i).n_equivalent)
      end
      res = res * KJOULEMOL_PER_HARTREE * fac
   end

   total_dis(scaled) result(res)
      scaled :: BIN, optional
      res :: REAL
      i :: INT
      use_scale :: BIN = TRUE
      fac :: REAL = 1.0
      res = ZERO
      if(present(scaled)) use_scale = scaled

      if(use_scale) fac = energy_model_scale_factors(4)

      do i = 1, .dim
          res = res + (self(i).components(4) * self(i).n_equivalent)
      end
      res = res * KJOULEMOL_PER_HARTREE * fac
   end

   calculated_pairs result(res) ::: pure
      self :: IN
      res :: VEC{INT}@
      i :: INT
      do i = 1, self.dim
         if (self(i).energy_calculated) res.append(i)
      end
   end

   put_lattice_energy_table(dipole_correction)
      dipole_correction :: REAL
      table :: VEC{TABLE_COLUMN}*
      a :: INT
      indices, indices_calc :: VEC{INT}@
      E_tot :: REAL
      n_equiv :: VEC{INT}(.dim)
      symop :: VEC{STR}(.dim)
      sep, prox, e_ele, e_pol, e_dis, e_rep, tot_col :: VEC{REAL}(.dim)
      conversion_factor :: REAL
      D :: REAL
      display_unit :: STR
      display_unit = "kJ/mol"
      ! E_ele, E_pol, E_dis, E_rep
      conversion_factor = display_unit.conversion_factor
      D = dipole_correction * conversion_factor

      allocate(indices(.dim))
      self(1:).closest_distance.quick_sort(indices)


      stdout.flush
      stdout.text("=============================")
      stdout.text("Lattice energy dimer energies")
      stdout.text("=============================")
      stdout.flush
      table.create(9)
      table(1).set_heading("N")
      table(2).set_heading("Symop")
      table(3).set_heading("Separation")
      table(4).set_heading("Proximity")
      table(5).set_heading("E_ele")
      table(6).set_heading("E_pol")
      table(7).set_heading("E_dis")
      table(8).set_heading("E_rep")
      table(9).set_heading("E_tot")


      symop(:) = self(indices).symop_str
      n_equiv(:) = self(indices).n_equivalent
      sep(:) = self(indices).center_separation * ANGSTROM_PER_BOHR
      prox(:) = self(indices).closest_distance * ANGSTROM_PER_BOHR
      e_ele(:) = self(indices).components(1) * KJOULEMOL_PER_HARTREE
      e_rep(:) = self(indices).components(2) * KJOULEMOL_PER_HARTREE
      e_pol(:) = self(indices).components(3) * KJOULEMOL_PER_HARTREE
      e_dis(:) = self(indices).components(4) * KJOULEMOL_PER_HARTREE
      !do a = 1, .dim
      tot_col(:) = e_ele(:) * energy_model_scale_factors(1) + &
                   e_rep(:) * energy_model_scale_factors(2) + &
                   e_pol(:) * energy_model_scale_factors(3) + &
                   e_dis(:) * energy_model_scale_factors(4) 
      !end

 
      ! sort the energies table by separation
      table(1).set_values(n_equiv)
      table(2).set_values(symop)
      table(3).set_values(sep)
      table(4).set_values(prox)
      table(5).set_values(e_ele)
      table(6).set_values(e_pol)
      table(7).set_values(e_dis)
      table(8).set_values(e_rep)
      table(9).set_values(tot_col)
      table.put(label_rows=FALSE)
      table.destroy

      stdout.flush

      stdout.text("Totals: ")
      stdout.show("Unique pairs              =", .dim)
      stdout.show("E_ele                     =", .total_ele(scaled=FALSE))
      stdout.show("E_rep                     =", .total_rep(scaled=FALSE))
      stdout.show("E_pol                     =", .total_pol(scaled=FALSE))
      stdout.show("E_dis                     =", .total_dis(scaled=FALSE))

      E_tot = .total_energy(scaled=FALSE)
      stdout.show("E_tot                     =", E_tot)
      E_tot = .total_energy(scaled=TRUE)
      stdout.show("E_tot (scaled)            =", E_tot)
      stdout.show("Cell dipole term (D)      =", D)
      stdout.show("E_lat (0.5 * E_tot + D)   =", E_tot * HALF + D)

    end 

    set_energy_model(method) ::: selfless
        method :: STR
        energy_model = trim(method)
        stdout.show("Using energy model", energy_model)
        select case (energy_model)
            case ("ce-hf"); energy_model_scale_factors = energy_model_ce_hf 
            case ("ce-b3lyp"); energy_model_scale_factors = energy_model_ce_b3lyp
            case default; energy_model_scale_factors = ONE
        end
        stdout.text("Scale factors:")
        stdout.show("E_ele:", energy_model_scale_factors(1))
        stdout.show("E_rep:", energy_model_scale_factors(2))
        stdout.show("E_pol:", energy_model_scale_factors(3))
        stdout.show("E_dis:", energy_model_scale_factors(4))
    end

    get_energy_model(res) ::: selfless
        res :: STR, OUT
        res = trim(energy_model)
    end

    put
        i :: INT
        do i = 1, .dim
            self(i).put
        end
    end
end
