!---------------------------------------------------------------------------
!
!  VEC{CPX}: Complex vector operations ...
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{CPX}

   implicit none

   interface to_str
      to_str_vec_cpx_0
      to_str_vec_cpx_1
      to_str_vec_cpx_2
   end

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower and upper bounds in "bounds"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

! Old

   create(dim) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create space for object
   end

   create(lb,ub) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create the vector with "bounds"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object. This version does not destroy pointer parts.
   end


!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, PURE
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, PURE
   ! Return the size of the 1st dimension
   end


!  ====
!  Copy
!  ====

   create_copy(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Create a copy of vector "v".
   end

   copy(v) ::: get_from(VEC{INTRINSIC}), PURE
   ! Copy vector "v".
   end


!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,init,grow_start) ::: get_from(VEC{OBJECT}, INIT?=>IMAGIFY(ZERO)), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" from the end. New
   ! slots are zeroed unless scalar "init" is set. If "grow_start" is
   ! present and TRUE, then "self" is expanded from the start, keeping
   ! the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(v1,v2) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends vectors "v1" and "v2" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

   prepend(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Prepend vector "v" to allocatable "self".
   end

   prepend(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Prepend a single "value" to allocatable "self".
   end

   prune_element(k) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Removes the element at position "k" from allocatable "self".
   ! Elements after that position are moved downward.
   end

! Old

   shrink(dim) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Shrink self to dimension dim.  Contents are retained.
   end

   expand(dim,init) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expand self to dimension dim. New slots are left undefined
   ! unless "init" is supplied.
   end

   append(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self and appends the contents of vector "v".
   end

   append(v1,v2) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self and appends the contents of vectors "v1" and "v2".
   end

   append(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

   prepend(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Prepend the vector "v" to "self". "self" is expanded.
   end

   prepend(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Prepend an single "value" to "self". "self" is expanded.
   end


!  ====================
!  Comparison functions
!  ====================

   equals(v,eps) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" is the same as "v", within range "eps" if supplied
   end

   same_as(v,eps) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if "self" is the same as "v", within range "eps" if supplied
   end

   has_all_equal(eps) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return TRUE if "self" contains all the same elements, to within precision
   ! "eps", if supplied.
   end

   is_zero(eps) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return true if the vector is zero (within "eps", if supplied)
   end


!  =============================
!  Repetition related operations
!  =============================

   remove_repetitions ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Remove repeated elements which come later in the list. 
   ! NOTE: the vector may shrink. 
   ! NOTE: this version for reals & complex
   end

   has_repetitions result (res) ::: get_from(VEC{OBJECT}), pure
   ! Return TRUE if self has at least one repeated element.
   end

   no_of_unique_elements result (res) ::: get_from(VEC{OBJECT}), pure
   ! Return the number of unique elements in the vector.
   end


!  ================
!  Sorting routines
!  ================

   reverse_order ::: get_from(VEC{INTRINSIC}), pure
   ! Reverse the order of the elements of self
   end

   swap_elements(e1,e2) ::: get_from(VEC{INTRINSIC}), pure
   ! Swap elements "e1" and "e2" in "self".
   end


!  ====================
!  Numerical operations
!  ====================

   set_to(v) ::: get_from(VEC{INTRINSIC}, V?=>CPX), pure
   ! Set the vector to "v". See also the "copy" routine.
   end

   set_to(v) ::: get_from(VEC{INTRINSIC}, V?=>REAL), pure
   ! Set the vector to "v". See also the "copy" routine.
   end

   plus(v,mask) ::: get_from(VEC{INTRINSIC}, V?=>CPX), pure
   ! Add vector "v" to "self"
   end

   plus(v,mask) ::: get_from(VEC{INTRINSIC}, V?=>REAL), pure
   ! Add vector "v" to "self"
   end

   minus(v,mask) ::: get_from(VEC{INTRINSIC}, V?=>CPX), pure
   ! Subtract vector "v" from "self"
   end

   minus(v,mask) ::: get_from(VEC{INTRINSIC}, V?=>REAL), pure
   ! Subtract vector "v" from "self"
   end

   to_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>CPX), pure
   ! Set the vector to "v" scaled by "fac"
   end

   to_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>REAL), pure
   ! Set the vector to "v" scaled by "fac"
   end

   to_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>CPX), pure
   ! Set the vector to "v" scaled by "fac"
   end

   to_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>REAL), pure
   ! Set the vector to "v" scaled by "fac"
   end

   plus_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>CPX), pure
   ! Add a vector "v" scaled by "fac" to "self"
   end

   plus_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>REAL), pure
   ! Add a vector "v" scaled by "fac" to "self"
   end

   plus_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>CPX), pure
   ! Add a vector "v" scaled by "fac" to "self"
   end

   plus_scaled(v,fac) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>REAL), pure
   ! Add a vector "v" scaled by "fac" to "self"
   end


   sum_elements result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the sum of the elements in "self"
   end

   dot(v) result (res) ::: get_from(VEC{INTRINSIC}, V?=>CPX, RES?=>CPX), pure
   ! Return the dot product with "v"
   end

   dot(v) result (res) ::: get_from(VEC{INTRINSIC}, V?=>REAL, RES?=>CPX), pure
   ! Return the dot product with "v"
   end


   cross(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the cross product of "self" and "v".
   end

   to_cross_product_of(u,v) ::: get_from(VEC{INTRINSIC}), pure
   ! Set the vector to the cross product of "u" and "v".
   end


   to_product_of(a,v,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX), PURE
   ! Set "self" to the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end

   to_product_of(a,v,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL), PURE
   ! Set "self" to the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end

   to_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX), PURE
   ! Set "self" to the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end

   to_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL), PURE
   ! Set "self" to the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end


   plus_product_of(a,v,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX), PURE
   ! Add to "self" the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end

   plus_product_of(a,v,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL), PURE
   ! Add to "self" the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the matrix needs to be transposed.
   end

   plus_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX), PURE
   ! Add to "self" the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the marix needs to be transposed.
   end

   plus_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL)
   ! Add to "self" the product of the matrix "a" and vector "v". If present,
   ! "transpose_a" can be set to TRUE if the marix needs to be transposed.
   end


   minus_product_of(a,v,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX), PURE
   ! Subtract from "self" the product of the matrix "a" and vector "v". If
   ! present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   minus_product_of(a,v,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL), PURE
   ! Subtract from "self" the product of the matrix "a" and vector "v". If
   ! present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   minus_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX), PURE
   ! Subtract from "self" the product of the matrix "a" and vector "v". If
   ! present, "transpose_a" can be set to TRUE if the marix needs to be
   ! transposed.
   end

   minus_product_of(a,v,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL), PURE
   ! Subtract from "self" the product of the matrix "a" and vector "v". If
   ! present, "transpose_a" can be set to TRUE if the marix needs to be
   ! transposed.
   end


   to_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>CPX), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   to_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>REAL), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   to_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>CPX), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   to_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>REAL), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end


   to_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX, FAC?=>CPX), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   to_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX, FAC?=>REAL), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   to_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL, FAC?=>CPX), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   to_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL, FAC?=>REAL), PURE
   ! Set "self" to the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end


   plus_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>CPX), PURE
   ! Add to "self" the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   plus_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>CPX, FAC?=>REAL), PURE
   ! Add to "self" the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   plus_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>CPX), PURE
   ! Add to "self" the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end

   plus_scaled_product_of(a,v,fac,dagger_a,transpose_a) ::: get_from(VEC{INTRINSIC}, V?=>REAL, FAC?=>REAL), PURE
   ! Add to "self" the product of the matrix "a" and vector "v" scaled by "fac".
   ! If present, "transpose_a" can be set to TRUE if the matrix needs to be
   ! transposed.
   end


   plus_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX, FAC?=>CPX), PURE
   ! Add to self "self" the product of the matrix "a" and vector "v" scaled by
   ! "fac".  If present, "transpose_a" can be set to TRUE if the matrix needs to
   ! be transposed.
   end

   plus_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>CPX, VAL?=>CPX, FAC?=>REAL), PURE
   ! Add to self "self" the product of the matrix "a" and vector "v" scaled by
   ! "fac".  If present, "transpose_a" can be set to TRUE if the matrix needs to
   ! be transposed.
   end

   plus_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL, FAC?=>CPX), PURE
   ! Add to self "self" the product of the matrix "a" and vector "v" scaled by
   ! "fac".  If present, "transpose_a" can be set to TRUE if the matrix needs to
   ! be transposed.
   end

   plus_scaled_product_of(a,v,fac,transpose_a) ::: get_from(VEC{INTRINSIC}, A?=>REAL, V?=>REAL, VAL?=>REAL, FAC?=>REAL), PURE
   ! Add to self "self" the product of the matrix "a" and vector "v" scaled by
   ! "fac".  If present, "transpose_a" can be set to TRUE if the matrix needs to
   ! be transposed.
   end


   rotate_by(a) ::: get_from(VEC{INTRINSIC}), PURE
   ! Rotate self by matrix "a", treating self as a column vector
   end

   translate_by(v) ::: get_from(VEC{INTRINSIC}), PURE
   ! Translate self by vector "v".
   end


   outer_product_with(v) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the outer product of "self" with vector "v".
   end


   norm result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the norm of the vector
   end

   normalise ::: get_from(VEC{INTRINSIC}), pure
   ! Normalise the vector
   end

   distance_to(a) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the distance to "a" if supplied
   end

   mean result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the mean of the vector
   end

!  ==================
!  Min/max operations
!  ==================

   chop_large_values(val) ::: pure
   ! Set all values in the self whose absolute value is larger than "val" to
   ! "val" times the sign of the original value.
      self :: INOUT
      val :: REAL, IN
      dim,i :: INT
      ba :: REAL
      bb,phase :: CPX
      dim = size(self)
      do i = 1,dim
         bb = self(i)
         ba = abs(bb)
         if (ba==ZERO) then
            self(i) = ZERO
         else
            phase = bb/ba
            self(i) = phase*min(val,ba)
         end
      end
   end

   zero_small_values(eps) ::: get_from(VEC{INTRINSIC}), pure
   ! Zero elements of the vector which are less than "tol" in magnitude
   end

   largest_value result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the maximum absolute value in the vector
   end

   smallest_value result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return minimum absolute value in the vector
   end

!  ==========================
!  Index returning operations
!  ==========================

   index_of_largest_value result (ind) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the index "ind" of the largest absolute value in the vector
   end

   index_of_smallest_value result (ind) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the index "ind" of the smallest value in the vector
   end

   index_of_first_nonzero_value(eps) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the index of the first nonzero component of self within
   ! a tolerance "eps".
   end

   index_of_first_zero_value(eps) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the index of the first zero component of self.
   end

!  =============
!  String widths
!  =============
   
   str_lengths result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the minimal string lengths.
   end 
   
   str_lengths(max_dp) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Return the string lengths "res" from the int part of the REAL value
   ! "self", keeping "max_dp" decimal places.
   end 

   get_max_str_length(msl,spaces) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns "msl", the maximum of the string lengths for "self",
   ! and with optional extra "spaces". 
   end

   get_max_str_length(msl,max_dp,spaces) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns "msl", the maximum of the string lengths for "self", with
   ! certain precision "max_dp", and with optional extra "spaces". 
   end

!  =====================
!  Conversion to strings
!  =====================

   to_str_vec_cpx_0 result (res) ::: get_from(VEC{INTRINSIC}:to_str), pure
   ! Change self to a string of minimal length
   end 

   to_str_vec_cpx_1(fmt,left_justify) result (res) ::: get_from(VEC{INTRINSIC}:to_str), pure
   ! Change self to a "string" using the specified fortran "fmt".
   end

   to_str_vec_cpx_2(style,width,precision,left_justify) result (res) ::: get_from(VEC{INTRINSIC}:to_str), pure
   ! Change self to a string with specified "style", "width" and
   ! "precision" as defined in the fortran standard 
   end

   to_concatenated_str(fmt,separator) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string using "fmt" if specified, and with
   ! "separator" between each item, if specified.
   end

!  =======================
!  Spin-orbital operations
!  =======================

!   alpha result (res) ::: get_from(VEC{INTRINSIC})
!   ! return the alpha sector of the vector
!   end

!   beta result (res) ::: get_from(VEC{INTRINSIC})
!   ! return the beta sector of the vector
!   end

   alpha_set_to(X) ::: get_from(VEC{INTRINSIC}), PURE
   ! Set the alpha sector of the vector
   end

   beta_set_to(X) ::: get_from(VEC{INTRINSIC}), PURE
   ! Set the beta sector of the vector
   end

   alpha_set_to(X) ::: PURE
   ! Set the alpha sector of the vector
      self :: OUT
      X :: VEC{REAL}, IN

   ENSURE(.dim.is_even,"self is not even-dimensioned")
   ENSURE(X.dim==.dim/2,"wrong size, X")

      n :: INT

      n = size(self)/2
      self(1:n) = X

   end

   beta_set_to(X) ::: PURE
   ! Set the beta sector of the vector
       self :: OUT
       X :: VEC{REAL}, IN

   ENSURE(.dim.is_even,"self is not even-dimensioned")
   ENSURE(X.dim==.dim/2,"wrong size, X")

      n :: INT

      n = size(self)/2
      self(n+1:2*n) = X

   end

end
