!==================================================================
! VEC{COPPENSORBITAL}: COPPENSORBITAL vectors
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!==================================================================

module VEC{COPPENSORBITAL}

   implicit none

   saved_self :: VEC{COPPENSORBITAL}*, private  DEFAULT_NULL

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Deallocate the vector
   end

   destroy_ptr_part ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy the pointer parts of self
   end

!  ===========
!  Set methods
!  ===========

   set_saved_self ::: get_from(VEC{OBJECT})
   ! Set saved_self for non-pointer self
   end

! =======================
! List-based I/O Routines
! =======================

   read_list_keywords ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are not needed.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read a new set of keys
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input. (This code is for non-pointer self objects).
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file. (This code is for non-pointer self
   ! objects).
   end

! ===========================
! Non-list based I/O routines
! ===========================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword)
   ! Process a normal (non list-type) "keyword".
      self :: allocatable, INOUT
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case("}") ! do nothing.
      case("put               "); .put
      case("redirect          "); .redirect
      case("revert            "); .revert
      case default;               UNKNOWN(word)
      end
   end

! ===============
! Inquiry methods
! ===============

!   n_orbitals result (res) ::: pure
!   ! Return the number of orbitals
!      self :: IN
!      res :: INT
!      res = .dim
!   end

   no_of_primitives result (res) ::: pure
   ! Work out and return the number of primitive fitting functions in the basis ! set
      self :: IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         res = res + self(i).n_fun
      end

   end

   maximum_orbital_n_value result (res) ::: pure
   ! Returns the maximum orbital n value
      self :: IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         res = max(maxval(self(i).n),res)
      end

   end

   min_exponent result (res) ::: pure
   ! Return the minimum exponent in the basis.
      self :: IN
      res :: REAL

      tmp :: REAL
      i :: INT

      res = ZERO
      do i = 1,.dim
         tmp = minval(self(i).z)
         if (tmp<res) res = tmp
      end

   end

   same_as(vec) result (same) ::: pure
   ! Return TRUE if the orbital vector "self" is the same as "vec".
      self :: IN
      vec :: VEC{COPPENSORBITAL}, IN
      same :: BIN

      i :: INT

      if (.dim /= vec.dim) then
         same = FALSE
      else
         same = TRUE
         do i = 1,.dim
            same = same AND self(i).same_as(vec(i))
            if (NOT same) exit
         end
      end

   end

! ===============================
! Shrinking, expanding, appending
! ===============================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

! ==============================
! Density and derivative density
! ==============================

   density_at_radius(R) result (res) ::: PURE
   ! Return the total coppens density values at the radial value "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      n :: INT

      res = ZERO ! Work out radial density here
      do n = 1,.dim
         res = res + self(n).density_at_radius(R)
      end

   end

   densities_at_radii(R) result (res) ::: PURE
   ! Make the total coppens density values at the radial values "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      n :: INT

      res = ZERO ! Work out radial density here
      do n = 1,.dim
         res = res + self(n).densities_at_radii(R)
      end

   end


   density_value_at_radius(R) result (res) ::: selfless, public, PURE
   ! Return the total coppens density values at the radial value "R".
      self :: IN
      R :: REAL, IN
      res :: REAL

      n :: INT

      res = ZERO ! Work out radial density here
      do n = 1,saved_self.dim
         res = res + saved_self(n).density_at_radius(R)
      end

   end

   density_at_sqrt_radius2(R2) result (res) ::: selfless, public, PURE
   ! Return the total coppens density values at the square root of
   ! radial value "R2".
      self :: IN
      R2 :: REAL, IN
      res :: REAL

      R :: REAL
      n :: INT

      R = sqrt(R2)

      res = ZERO ! Work out radial density here
      do n = 1,saved_self.dim
         res = res + saved_self(n).density_at_radius(R)
      end

   end


   radial_density_value_at_radius(R) result (res) ::: selfless, public, PURE
   ! Return the total *radial* coppens density values at the radial value "R".
     self :: IN
     R :: REAL, IN
     res :: REAL

     n :: INT

     res = ZERO ! Work out radial density here
     do n = 1,saved_self.dim
        res = res + saved_self(n).radial_density_at_radius(R)
     end

   end

! =============
! Normalisation
! =============

   unnormalize ::: PURE
   ! Set the value of the orbital coefficients to correspond to un-normalized
   ! Slater functions -- assuming they are normalized. This saves computation.
      self :: INOUT

      i :: INT

      do i = 1,.dim
         self(i).unnormalize
      end

   end

   renormalize ::: PURE
   ! Set the value of the orbitals coefficients to correspond to normalized
   ! Slater functions --- assuming they are w.r.t. unnormalized functions. 
      self :: INOUT

      i :: INT

      do i = 1,.dim
         self(i).renormalize
      end

   end

!  ====
!  Dump
!  ====

   dump(object_name) ::: get_from(VEC{OBJECT})
   ! Dump a vector object
   end

   dmpa(object_name) ::: get_from(VEC{OBJECT})
   ! Dump an allocatable vector object
   end

!  ======
!  Output
!  ======

   put ::: get_from(VEC{OBJECT})
   ! Output the list information
   end

end
