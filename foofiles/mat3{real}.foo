!---------------------------------------------------------------------------
!
! MAT3{REAL}: 3 dimensional matrices
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAT3{REAL}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given dimensions
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given bounds
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

! Old

   create(dim1,dim2,dim3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(dim) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Create the object with the desired dimensions "dim"
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds1,bounds2,bounds3) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   destroy ::: get_from(MAT3{INTRINSIC}), leaky, PURE
   ! Destroy the object
   end

!  ====
!  Copy
!  ====

   create_copy(c) ::: get_from(MAT3{INTRINSIC}), leaky
   ! Create a copy of matrix "c"
   end

!  ============================
!  Size-of and shape operations
!  ============================

   is_same_shape_as(b) result (res)  ::: get_from(MAT3{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   is_cube result (res) ::: get_from(MAT3{INTRINSIC})
   ! Returns TRUE if self is a cube
   end

   is_square_23 result (res)
   ! Checks to see that the matrix formed by the 2nd and 3rd columns is square.
      res :: BIN
      res = .dim2==.dim3
   end

   tri_size_23 result (ltr)
   ! Returns the size of the lower triangle needed to store the matrix self.
   ! Assumes the matrix formed by columns 2 and 3 is the symmetric one.
      self :: IN
      ltr :: INT

   ENSURE(.is_square_23,"2nd and 3rd dimensions not equal")

      ltr = .dim1*.dim2*(.dim2+1)/2

   end

!  ======================
!  Set and change methods
!  ======================

   set_to(b) ::: get_from(MAT3{INTRINSIC})
   ! Set "self" to "b"
   end

   set_to(b) ::: get_from(MAT3{INTRINSIC})
   ! Set "self" to vector "b" in standard order
   end

   to_tri_23(tr)
   ! Converts the matrix self to the lower triangle tr.
   ! Assumes the matrix formed by columns 2 and 3 is the symmetric one.
      self :: IN
      tr :: VEC{REAL}

   ENSURE(size(tr)>=.tri_size_23,"tr array too small")
   ENSURE(.is_square_23,"2nd and 3rd dimensions not equal")

      h,i,j,ij :: INT

      ij = 0

      do h = 1,.dim1
      do i = 1,.dim2
      do j = 1,i
         ij = ij+1
         tr(ij) = self(h,j,i)
      end
      end
      end

   end

   from_tri_23(tr)
   ! Converts the matrix self to the lower triangle tr.
   ! Assumes the matrix formed by columns 2 and 3 is the symmetric one.
      tr :: VEC{REAL}, IN
   ENSURE(size(tr)>=.tri_size_23,"tr array too small")
   ENSURE(.is_square_23,"2nd and 3rd dimensions not equal")

      h,i,j,ij :: INT

      ij = 0

      do h = 1,.dim1
      do i = 1,.dim2
      do j = 1,i
         ij = ij+1
         self(h,j,i) = tr(ij)
         self(h,i,j) = tr(ij)
      end
      end
      end

   end

!  ==============
!  Symmetrization
!  ==============

   make_symmetric ::: pure
   ! Make the upper pyramid of "self" the same as the lower pyramid
      self :: INOUT

 ! ENSURE(.dim1==.dim2,"non-cube tensor")
 ! ENSURE(.dim1==.dim3,"non-cube tensor")

      dim,i1,i2,i3 :: INT
      val :: REAL

      dim = .dim1

      do i1 = 1,dim
      do i2 = 1,i1
      do i3 = 1,i2

         val = self(i1,i2,i3)

         self(i1,i3,i2) = val
         self(i2,i1,i3) = val
         self(i2,i3,i1) = val
         self(i3,i1,i2) = val
         self(i3,i2,i1) = val

      end
      end
      end

   end

   transpose_12
   ! Makes the matrix formed by the 1st and 2nd columns symmetrical.
   ENSURE(.dim1==.dim2,"non-square matrix")

      k :: INT

      do k = 1,.dim3
         self(:,:,k) = transpose(self(:,:,k))
      end

   end

   symmetric_reflect_12
   ! Makes the matrix formed by the 1st and 2nd columns symmetrical.
   ENSURE(.dim1==.dim2,"non-square matrix")

      i,j :: INT

      do i = 1,.dim1
      do j = 1,i-1
         self(j,i,:) = self(i,j,:)
      end
      end

   end

   symmetric_reflect_23
   ! Makes the matrix formed by the 2nd and 3rd columns symmetrical.
   ENSURE(.is_square_23,"2nd and 3rd dimensions not equal")

      i,j :: INT

      do i = 1,.dim2
      do j = 1,i-1
         self(:,j,i) = self(:,i,j)
      end
      end

   end

!  =====================
!  Trace and dot product
!  =====================

   dot(a) result (res)
   ! Generalised dot product. Assumes a sum of dot products for the
   ! matrices self(:,:,i).
      self :: IN
      a :: MAT3{REAL}, IN
      res :: REAL

   ENSURE(.dim3==a.dim3,"incompatible 3rd dimension")

      i :: INT

      res = ZERO
      do i = 1,.dim3
         res = res + self(:,:,i).trace_product_with(a(:,:,i),transpose_a=TRUE)
      end

   end

   trace_over_indices(d1,d2,T)
   ! Contract self by tracing over its dimensions d1 and d2, d1<d2.
   ! return the vector T.
      T :: VEC{REAL}, OUT
      d1,d2 :: INT, IN

   ENSURE(1<=d1 AND d2<=3, "dimensions out of bound")
   ENSURE(d1<d2,"dimensions not in increasing order")

      n :: INT

      if (d1==1 AND d2==2) then

         do n = 1,.dim3
            T(n) = self(:,:,n).trace
         end

      else if (d1==1 AND d2==3) then

         do n = 1,.dim2
            T(n) = self(:,n,:).trace
         end

      else if (d1==2 AND d2==3) then

         do n = 1,.dim1
            T(n) = self(n,:,:).trace
         end

      end

   end

   contract_with(v) result (res) ::: pure
   ! Contract with a 1-vector.
      self :: IN
      v :: VEC{REAL}, IN
      res :: REAL

 ! ENSURE(.is_cube,"self in not a cube")
 ! ENSURE(.dim1==v.dim,"wrong size, v")

      dim,i1,i2,i3 :: INT

      dim = .dim1

      res = ZERO

      do i3 = 1,dim
      do i2 = 1,dim
      do i1 = 1,dim
         res = res + self(i1,i2,i3)*v(i1)*v(i2)*v(i3)
      end
      end
      end

   end

!  =======================
!  Direct product matrices
!  =======================

!   gaussian_xyz_matrices result (res) ::: leaky
!   ! Return representation matrices for the s, p, d, f, and g (l = 0 ... 4)
!   ! xyz cartesian gaussian shell components from a list of the p xyz
!   ! representation matrices.
!   ! NOTE: nothing in self in pointer assigned, so it can be destroyed safely.
!      res :: VEC{MAT3_{REAL}}*
!   ENSURE(.dim1==3,"wrong 1st dimension, self")
!   ENSURE(.dim2==3,"wrong 1st dimension, self")
!   ENSURE(.dim3>0,"no p-type representation matrices")
!      allocate(res(0:4))
!      res(0).element.create(1,1,.dim3)
!      res(1).element.create(3,3,.dim3)
!      ! Now assign the transformation matrices
!      res(0).element = ONE
!      res(1).element = self
!      res(2).element => .gaussian_d_xyz_matrices
!      res(3).element => .gaussian_f_xyz_matrices
!      res(4).element => .gaussian_g_xyz_matrices
!   end

   gaussian_d_xyz_matrices result (dtr) ::: leaky
   ! Return the representation matrices for d xyz products found in
   ! gaussian shells from the p xyz matrices.
      dtr :: MAT3{REAL}*

   ENSURE(.dim1==3,"wrong 1st dimension, self")
   ENSURE(.dim2==3,"wrong 2nd dimension, self")
   ENSURE(.dim3>0,"no p type matrices")

      n,order :: INT

      order = .dim3
      dtr.create(6,6,order)
      do n = 1,order
         dtr(:,:,n) = self(:,:,n).gaussian_d_xyz_matrix
      end

   end

   gaussian_f_xyz_matrices result (ftr) ::: leaky
   ! Return the representation matrices for f xyz products found in
   ! gaussian shells from the p xyz matrices
      ftr :: MAT3{REAL}*

   ENSURE(.dim1==3,"wrong 1st dimension, self")
   ENSURE(.dim2==3,"wrong 2nd dimension, self")
   ENSURE(.dim3>0,"no p type matrices")

      n,order :: INT

      order = .dim3
      ftr.create(10,10,order)
      do n = 1,order
         ftr(:,:,n) = self(:,:,n).gaussian_f_xyz_matrix
      end

   end

   gaussian_g_xyz_matrices result (gtr) ::: leaky
   ! Return the representation matrices for g xyz products found in
   ! gaussian shells from the p xyz matrices
      gtr :: MAT3{REAL}*

   ENSURE(.dim1==3,"wrong 1st dimension, self")
   ENSURE(.dim2==3,"wrong 2nd dimension, self")
   ENSURE(.dim3>0,"no p type matrices")

      n,order :: INT

      order = .dim3
      gtr.create(15,15,order)
      do n = 1,order
         gtr(:,:,n) = self(:,:,n).gaussian_g_xyz_matrix
      end

   end

!  ========================
!  Change of basis routines
!  ========================

   similarity_transform_12(V)
   ! Do a similarity tranform on the first two indices of self, i.e.
   ! self(:,:,i) -> V self(:,:,i) V^-1
      V :: MAT{REAL}

   ENSURE(.dim1==.dim2, "1st two dimensions of self unequal")
   ENSURE(.dim1==V.dim1,"incompatible transform matrix, V")
   ENSURE(V.is_square,  "transform matrix not square")
   ENSURE(.dim3>0,"no p type matrices")

      n :: INT

      do n = 1,.dim3
         self(:,:,n).similarity_transform(V)
      end

   end

   change_basis_using(V) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V"; self = self ... V
   end

   change_basis_to(new,V) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V
   end

   back_transform_using(V) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V"; self = self ... V^T
   end

   back_transform_to(new,V) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V^T
   end

   set_vector_hyperpolarisability(beta)
   ! Set the vector hyprpolarisability
      beta :: VEC{REAL}, OUT

   ENSURE(.is_cube,"self in not a cube")
   ENSURE(.dim1==3,"self in not 3 dimensional")

      i,j :: INT
      val :: REAL

      val = ZERO

      do i = 1,.dim1

         val = THREE*self(i,i,i)

         do j = 1,3
            if (i==j) cycle
            val = val + self(i,j,j) + self(j,i,j) + self(j,j,i)
         end

         beta(i) = THIRD*val

      end

   end

!  ======================================
!  Compression and uncompression routines
!  ======================================

   compress_to_pyramid(py) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Converts the lower pyramid of self to the pyramid "py".
   end

   uncompress_from_pyramid(py) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Converts the pyramid "py" into the symmetric cube "self".
   end

   pyramid_size result (res) ::: get_from(MAT3{INTRINSIC}), PURE
   ! Returns the size of the lower pyramid needed to store a
   ! totally symmetric self.
   end

!  =============
!  String widths
!  =============

   str_lengths(dp,spaces) result (res) ::: get_from(MAT3{INTRINSIC}), pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      dp :: INT, IN
      spaces :: INT, IN, optional
      res :: MAT3{INT}(.dim1,.dim2,.dim3)
   end

   get_max_str_length(msl,max_dp,spaces) ::: get_from(MAT3{INTRINSIC}), pure
   ! Returns the maximum of the string lengths.
   end

   expand_octupole(compressed) result(res) ::: pure, selfless
      compressed :: VEC{REAL}(10), IN
      res :: MAT3{REAL}(3,3,3)
      i :: INT
      ! xxx,yyy,zzz
      do i =1,3
         res(i,i,i) = compressed(i)
      end do
      ! xxy
      res(1,1,2) = compressed(4)
      res(2,1,1) = compressed(4)
      res(1,2,1) = compressed(4)
      ! xxz
      res(1,1,3) = compressed(5)
      res(3,1,1) = compressed(5)
      res(1,3,1) = compressed(5)
      ! yyx
      res(2,2,1) = compressed(6)
      res(2,1,2) = compressed(6)
      res(1,2,2) = compressed(6)
      ! yyz
      res(2,2,3) = compressed(7)
      res(2,3,2) = compressed(7)
      res(3,2,2) = compressed(7)
      ! zzx 
      res(3,3,1) = compressed(8)
      res(3,1,3) = compressed(8)
      res(1,3,3) = compressed(8)
      ! zzy
      res(3,3,2) = compressed(9)
      res(3,2,3) = compressed(9)
      res(2,3,3) = compressed(9)
      ! xyz
      res(1,2,3) = compressed(10)
      res(3,2,1) = compressed(10)
      res(2,3,1) = compressed(10)
      res(2,1,3) = compressed(10)
      res(3,1,2) = compressed(10)
      res(1,3,2) = compressed(10)

   end

   compress_octupole(octupole) result(res) ::: pure, selfless
      octupole :: MAT3{REAL}(3,3,3), IN
      res :: VEC{REAL}(10)
      i :: INT
      ! xxx,yyy,zzz
      do i =1,3
         res(i) = octupole(i,i,i)
      end do
      ! xxy
      res(4) = octupole(1,1,2)
      ! xxz
      res(5) = octupole(1,1,3)
      ! yyx
      res(6) = octupole(2,2,1)
      ! yyz
      res(7) = octupole(2,2,3)
      ! zzx 
      res(8) = octupole(3,3,1)
      ! zzy
      res(9) = octupole(3,3,2)
      ! xyz
      res(10) = octupole(1,2,3)
   end


end
