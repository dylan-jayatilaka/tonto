!---------------------------------------------------------------------------
!
!  INT: methods which apply to integers
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module INT

   implicit none

   interface to_str
      to_str_int_0
      to_str_int_1
      to_str_int_2
   end

contains

! ====================
! Numerical operations
! ====================

   to_sum_of(v) ::: get_from(INTRINSIC), pure
   ! Set "self" to the sum of elements in vector "v"
   end

   to_sum_of(mx) ::: get_from(INTRINSIC), pure
   ! Set "self" to the sum of elements in matrix "mx"
   end

! ================
! Equality testing
! ================

   equals(i) result (same) ::: pure
   ! Test to see if "self" is the same as "i"
      self :: IN
      i :: INT, IN
      same :: BIN
      same = .same_as(i)
   end

   same_as(i) result (same) ::: pure
   ! Test to see if "self" is the same as "i"
      self :: IN
      i :: INT, IN
      same :: BIN
      same = self==i
   end

   is_zero result (res) ::: pure
   ! Test to see if "self" is zero
      self :: IN
      res  :: BIN
      res = self==0
   end

   is_one result (res) ::: pure
   ! Test to see if "self" is one
      self :: IN
      res  :: BIN
      res = self==1
   end

   is_minus_one result (res) ::: pure
   ! Test to see if "self" is minus one
      self :: IN
      res  :: BIN
      res = self==-1
   end

   is_even result (res) ::: pure
   ! Return TRUE if self is an even number
      self :: IN
      res :: BIN

      res = mod(self,2)==0

   end

   is_odd result (res) ::: pure
   ! Return TRUE if self is an odd number
      self :: IN
      res :: BIN

      res = mod(self,2)==1

   end

   is_in_range(range) result (res) ::: pure
   ! Return TRUE if self is within the specified "range".
      self :: IN
      range :: VEC{INT}(2), IN
      res :: BIN

      res = range(1) <= self AND self <= range(2)

   end

! =========
! Functions
! =========

   delta(j) result (res) ::: pure
   ! Kronecker delta function. Returns 1 if self==j, otherwise 0.
      self :: IN
      j :: INT, IN
      res :: INT

      if (self==j) then; res = 1
      else;              res = 0
      end

   end

   raised_to(n) result (res) ::: pure
   ! Raise "self" to the power "n"
      self :: IN
      n :: INT, IN
      res :: REAL

      i :: INT

      res = ONE
      do i = 1,abs(n)
         res = res*self
      end

      if (n<0) res = ONE/res

   end

   factorial result (res) ::: elemental
   ! Return the factorial of the integer
   ! res cannot be int, as int(4) dies as 13!.
      self :: IN
      res :: REAL

      i :: INT

      select case (self)

         case (0); res=1.0d0
         case (1); res=1.0d0
         case (2); res=2.0d0
         case (3); res=6.0d0
         case (4); res=24.0d0
         case (5); res=120.0d0
         case (6); res=720.0d0
         case (7); res=5040.0d0
         case (8); res=40320.0d0
         case (9); res=362880.0d0

         case default
            res = 3628800.0d0
            do i=11,self
              res = res * i
            end

      end

   end

   double_factorial result (res) ::: elemental
   ! Return the double factorial of the integer
   ! res cannot be integer, as int(4) dies at 11!!.
      self :: IN
      res :: REAL

      i :: INT

      select case (self)
         case (0); res = 1.0d0
         case (1); res = 1.0d0
         case (2); res = 3.0d0
         case (3); res = 15.0d0
         case (4); res = 105.0d0
         case (5); res = 945.0d0
         case (6); res = 10395.0d0
         case (7); res = 135135.0d0
         case (8); res = 2027025.0d0
         case (9); res = 34459425.0d0
         case default
           res = 654729075.0d0
           do i=11,self
             res = res * (2*i - 1)
           end
      end

   end

   gamma_plus_half result (res) ::: elemental
   ! Return the Gamma(self+1/2)
      self :: IN
      res :: REAL
       i :: INT
      select case (self)
         case (0); res=1.0d0
         case (1); res=1.0d0/2.0d0
         case (2); res=3.0d0/4.0d0
         case (3); res=15.0d0/8.0d0
         case (4); res=105.0d0/16.0d0
         case (5); res=945.0d0/32.0d0
         case (6); res=10395.0d0/64.0d0
         case (7); res=135135.0d0/128.0d0
         case (8); res=2027025.0d0/256.0d0
         case (9); res=34459425.0d0/512.0d0
         case default
           res=654729075.0d0/1024.0d0
           do i=11,self
             res = res * (2 * i - 1)/TWO
           end
      end
      res = res*sqrt(PI)
   end

   permutation(n) result (res) ::: pure
   ! Return self!/n!
      self :: IN
      n :: INT, IN
      res :: REAL
 ! ENSURE(self>=0,"must have non-negative argument")
 ! ENSURE(n   >=0,"must have non-negative n")
      i :: INT
      res = ONE
      if (self>=n) then
         do i = n+1,self
            res = res * i
         end
      else
         do i = self+1,n
            res = res * i
         end
         res = ONE/res
      end
   end

   permutation(n,m) result (res) ::: pure
   ! Return self!/(n!m!)
      self :: IN
      n,m :: INT, IN
      res :: REAL
 ! ENSURE(self>=0,"must have non-negative argument")
 ! ENSURE( n  >=0,"must have non-negative n")
 ! ENSURE( m  >=0,"must have non-negative m")
      i :: INT
      res = self.permutation(n)
      do i = 2,m
         res = res / i
      end
   end

   choose(n) result (res) ::: pure
   ! Return self!/n!(self-n)! , self>=n
      self :: IN
      n :: INT, IN
      res :: REAL
 ! ENSURE(self>=0,"must have non-negative argument")
 ! ENSURE(self>=n,"must have self>=n")
      
      res = self.permutation(n,self-n)

   end

   sqrt_permutation(n) result (res) ::: PURE
   ! Return sqrt(self!)/n! , self>n

      self :: IN
      n :: INT, IN
      res :: REAL

   ENSURE(self>=0,"must have non-negative argument")
   ENSURE(self>=n,"must have self>=n")

      top,bot :: REAL
      i :: INT

      bot = ONE
      top = ONE

      do i = 1,n
         bot = bot * i
      end

      do i = n+1,self
         top = top * i
      end

      res = sqrt(top / bot)

   end

   sqrt_permutation(n,m) result (res) ::: PURE
   ! Return sqrt(self!)/(n!m!) , self>n, self>m
      self :: IN
      n,m :: INT, IN
      res :: REAL

   ENSURE(self>=0,"must have non-negative argument")
   ENSURE(self>=n,"must have self>=n")
   ENSURE(self>=m,"must have self>=m")

      i :: INT

      res = self.sqrt_permutation(n)
      do i = 2,m
         res = res / i
      end

   end

   triangle result (res) ::: pure
   ! The triangle number corresponding to self
      self :: IN
      res :: INT
      res = self*(self+1)/2
   end

   triangle_number result (res) ::: pure
   ! The triangle number corresponding to seld
      self :: IN
      res :: INT
      res = self*(self+1)/2
   end

   inverse_triangle_number result (res) ::: PURE
   ! Return the inverse triangle number of self.
      self :: IN
      res :: INT

   ENSURE(self>=0,"self must be non-positive")

      res = (1+int(sqrt(EIGHT*self-SEVEN)))/2

   end

   radial_laguerre_function(l,zeta) result (res) ::: leaky, PURE
   ! Returns an array with the coefficients of the radial Laguerre function as
   ! defined in "Molecular Electronic Structure Theory" by Helgaker et al,
   ! equation (6.5.17) *except* that the factor r^l exp(-zeta*R) is set to one.
   ! Self=n is the principal quantum number.
      self :: IN
      l :: INT, IN
      zeta :: REAL, IN
      res :: VEC{REAL}*

   ENSURE(self>=0,"non positive self")

      n,n1,l1 :: INT
      fac :: REAL

      n  = self
      n1 = n - l - 1
      l1 = 2*l + 2

      allocate(res(n1+1))

      res = n1.assoc_laguerre_coeffs(l1)
      fac = (TWO*zeta)**((THREE/TWO) + l) * sqrt(n1.choose(n+l+1))
      res = fac * res

   end

   sequence_up_to(last,step) result (res) ::: pure
   ! Return a sequence from "self" up to "last" with "step" spacing
   ! if present, or spacing 1 if not.
      self :: IN
      last :: INT, IN
      step :: INT, optional, IN
      res :: VEC{INT}*

      i,n,s,val :: INT

      ! Step
      s = 1
      if (present(step)) s = step

      ! Sequence length
      n = (last - self)/s
      if (n<0) then; n = 0
      else;          n = n + 1
      end

      ! The sequence
      allocate(res(n))

      i   = 0
      val = self

      ! Make it
      do 

         if (val>last) exit

         i      = i + 1
         res(i) = val
         val    = val + s

      end

   end

! =======
! Inquiry
! =======

   check_if_one_of(allowed) result (ok) ::: pure
   ! Returns TRUE if "self" matches one of the integers in "allowed".
      self :: IN
      allowed :: VEC{INT}, IN
      ok :: BIN

      ok = any(self==allowed)

   end

   is_a_prime result (res) ::: PURE
   ! returns TRUE is self is a primes
      self :: IN
      res :: BIN

   ENSURE(self>0,"primes should not be negative")

      i,j :: INT

      res = TRUE

      if (self==2) return

      do i = 2,int(sqrt(real(self)))+1
         j = modulo(self,i)
         if (j/=0) cycle
         res = FALSE; exit
      end

   end
   
   largest_int result (res) ::: PURE
   ! Returns largest possible integer
      self :: IN
      res :: INT 

   ENSURE(self>0,"should not be negative")

      i,j,k :: INT
     
      j = 0
      i = self
      do
         i = i*2
         if (i<j) exit
         j = i
      end
     
      k = j

      do
         k = (k/2)
         i = j + k
         if (i<j) i = j
         j = i
         if (k==1) then
            res = i
            return
         end
      end 

   end 

! =======================
! Polynomial coefficients
! =======================

   hermite_polynomial_coeffs(normalise) result (res) ::: PURE
   ! Returns an array with the coefficients of the Hermite Polynomials.  First
   ! elements is for x^0, second for x^1, and so on.  The length of the result
   ! is (self+1).  Method used is equation 13.9 from Arfken and Weber 4th ed.
   ! If present and TRUE, "normalise" gives coefficients normalised for use
   ! in generating harmonic vibrational wavefunctions.
      self :: IN
      normalise :: BIN, IN, optional
      res :: VEC{REAL}(self+1)

   ENSURE(self>=0,"order must be 0 or greater")

      norm :: BIN
      n,s,i,t :: INT
      sn :: REAL

      norm = FALSE
      if (present(normalise)) norm = normalise

      n = self

      t = 2
      res = ZERO

      if (norm) then

         sn = -ONE/sqrt(sqrt(PI))
         do s = 0,(n/2)
            sn = -sn
            i  = n - 2*s
            res(i+1) = sn * sqrt(t.raised_to(2*i-n)) * n.sqrt_permutation(s,i)
         end

      else

         sn = -ONE
         do s = 0,(n/2)
            sn = -sn
            i  = n - 2*s
            res(i+1) = sn * t.raised_to(i) * n.permutation(s,i)
         end

      end

 !   select case (self)
 !     case (0); res = [   1.0d0
 !     case (1); res = [   0.0d0,   2.0d0
 !     case (2); res = [  -2.0d0,   0.0d0,   4.0d0
 !     case (3); res = [   0.0d0, -12.0d0,   0.0d0,   8.0d0
 !     case (4); res = [  12.0d0,   0.0d0, -48.0d0,   0.0d0,  16.0d0
 !     case (5); res = [   0.0d0, 120.0d0,   0.0d0,-160.0d0,   0.0d0, 32.0d0
 !     case (6); res = [-120.0d0,   0.0d0, 720.0d0,   0.0d0,-480.0d0,  0.0d0,  64.0d0
 !     case default;
 !        res(2:n+1) = TWO* (n-1).hermite_polynomial
 !        res(1:n-1) = res(1:n-1) - TWO*(n-1)* (n-2).hermite_polynomial
 !   end

   end

   hermite_polynomial_prob_coeffs result (res) ::: PURE
   ! Returns an array with the coefficients of the probabilist's
   ! Hermite Polynomials.  First elements is for x^0, second for x^1,
   ! and so on.  The length of the result is (self+1).
      self :: IN
      res :: VEC{REAL}(self+1)

   ENSURE(self>=0,"order must be 0 or greater")

      n,s,i,t :: INT
      sn :: REAL


      select case (self)

         case (0); res = [  1.0d0]
         case (1); res = [  0.0d0,  1.0d0]
         case (2); res = [ -1.0d0,  0.0d0,  1.0d0]
         case (3); res = [  0.0d0, -3.0d0,  0.0d0,  1.0d0]
         case (4); res = [  3.0d0,  0.0d0, -6.0d0,  0.0d0,  1.0d0]
         case (5); res = [  0.0d0, 15.0d0,  0.0d0,-10.0d0,  0.0d0, 1.0d0]
         case (6); res = [-15.0d0,  0.0d0, 45.0d0,  0.0d0,-15.0d0, 0.0d0,  1.0d0]
         
         case default
         
            n = self
            t = 2
            sn = -ONE
            res = ZERO
            do s = 0,(n/2)
               sn = -sn
               i = n - 2*s
               res(i+1) = sn / t.raised_to(s) * n.permutation(s,i)
            end

      end

   end

   legendre_polynomial_coeffs result (res) ::: pure
   ! Returns an array with the coefficients of the Legendre Polynomials.  First
   ! elements is for x^0, second for x^1, and so on.  The length of the result
   ! is (self+1).  Method used is equation 12.64 from Arfken and Weber 4th ed.
      self :: IN
      res :: VEC{REAL}(self+1)

      k,sk,sk2,s2k :: INT
      sn,s2 :: REAL

      select case (self)
         case (0);     s2 = ONE
         case (1);     s2 = TWO
         case (2);     s2 = FOUR
         case (3);     s2 = EIGHT
         case default; s2 = TWO**self
      end

      res = ZERO

      do k = 0,self/2

         if (mod(k,2) == 0) then; sn =  ONE
         else;                    sn = -ONE
         end

         sk  = self - k
         sk2 = 2 * sk
         s2k = self - 2*k

         res(s2k+1) = sn*sk2.factorial/(s2*k.factorial*sk.factorial*s2k.factorial)

      end

   end

   assoc_legendre_coeffs(m) result (res) ::: pure
   ! Returns d^m/dx^m(Pn(x)) for the associated Legendre polynomial, but does
   ! not multiply by (1-x^2)^(m/2).
      self :: IN
      m :: INT, IN
      res :: VEC{REAL}(self+1)

      i,j :: INT

      res = self.legendre_polynomial_coeffs

      do i = 1,abs(m)
         do j = 1,self+1
            res(j) = res(j) * (j-1)
         end
         res = eoshift(res,1,ZERO)
      end

      if (m<0) then
         res = (self+m).factorial / (self-m).factorial * res
         if (mod(m,2)==1) res = - res
      end

   end

   assoc_laguerre_coeffs(k) result (res) ::: recursive, PURE
   ! Returns an array with the coefficients of the associated Laguerre
   ! polynomials, L_n^k (x) = (1/n!) exp(x) x^{-k) d^n/dx^n [exp(-x)
   ! x^{n+k}].  First elements is for x^0, second for x^1, and so on.
   ! The length of the result is (self+1).  The method is from the recursion
   ! expansion (13.44) in Arfken & Weber, Mathematical Methods for Physicists,
   ! 4th Edition.
      self :: IN
      k :: INT, IN
      res :: VEC{REAL}(self+1)

   ENSURE(self>=0,"non positive self")

      res1,res2 :: VEC{REAL}(self)
      n,n1,n2 :: INT

      n  = self
      n1 = n - 1
      n2 = n - 2

      select case (self)

         case (0); res = [ 1 ]
         case (1); res = [-1, k+1]

         case default;

            res2 = n2.assoc_laguerre_coeffs(k)
            res1 = n1.assoc_laguerre_coeffs(k)

            res(1:n  ) =          - (n+k-1)   * res2
            res(1:n  ) = res(1:n) + (2*n+k-1) * res1
            res(2:n+1) = res(2:n+1) - res1

            res = res/n

      end

   end

! ==============
! Bit operations
! ==============

   bit_count result (res) ::: pure
   ! Returns the number of bits set in "self".
      self :: IN
      res :: INT

      tmp :: INT

      tmp = self

      res = 0
      do
         if (tmp==0) exit
         if (BIT_SET_AT_POS_IN(tmp,0)) res = res + 1
         tmp = MOVE_BITS_RIGHT_IN(tmp,1)
      end

   end


   set_bit_at(pos) result (res) ::: elemental
   ! Set bit in "self" at position "pos" and return in "res"
      self :: IN
      pos :: INT, IN
      res :: INT
      res = SET_BIT_AT_POS_IN(self,pos)
   end

   set_bits_at(pos) result (res) ::: pure
   ! Set bits in "self" at *positions* "pos" and return in "res"
      self :: IN
      pos :: VEC{INT}, IN
      res :: INT

      i :: INT

      res = self ! NOTE

      do i = 1,pos.dim
         res = SET_BIT_AT_POS_IN(res,pos(i))
      end

   end

   set_bits_from(v) result (res) ::: pure
   ! Sets bits in "self" (without zeroing) corresponding to non-zero
   ! elements (first->last) in INT vector "v" and return result "res".
   ! e.g. 1101 = set_bits_from([1,1,0,1])
      self :: IN
      v :: VEC{INT}, IN
      res :: INT

 ! ENSURE(v.dim<bit_size(self),"v too long")
 ! ENSURE(minval(v)>=0,"some v values too small")
 ! ENSURE(maxval(v)<=1,"some v values too large")

      i :: INT

      res = self ! NOTE

      do i = v.dim,1,-1
         if (v(i)==0) cycle
         res = SET_BIT_AT_POS_IN(res,i)
      end

   end

   set_bits_from(v) result (res) ::: pure
   ! Sets bits in "self" (without zeroing) corresponding to TRUE
   ! elements (first->last) in BIN vector "v" and return in "res".
   ! e.g. 1101 = set_bits_at([T,T,F,T])
      self :: IN
      v :: VEC{BIN}, IN
      res :: INT

 ! ENSURE(v.dim<bit_size(self),"v too long")

      i :: INT

      res = self ! NOTE

      do i = v.dim,1,-1
         if (NOT v(i)) cycle
         res = SET_BIT_AT_POS_IN(res,i)
      end

   end


   clear_bit_at(pos) result (res) ::: elemental
   ! Clear bit in "self" at position "pos" and return in "res"
      self :: IN
      pos :: INT, IN
      res :: INT
      res = CLR_BIT_AT_POS_IN(self,pos)
   end

   clear_bits_at(pos) result (res) ::: pure
   ! clear bits in "self" at *positions* "pos" and return in "res"
      self :: IN
      pos :: VEC{INT}, IN
      res :: INT

      i :: INT

      res = self ! NOTE

      do i = 1,pos.dim
         res = CLR_BIT_AT_POS_IN(res,pos(i))
      end

   end

   clear_bits_from(v) result (res) ::: pure
   ! clear bits in "self" (without zeroing) corresponding to non-zero
   ! elements (first->last) in INT vector "v" and return result "res".
   ! e.g. 1101 = set_bits_from([1,1,0,1])
      self :: IN
      v :: VEC{INT}, IN
      res :: INT

 ! ENSURE(v.dim<bit_size(self),"v too long")
 ! ENSURE(minval(v)>=0,"some v values too small")
 ! ENSURE(maxval(v)<=1,"some v values too large")

      i :: INT

      res = self ! NOTE

      do i = v.dim,1,-1
         if (v(i)==0) cycle
         res = CLR_BIT_AT_POS_IN(res,i)
      end

   end

   clear_bits_from(v) result (res) ::: pure
   ! Clear bits in "self" (without zeroing) corresponding to TRUE
   ! elements (first->last) in BIN vector "v" and return in "res".
   ! e.g. 1101 = set_bits_at([T,T,F,T])
      self :: IN
      v :: VEC{BIN}, IN
      res :: INT

 ! ENSURE(v.dim<bit_size(self),"v too long")

      i :: INT

      res = self ! NOTE

      do i = v.dim,1,-1
         if (NOT v(i)) cycle
         res = CLR_BIT_AT_POS_IN(res,i)
      end

   end


   move_bits_left(n) result (res) ::: elemental
   ! Move bits left "n" places in "self" and return in "res"
      self :: IN
      n :: INT, IN
      res :: INT
      res = MOVE_BITS_LEFT_IN(self,n)
   end

   move_bits_right(n) result (res) ::: elemental
   ! Move bits left "n" places in "self" and return in "res"
      self :: IN
      n :: INT, IN
      res :: INT
      res = MOVE_BITS_RIGHT_IN(self,n)
   end


   has_bit_set_at(pos) result (res) ::: elemental
   ! Returns true if bit at "pos" is set.
      self :: IN
      pos :: INT, IN
      res :: BIN
      res = BIT_SET_AT_POS_IN(self,pos)
   end

   has_all_bits_set_at(pos) result (res) ::: pure
   ! Returns true if *all* bits in "pos" are set.
      self :: IN
      pos :: VEC{INT}, IN
      res :: BIN

      i :: INT

      res = TRUE

      do i = 1,pos.dim
         res = BIT_SET_AT_POS_IN(self,pos(i))
         if (NOT res) exit
      end

   end

   has_any_bits_set_at(pos) result (res) ::: pure
   ! Returns true if *any* bit at "pos" is set.
      self :: IN
      pos :: VEC{INT}, IN
      res :: BIN

      i :: INT

      res = FALSE

      do i = 1,pos.dim
         res = BIT_SET_AT_POS_IN(self,pos(i))
         if (res) exit
      end

   end

   has_bits_set_like(v) result (res) ::: pure
   ! Return TRUE if bits in "self" correspond to bits in vector "v" 
      self :: IN
      v :: VEC{INT}, IN
      res :: BIN

 ! ENSURE(v.dim<bit_size(self),"v too long")
 ! ENSURE(minval(v)>=0,"some v values too small")
 ! ENSURE(maxval(v)<=1,"some v values too large")

      i :: INT
      set :: BIN

      res = FALSE
      do i = v.dim,1,-1
         set = BIT_SET_AT_POS_IN(self,i)
         res = (v(i)==1 AND set) OR (v(i)==0 AND NOT set)
         if (NOT res) exit
      end

   end

   has_bits_set_like(v) result (res) ::: pure
   ! Return TRUE if bits in "self" correspond to bits in vector "v"
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN

 ! ENSURE(v.dim<bit_size(self),"v too long")

      i :: INT
      set :: BIN

      res = FALSE
      do i = v.dim,1,-1
         set = BIT_SET_AT_POS_IN(self,i)
         res = (v(i) AND set) OR (NOT v(i) AND NOT set)
         if (NOT res) exit
      end

   end


   bits_from(pos,len) result (res) ::: elemental
   ! Return the bits in "self" from "pos", length "len"
      self :: IN
      pos,len :: INT, IN
      res :: INT
      res = BITS_FROM_POS_IN(self,pos,len)
   end

! =============
! String widths
! =============
   
   no_of_fields_per_value result (res) ::: pure
   ! Returns the number of fields used to print a "self".
      self :: IN
      res :: INT
      if (FALSE) res = transfer(self,res)
      res = 1
   end 

   str_length result (res) ::: get_from(INTRINSIC, FMT=>"(i32)"), pure
   ! Returns the minimal string length.
   ! Note: for non-real and non-complex only
   end
   
   bit_string_length result (res) ::: get_from(INTRINSIC:str_length, FMT=>"(b32)"), pure
   ! Returns the minimal string length.
   ! Note: for non-real and non-complex only
   end 
   
   get_str_length(sl,spaces) ::: get_from(INTRINSIC, FMT=>"(i32)"), pure
   ! Returns the minimal string length.
   ! Note: for non-real and non-complex only
   end 
   
   get_bit_str_length(sl,spaces) ::: get_from(INTRINSIC:get_str_length, FMT=>"(b32)"), pure
   ! Returns the minimal string length.
   ! Note: for non-real and non-complex only
   end 

! =================
! String conversion
! =================

   to_str_int_0 result (string) ::: get_from(INTRINSIC:to_str, FMT=>*), pure
   ! Change self to a string of minimal length
   end

   to_str_int_1(fmt,left_justify) result (string) ::: get_from(INTRINSIC:to_str), pure
   ! Change self to a "string" using the specified fortran "fmt".
   end

   to_str_int_2(width,left_justify) result (string) ::: get_from(INTRINSIC:to_str, STYLE=>I), pure
   ! Change self to a string with specified "width".
   end

   to_bit_string result (string) ::: get_from(INTRINSIC:to_str, str_length=>bit_string_length, FMT=>"(b32)"), pure
   ! Change self to a string of minimal length
   end

   to_bit_string(fmt,left_justify) result (string) ::: get_from(INTRINSIC:to_str), pure
   ! Change self to a "string" using the specified fortran "fmt".
   end

   to_bit_string(width,left_justify) result (string) ::: get_from(INTRINSIC:to_str, STYLE=>I), pure
   ! Change self to a string with specified "width".
   end

! ========================
! Unit conversion routines
! ========================

   convert_to(units) ::: PURE
   ! Convert the number "self" in atomic units or generic units to a
   ! new number in "units".
      self :: INOUT
      units :: STR, IN

   ENSURE(units.is_known_unit,"unknown units, " // units)

      self = nint(self * units.conversion_factor)

   end

   to_units(units) result (res) ::: PURE
   ! Convert the number "self" in atomic units or generic units to a
   ! new number in "units".
      self :: IN
      units :: STR, IN
      res :: REAL

   ENSURE(units.is_known_unit,"unknown units, " // units)

      res = nint(self * units.conversion_factor)

   end

   convert_from(units) ::: PURE
   ! Convert the number "self" from "units" system to a new number
   ! in atomic units or generic units.  Returns "err" whether it was successful.
      self :: INOUT
      units :: STR, IN

   ENSURE(units.is_known_unit,"unknown units, " // units)

      self = nint(self/units.conversion_factor)

   end

   from_units(units) result (res) ::: PURE
   ! Convert "self" from "units" system to a new number in atomic
   ! units or generic units.  Returns "err" whether it was successful.
      self :: IN
      units :: STR, IN
      res :: REAL

   ENSURE(units.is_known_unit,"unknown units, " // units)

      res = nint(self/units.conversion_factor)

   end

end
