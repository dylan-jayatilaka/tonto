!-------------------------------------------------------------------------------
!
! SLATERBASIS: For Slater basis sets
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module SLATERBASIS

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object
   end

   nullify_ptr_part ::: pure
   ! Nullify the shell parts of self
      self :: INOUT
      
      nullify(.shell)

   end

   destroy_ptr_part  ::: leaky, PURE
   ! Destroy the shell parts of self
      self :: INOUT

      .shell.destroy
      .interpolator.destroy
      .d1_interpolator.destroy
      .d2_interpolator.destroy

   end

!  ====
!  Copy
!  ====

   create_copy(b) ::: leaky
   ! Create a copy of the basis "b".
      self :: PTR
      b :: SLATERBASIS, IN

      .create
      .copy(b)

   end

   copy(b) ::: leaky
   ! Copy a basis "b" to "self". Make sure pointer parts are first
   ! destroyed or nullified, as you want.
      b :: SLATERBASIS, IN
      self = b
      .nullify_ptr_part
      if (b.shell.associated) .shell.create_copy(b.shell)
      if (b.interpolator.allocated) .interpolator = b.interpolator
      if (b.d1_interpolator.allocated) .d1_interpolator = b.d1_interpolator
      if (b.d2_interpolator.allocated) .d2_interpolator = b.d2_interpolator
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: pure
   ! Create and set up a default basis set
      self :: INOUT

      .label   = " "
      .n_shell = 0
      .n_bf    = 0
      .n_prim  = 0
      .use_interpolator = TRUE

   end

   update ::: get_from(BASIS), pure
   ! Update the shell data, if it exists
   end

   set_label(label) ::: pure
   ! Set the basis label
      self :: INOUT
      label :: STR, IN

      .label = label

   end

   resolve_by_label(label,basis,clobber,minmatch,found) ::: get_from(BASIS, BASIS=>SLATERBASIS)
   ! Resolve "self" by *pointer* assigning it to the element in
   ! "basis" which has a label which matches "label". 
   ! . If "clobber" is present and FALSE, and if "self" is already
   !   assigned to a basis with non-blank label, then nothing is done.
   !   Otherwise (by default) "self" is pointer assigned regardless.
   ! . If "minmatch" is present, then a match is made to the number of
   !   characters in "label" even if there are more characters in
   !   "basis.label". This is useful for matching e.g. label "Mg:" 
   !   to basis.label "Mg:gaussian"
   ! . If "found" is present, it is set TRUE if "self" is resolved (or
   !   was already resolved if clobber was set FALSE). Otherwise it is
   !   set FALSE. If "found" is not present, and a match has not been
   !   found, the routine dies.
   end

!  ============
!  I/O Routines
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
         case ("-- Regular options --   ")
         case ("}                       "); ! exit surrounding loop
         case ("analyze_configuration   "); .analyze_configuration
         case ("configuration=          "); .read_configuration
         case ("label=                  "); .read_label
         case ("put                     "); .put
         case ("shells=                 "); .read_shell
         case ("tonto-style=            "); .read_tonto_style
         case ("units=                  "); .read_units
         ! These are only for making custom tables for the list type
         case ("-- Options for tables --")
         case ("flush                   "); stdout.flush
         case ("put_label               "); stdout.put(.label,int_width=TRUE)
         case ("put_n_shells            "); stdout.put(.n_shell)
         case ("put_n_bf                "); stdout.put(.n_bf)
         case ("put_n_prim              "); stdout.put(.n_prim)
         case  default ;      UNKNOWN(word)
      end

   end

   read_units ::: get_from(OBJECT), private
   ! Read a string which describes the units to be used
   end

   read_label ::: get_from(BASIS)
   ! Read only the basis label
   end

   read_shell ::: get_from(BASIS), leaky
   ! Read a shell
   end

   read_configuration
   ! Read in the configuration string
      stdin.read(.configuration)
   end

   read_interpolator ::: leaky
   ! Read the interpolator
   ENSURE(.shell.associated,"no shells defined!")
      .interpolator.destroy
      .interpolator.create
      .interpolator.read_keywords
   end

   read_tonto_style ::: leaky
   ! Create and read a tonto style basis set
      the_keys :: VEC{STR}*
      .read_label
      .read_configuration
      the_keys => ("l_chr= kind= n,z,c*=").split
      .shell.set_keys(the_keys)
      the_keys.destroy
      .shell.read_data
      .update
   end

   analyze_configuration 
   ! Analyze the orbital configuration and set the shell occupancies

   ENSURE(.configuration/=" ","no configuration")
   ENSURE(.shell.associated,"no shells")
   ENSURE(.shell_kinds_created,"not all orbital kinds are there")

      configuration,conf_kind :: STR
      split,conf :: VEC{STR}*
      match :: VEC{BIN}*
      found,keep :: BIN
      i,j,s,occ,ind :: INT

      ! Get configuration
      configuration = .configuration

      ! Replacements
      configuration.replace_all("("," ")
      configuration.replace_all(")"," ")
      configuration.replace_all("[Xe]","X 54 ")
      configuration.replace_all("[XE]","X 54 ")
      configuration.replace_all("[Rn]","R 86 ")
      configuration.replace_all("[RN]","R 86 ")

      ! Split configuration into separate fields
      split => configuration.split

      i = 1
      do ! loop over shell/orbital configurations

         if (i>split.dim) exit

         ! Now get orbital configurations only
         keep = FALSE
         select case (split(i))
            case ("K");   conf => ("1S 2").split
            case ("L");   conf => ("2S 2 2P 6").split
            case ("M");   conf => ("3S 2 3P 6 3D 10").split
            case ("X");   conf => ("1S 2 2S 2 2P 6 3S 2 3P 6 3D 10 4S 2 4P 6 5S 2 4D 10 5P 6").split
            case ("R");   conf => ("1S 2 2S 2 2P 6 3S 2 3P 6 3D 10 4S 2 4P 6 5S 2 4D 10 5P 6 4F 14 6S 2 5D 10 6P 6").split
            case default; conf => split(i:i+1); keep = TRUE
         end

         j = 1
         do ! Loop over orbital configurations 

            if (j>conf.dim) exit

            conf_kind = conf(j)
            occ  = conf(j+1).to_int

            ! Now find the shell with the correct orbital kind
            if (occ>0) then
               found = FALSE 
               do s = 1,.shell.dim
                  if (all(.shell(s).orb_kind/=conf_kind)) cycle
                  match.create(.shell(s).n_orb)
                  match = .shell(s).orb_kind==conf_kind
                  ind = match.index_of_first_true_element
                  match.destroy
                  ENSURE(.shell(s).occupancy.associated,"no occupancies")
                  .shell(s).occupancy(ind) = occ
                  found = TRUE
                  exit
               end
               DIE_IF(NOT found,"orbital kind "//conf_kind.trim//" not found")
            end

            j = j + 2

         end

         if (NOT keep) conf.destroy
         i = i + 2

      end

      split.destroy

   end

!  ====================
!  Key related routines
!  ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

!  ===============
!  Inquiry methods
!  ===============

   is_resolved result (res) ::: get_from(BASIS), pure
   ! Return TRUE if self is resolved i.e. has shells
   end

   is_created_and_resolved result (res) ::: get_from(BASIS)
   ! Return TRUE if self is resolved
   end

   is_created_and_has_label result (res) ::: get_from(BASIS)
   ! Return TRUE if self has a non-blank label
   end

   same_as(b) result (res) ::: get_from(BASIS)
   ! Return TRUE if the basis set "self" is the same as "b". Only the
   ! shell vector is compared to see if they are "really" the same.
      self :: IN
      b :: SLATERBASIS, IN
      res :: BIN
   end

   max_n_orb result (res) 
   ! Return the maximum number of contracted orbitals in any one shell.
      self :: IN
      res :: INT
      res = maxval(.shell.n_orb)
   end

   no_of_shells result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of shells in the basis set
      self :: IN
      res :: INT
   end

   no_of_basis_functions result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of basis functions in the basis set
      self :: IN
      res :: INT
   end

   no_of_primitives result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of primitives in the basis set
      self :: IN
      res :: INT
   end

   min_exponent result (res) ::: get_from(BASIS), pure
   ! Return the minimum exponent in the basis.
      self :: IN
      res :: REAL
   end

   shell_kinds_created result (res) 
   ! Return TRUE if all the .shell.orb_kind vectors are there.
      self :: IN
      res :: BIN
      i :: INT
      if (.shell.disassociated) then
         res = FALSE
      else
         res = TRUE
         do i = 1,.shell.dim
            if (.shell(i).orb_kind.associated) cycle
            res = FALSE
            exit
         end
      end
   end

!  ==================
!  Density evaluation
!  ==================

   make_ED_grid(density_grid,pt,pos,occ) ::: PURE
   ! Make the electron "density_grid" on a set of points "pt", assuming the
   ! orbitals are at position "pos".
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      occ :: REAL, optional, IN

   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")

      if (.use_interpolator AND .interpolator.allocated) then
         .make_interpolated_ED_grid(density_grid,pt,pos,occ)
      else
         .make_normal_ED_grid(density_grid,pt,pos,occ)
      end

   end

   add_ED_grid(density_grid,pt,pos,occ,power_factor) ::: PURE
   ! Add the electron "density_grid" on a set of points "pt", assuming the
   ! orbitals are at position "pos".
      self :: IN
      density_grid :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      occ :: REAL, optional, IN
      power_factor :: INT, optional, IN

   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")

      use_power_factor :: BIN

      use_power_factor = FALSE
      if (present(power_factor)) then
      if (power_factor /= 1) then
         use_power_factor = TRUE
      end
      end


      if (.use_interpolator AND .interpolator.allocated) then

         if (use_power_factor) then
            .add_interpolated_power_density(density_grid,pt,pos,power_factor,occ)
         else
            .add_interpolated_density(density_grid,pt,pos,occ)
         end

      else

            .add_normal_density_grid(density_grid,pt,pos,occ)

      end

   end


   make_normal_ED_grid(density_grid,pt,pos,occ) ::: PURE
   ! Make the normal (uninterpolated) "density_grid" for the supplied points
   ! "pt" from the real slater atomic orbitals, as fitted by coppens, assuming
   ! the orbital is at position "pos".
      self :: IN
      density_grid :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      occ :: REAL, optional, IN

 ! ENSURE(pt.dim2==3,"wrong dimension for points array")
 ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
 ! ENSURE(.shell.associated,"no shell vector")

      R :: VEC{REAL}*
      n_pt,n :: INT
      x, y, z :: REAL
      do_occ :: BIN

      n_pt = pt.dim1
      R.create(n_pt)
      do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
      end

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
        do_occ = TRUE
      end
      end

      ! Now get the density values
      if (do_occ) then; density_grid = occ*.shell.densities_at_radii(R)
      else;             density_grid =     .shell.densities_at_radii(R)
      end

      ! Clean up
      R.destroy

   end

   add_normal_density_grid(density_grid,pt,pos,occ) ::: PURE
   ! Add the normal (uninterpolated) "density_grid" for the supplied points
   ! "pt" from the real slater atomic orbitals, as fitted by coppens, assuming
   ! the orbital is at position "pos".
      self :: IN
      density_grid :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      occ :: REAL, optional, IN

 ! ENSURE(pt.dim2==3,"wrong dimension for points array")
 ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
 ! ENSURE(.shell.associated,"no shell vector")

      R :: VEC{REAL}*
      n_pt,n :: INT
      x, y, z :: REAL
      do_occ :: BIN

      n_pt = pt.dim1
      R.create(n_pt)
      do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
      end

      ! Do occupation factor?
      do_occ = FALSE
      if (present(occ)) then
      if (NOT occ.equals(ONE)) then
        do_occ = TRUE
      end
      end

      ! Now get the density values
      if (do_occ) then; density_grid = density_grid + occ*.shell.densities_at_radii(R)
      else;             density_grid = density_grid +     .shell.densities_at_radii(R)
      end

      R.destroy

   end


   make_interpolated_ED_grid(density,pt,pos,occ) ::: PURE
   ! Make the interpolated "density" for the supplied points "pt" from the real
   ! slater atomic orbitals assuming the orbitals are at position "pos". 
      self :: IN
      density :: VEC{REAL}, OUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      occ :: REAL, optional, IN

 ! ENSURE(pt.dim2==3,"wrong dimension for points array")
 ! ENSURE(density.dim==pt.dim1,"inconsistent number of points")
 ! ENSURE(.interpolator.associated,"no interpolator defined!")

      R2 :: VEC{REAL}*
      n_pt,n :: INT
      x,y,z :: REAL

      ! Space for R2
      n_pt = pt.dim1
      R2.create(n_pt)

      ! Now get the interpolated density values
      if (.interpolator.domain_is_sqrt OR .interpolator.domain_is_sqrt_x1x) then

         ! Get squared distances R2
         do n = 1,n_pt
           x = pt(n,1) - pos(1)
           y = pt(n,2) - pos(2)
           z = pt(n,3) - pos(3)
           R2(n) = x*x + y*y + z*z
         end
         .interpolator.values_for(R2,density,occ)

      else

         ! Get distances R2
         do n = 1,n_pt
           x = pt(n,1) - pos(1)
           y = pt(n,2) - pos(2)
           z = pt(n,3) - pos(3)
           R2(n) = sqrt(x*x + y*y + z*z)
         end
         .interpolator.values_for(R2,density,occ)

      end

      ! Clean up
      R2.destroy

   end

   add_interpolated_power_density(density,pt,pos,power_factor,occ) ::: PURE
   ! Make the interpolated "power density" for the supplied points
   ! "pt" from the real slater atomic orbitals assuming the orbitals
   ! are at position "pos" ... same as add_interpolated_density except
   ! the densities are raised by the "power factor"
      self :: IN
      density :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      power_factor :: INT, IN
      occ :: REAL, optional, IN

      temp_density :: VEC{REAL}*
      temp_density.create(pt.dim1)
      temp_density = ZERO

      .make_interpolated_ED_grid(temp_density,pt,pos,occ)

      density = density + temp_density**power_factor

      temp_density.destroy

   end

   add_interpolated_density(density,pt,pos,occ) ::: PURE
   ! Make the interpolated "density" for the supplied points "pt" from the real
   ! slater atomic orbitals assuming the orbitals are at position "pos". 
      self :: IN
      density :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      pos :: VEC{REAL}(3), IN
      occ :: REAL, optional, IN

 ! ENSURE(pt.dim2==3,"wrong dimension for points array")
 ! ENSURE(density.dim==pt.dim1,"inconsistent number of points")
 ! ENSURE(.interpolator.associated,"no interpolator defined!")

      R2 :: VEC{REAL}*
      n_pt,n :: INT
      x,y,z :: REAL

      ! Space for R2
      n_pt = pt.dim1
      R2.create(n_pt)

      ! Now get the interpolated density values
      if (.interpolator.domain_is_sqrt OR .interpolator.domain_is_sqrt_x1x) then

         ! Get squared distances R2
         do n = 1,n_pt
           x = pt(n,1) - pos(1)
           y = pt(n,2) - pos(2)
           z = pt(n,3) - pos(3)
           R2(n) = x*x + y*y + z*z
         end
         .interpolator.add_values_for(R2,density,occ)

      else

         ! Get distances R2
         do n = 1,n_pt
           x = pt(n,1) - pos(1)
           y = pt(n,2) - pos(2)
           z = pt(n,3) - pos(3)
           R2(n) = sqrt(x*x + y*y + z*z)
         end
         .interpolator.add_values_for(R2,density,occ)

      end

      ! Clean up
      R2.destroy

   end


   density_at_radius(R) result (res) ::: PURE
   ! Work out the electron density at radius "R" from the orbitals.
      self :: IN
      R :: REAL, IN
      res :: REAL

      if (.interpolator.allocated) then; res = .interpolator.value_for(R)
      else;                            res = .shell.density_at_radius(R)
      end

   end

!   make_d_density_grid(density,d1_density,d2_density,pt,pos)
!   ! Work out the electron "density", its 1st derivative "d1_density" and 2nd
!   ! derivative "d2_density" on a set of points "pt", assuming the orbitals are
!   ! at position "pos".
!      self :: IN
!      density :: VEC{REAL}, OUT
!      d1_density :: MAT{REAL}, OUT
!      d2_density :: MAT3{REAL}, OUT
!      pt :: MAT{REAL}, IN
!      pos :: VEC{REAL}(3), IN
!   ENSURE(density.dim==pt.dim1,"inconsistent number of points")
!   ENSURE(d1_density.dim2==pt.dim1,"inconsistent number of points")
!   ENSURE(d2_density.dim3==pt.dim1,"inconsistent number of points")
!   ENSURE(d1_density.dim1==3,"wrong dim1 for d_density")
!   ENSURE(d2_density.dim1==3,"wrong dim1 for d2_density")
!   ENSURE(d2_density.dim2==3,"wrong dim1 for d2_density")
!      if (.interpolator.associated) then
!         .interpolated_d_density(density,d1_density,d2_density,pt,pos)
!      else
!         DIE("not implemented yet")
!      end
!   end

!   interpolated_d_density(density,d1_density,d2_density,pt,pos)
!   ! Make the interpolated "density", its 1st derivative "d1_density", and 2nd
!   ! derivative "d2_density" for the supplied points "pt" from the real slater
!   ! atomic orbitals assuming the orbitals are at position "pos". This fast
!   ! version skips tests and makes assumptions.  
!     self :: IN
!     density :: VEC{REAL}, OUT
!     d1_density :: MAT{REAL}, OUT
!     d2_density :: MAT3{REAL}, OUT
!     pt :: MAT{REAL}, IN
!     pos :: VEC{REAL}(3), IN
!   ! ENSURE(pt.dim2==3,"wrong dimension for points array")
!   ! ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
!   ! ENSURE(.interpolator.associated,"no interpolator defined!")
!     R,D1,D2 :: VEC{REAL}*
!     n_pt,n :: INT
!     x,y,z,r1,r2,r3,xx,yy,zz,xy,xz,yz, fac1,fac2,val :: REAL
!     n_pt = pt.dim1
!     D1.create(n_pt)
!     D2.create(n_pt)
!     R.create(n_pt)
!     do n = 1,n_pt
!        x = pt(n,1) - pos(1)
!        y = pt(n,2) - pos(2)
!        z = pt(n,3) - pos(3)
!        R(n) = sqrt(x*x + y*y + z*z)
!     end
!     ! Now get the interpolated density values
!     density = .interpolator.fast_values_for(R)
!     D1 = .d1_interpolator.fast_d_values_for(R) ! include minus sign, maybe
!     D2 = .d2_interpolator.fast_values_for(R)  ! minus sign not needed
!     do n = 1,n_pt
!        x = pt(n,1) - pos(1)
!        y = pt(n,2) - pos(2)
!        z = pt(n,3) - pos(3)
!        r1 = ONE/R(n)
!        r2 = r1*r1
!        r3 = r2*r1
!        xx = x*x; yy = y*y; zz = z*z
!        xy = x*y; xz = x*z; yz = y*z
!        fac1 = D1(n)
!        fac2 = D2(n)*r2 - fac1*r3
!        val  = fac1*r1
!        d2_density(1,1,n) = fac2*xx + val
!        d2_density(2,2,n) = fac2*yy + val
!        d2_density(3,3,n) = fac2*zz + val
!        d2_density(1,2,n) = fac2*xy; d2_density(2,1,n) = d2_density(1,2,n)
!        d2_density(1,3,n) = fac2*xz; d2_density(3,1,n) = d2_density(1,3,n)
!        d2_density(2,3,n) = fac2*yz; d2_density(3,2,n) = d2_density(2,3,n)
!        fac1 = fac1*r1
!        d1_density(1,n) = fac1*x
!        d1_density(2,n) = fac1*y
!        d1_density(3,n) = fac1*z
!     end
!     R.destroy
!     D2.destroy
!     D1.destroy
!   end

!  ============
!  Interpolator
!  ============

   make_interpolator(interpolator) ::: leaky
   ! Make the interpolator for the slater atom density. If present,
   ! "interpolator" is used as a template to get the settings needed. 
      interpolator :: INTERPOLATOR@, optional

   ENSURE(.shell.associated,"no slater orbitals defined!")

      ! Create a copy of the template if it exists
      if (present(interpolator)) then
      if (interpolator.allocated) then
         .interpolator.destroy
         .interpolator = interpolator
      end
      end

      ! If no template, create a default interpolator
      if (NOT .interpolator.allocated) .interpolator.create

      ! Set the interpolation table
      .shell.set_saved_self                    ! Used by function below
      .interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_value_at_radius)

   end

   interpolator_table_length(tol) result (length)
   ! Return the interpolator table "length" for a given tolerance "tol" for the
   ! atom density. The interpolator is a default one.
      self :: IN
      tol :: REAL, IN
      length :: REAL

   ENSURE(.shell.associated,"no slater orbitals defined!")

      interpolator :: INTERPOLATOR@

      interpolator.create  
      .shell.set_saved_self ! Used by function below
      length = interpolator.the_table_length(VEC{SLATERSHELL}::density_value_at_radius,tol)
      interpolator.destroy

   end

!   make_d_interpolators(interpolator,tol) ::: leaky
!   ! Make the DERIVATIVE interpolators as well for the slater atom density. If
!   ! present, "interpolator" is used as a template to get the settings needed.
!   ! Otherwise a default interpolator is used.
!     interpolator :: INTERPOLATOR*, optional
!     tol :: REAL, optional
!   ENSURE(.shell.associated,"no slater orbitals defined!")
!     len :: REAL
!      if (present(interpolator)) then
!      if (interpolator.associated) then
!         .interpolator.destroy
!         .interpolator.create_copy(interpolator)
!         .d1_interpolator.destroy
!         .d1_interpolator.create_copy(interpolator)
!         .d2_interpolator.destroy
!         .d2_interpolator.create_copy(interpolator)
!      end
!      end
!      if (.interpolator.disassociated) then
!         .interpolator.create
!         .d1_interpolator.create
!         .d2_interpolator.create
!      end
!      .shell.set_saved_self ! Used by function below
!      .interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_value_at_radius,tol=tol)
!      len = .interpolator.table_length
!      .d1_interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_d1_value_at_radius,length=len)
!      .d2_interpolator.set_even_spaced_data(VEC{SLATERSHELL}::density_d2_value_at_radius,length=len)
!   end

!  =============
!  Normalisation
!  =============

   unnormalise ::: PURE
   ! Set the value of the orbital coefficients to correspond to un-normalised
   ! Slater functions -- assuming they are normalised. This saves computation.
      self :: INOUT

      if (.shell.associated) .shell.unnormalise

   end

   renormalise ::: PURE
   ! Set the value of the orbitals coefficients to correspond to normalised
   ! Slater functions --- assuming they are w.r.t. unnormalised functions. 
      self :: INOUT

      if (.shell.associated) .shell.renormalise

   end

!  ====
!  Dump
!  ====

   do_dump ::: private
   ! Dump object data as text

      stdout.dump("label",.label)
      stdout.dump("configuration",.configuration)
      stdout.dump("n_shell",.n_shell)
      stdout.dump("n_bf",.n_bf)
      stdout.dump("n_prim",.n_prim)
      .shell.dmpp("shell")
      stdout.dump("use_interpolator",.use_interpolator)
      .interpolator.dump("interpolator")
      .d1_interpolator.dump("d1_interpolator")
      .d2_interpolator.dump("d2_interpolator")

   end

   dump(object_name,ptr) ::: get_from(OBJECT)
   ! Dump object data as text
   end

   dmpp(object_name) ::: get_from(OBJECT)
   ! Dump pointer object data as text
   end

!  ==============
!  Output methods
!  ==============

   put
   ! Put out the basis information to file "stdout"
      stdout.flush
      stdout.show("Slater basis set : ",trim(.label))
      stdout.flush
      stdout.show("Configuration          =",.configuration)
      stdout.show("No. of shells          =",.n_shell)
      stdout.show("No. of basis functions =",.n_bf)
      stdout.show("No. of primitives      =",.n_prim)
      if (.shell.associated) .shell.put
   end

end
