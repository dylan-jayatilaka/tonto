!---------------------------------------------------------------------------
!
!  MAT4{INT}: 4 dimensional integer matrices
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAT4{INT}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3,dim4) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create a 4-d array with all upper "bounds" specified
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds1,bounds2,bounds3,bounds4) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object. This version does not destroy pointer parts.
   end

!  ====
!  Copy
!  ====

   create_copy(c) ::: get_from(MAT4{INTRINSIC}), leaky
   ! Create a copy of matrix "c"
   end

!  =======
!  Methods
!  =======

   is_same_shape_as(b) result (res)  ::: get_from(MAT4{INTRINSIC})
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC})
   ! Set "self" to "b"
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC})
   ! Set "self" to vector "b" in standard order
   end

!  =============
!  String widths
!  =============

   str_lengths(spaces) result (res) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      spaces :: INT, IN, optional
      res :: MAT4{INT}(.dim1,.dim2,.dim3,.dim4)
   end 

   get_max_str_length(msl,spaces) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns the maximum of the string lengths.
   end


end
