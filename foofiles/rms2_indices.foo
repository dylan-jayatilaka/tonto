!=====================================================================
!
! RMS2_INDICES
!
! This object is used to store precalculated information pertaining to
! the reduced multiplication scheme (RMS) used in electron repulsion
! integral evaluation, for shell quartets. The module RMS_INDICES
! produces the same information but for shell pairs.
!
! Copyright (C) Dylan Jayatilaka, 2006
! Copyright (C) Dylan Jayatilaka, 2021
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!=====================================================================

module RMS2_INDICES

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end
 
   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts of self
      self :: INOUT

!     .e.destroy
!     .f.destroy
!     .ex.destroy
!     .ey.destroy
!     .ez.destroy
!     .fx.destroy
!     .fy.destroy
!     .fz.destroy
!     .Ixy_is_1.destroy
!     .Ixy_is_x.destroy
!     .Ixy_is_y.destroy
!     .Ixy_is_p.destroy
      .ef.destroy
      .efx.destroy
      .efy.destroy
      .efz.destroy
      .do_Ixy_is_x.destroy
      .do_Ixy_is_y.destroy
      .do_Ixy.destroy

   end

!  ===========
!  Set methods
!  ===========

   set_indices(er,fr,ex,ey,ez,fx,fy,fz,ab_l_sum) ::: leaky
   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
   ! thus saving work. This version takes care of cases when Ix and Iy
   ! are equal to 1.
      self :: INOUT
      er,fr :: RMS_INDICES, target, IN
      ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
      ab_l_sum :: INT, IN

      e0,erms,f0,frms :: VEC{INT}*
      fxy_rms,exy_rms :: VEC{EVEC{INT}}*
      Ixy_is_1,Ixy_is_x,Ixy_is_y,Ixy_is_p :: MAT{INT}@
      n,m,ne,nf,ab,i,k,k1,kx,ky,aa,nn,an,na :: INT
      e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
      xe1,ye1,xf1,yf1,x1,y1,xy1 :: BIN

      ne = ex.dim
      nf = fx.dim
      n  = ne*nf
      ab = ab_l_sum + 1

      .ef.create(n)
      .efx.create(n)
      .efy.create(n)
      .efz.create(n)
      .do_Ixy_is_x.create(n); .do_Ixy_is_x = FALSE
      .do_Ixy_is_y.create(n); .do_Ixy_is_y = FALSE
      .do_Ixy.create(n);      .do_Ixy      = FALSE


      fxy_rms => fr.xy_rms_a                           ! Case when Ix, Iy are unity f
      exy_rms => er.xy_rms_a                           ! is done first ...

      Ixy_is_p.create(n,2)
      m = fxy_rms.dim*exy_rms.dim
      Ixy_is_y.create(m,2)
      Ixy_is_x.create(m,2)
      Ixy_is_1.create(m,2)

      f0 => fr.a0
      e0 => er.a0
      k1 = 0; kx = 0; ky = 0
      aa = 0

      ! Apply (f) RMS here
      do fs = 1,fxy_rms.dim                            

         frms => fxy_rms(fs).element
         f = f0(frms(1))
         xf  = fx(f); yf = fy(f)
        
         ! Eliminate unity factors
         xf1 = xf==1; yf1 = yf==1
        
         ! Apply (e) RMS here
         do es = 1,exy_rms.dim                         
        
            erms => exy_rms(es).element
            e = e0(erms(1))
            xe  = ex(e); ye  = ey(e)
        
            ! Eliminate unity factors
            xe1 = xe==1; ye1 = ye==1                   
        
            x1 = xf1 AND xe1
            y1 = yf1 AND ye1
            xy1 = x1 AND y1
        
            if      (xy1) then
               k1 = k1 + 1
               Ixy_is_1(k1,1) = es
               Ixy_is_1(k1,2) = fs
            else if ( x1) then
               ky = ky + 1
               Ixy_is_y(ky,1) = es
               Ixy_is_y(ky,2) = fs
            else if ( y1) then
               kx = kx + 1
               Ixy_is_x(kx,1) = es
               Ixy_is_x(kx,2) = fs
            else
               aa = aa + 1
               Ixy_is_p(aa,1) = es
               Ixy_is_p(aa,2) = fs
            end
        
         end

      end

      ! Now do cases when there
      ! are no unity factors ...
      fxy_rms => fr.xy_rms_n                           
      exy_rms => er.xy_rms_n                           
      f0 => fr.n0
      e0 => er.n0
      nn = aa

      ! Apply (f) RMS here
      do fs = 1,fxy_rms.dim                            

         frms => fxy_rms(fs).element
         f = f0(frms(1))
         
         ! Apply (e) RMS here
         do es = 1,exy_rms.dim                         
         
            erms => exy_rms(es).element
            e = e0(erms(1))
         
            nn = nn + 1
            Ixy_is_p(nn,1) = es
            Ixy_is_p(nn,2) = fs
         
         end

      end

      fxy_rms => fr.xy_rms_a
      exy_rms => er.xy_rms_n  
      f0 => fr.a0
      e0 => er.n0
      an = nn

      ! Apply (f) RMS here
      do fs = 1,fxy_rms.dim                            

         frms => fxy_rms(fs).element
         f = f0(frms(1))
        
         ! Apply (e) RMS here
         do es = 1,exy_rms.dim                         
        
            erms => exy_rms(es).element
            e = e0(erms(1))
        
            an = an + 1
            Ixy_is_p(an,1) = es
            Ixy_is_p(an,2) = fs
        
         end

      end

      fxy_rms => fr.xy_rms_n
      exy_rms => er.xy_rms_a  
      f0 => fr.n0
      e0 => er.a0
      na = an

      ! Apply (f) RMS here
      do fs = 1,fxy_rms.dim                            

         frms => fxy_rms(fs).element
         f = f0(frms(1))
         
         ! Apply (e) RMS here
         do es = 1,exy_rms.dim                         
         
            erms => exy_rms(es).element
            e = e0(erms(1))
         
            na = na + 1
            Ixy_is_p(na,1) = es
            Ixy_is_p(na,2) = fs
         
         end

      end

      ! Now order the indices over "i"  for efficiency
      i = 0

      ! Case when Ix, Iy are unity f
      ! is done first ...
      fxy_rms => fr.xy_rms_a                           
      exy_rms => er.xy_rms_a                           
      f0 => fr.a0
      e0 => er.a0

      do k = 1,k1

         es = Ixy_is_1(k,1)
         fs = Ixy_is_1(k,2)
         
         frms => fxy_rms(fs).element
         erms => exy_rms(es).element
         
         do fm = 1,frms.dim

            f = f0(frms(fm))
            xf = fx(f); yf = fy(f); zf = fz(f)
         
            do em = 1,erms.dim
         
               e = e0(erms(em))
               xe = ex(e); ye = ey(e); ze = ez(e)
         
               i = i + 1
               .ef(i)  = e  + ne*(f -1)
               .efx(i) = xe + ab*(xf-1)
               .efy(i) = ye + ab*(yf-1)
               .efz(i) = ze + ab*(zf-1)
         
            end
         
         end

      end

      .no_Ixy_is_1 = i
      Ixy_is_1.destroy
  
      do k = 1,kx

         es = Ixy_is_x(k,1)
         fs = Ixy_is_x(k,2)
         
         frms => fxy_rms(fs).element
         erms => exy_rms(es).element
         
         .do_Ixy_is_x(i+1) = TRUE
         
         do fm = 1,frms.dim
         
            f = f0(frms(fm))
            xf = fx(f); yf = fy(f); zf = fz(f)
         
            do em = 1,erms.dim
         
               e = e0(erms(em))
               xe = ex(e); ye = ey(e); ze = ez(e)
         
               i = i + 1
               .ef(i)  = e  + ne*(f -1)
               .efx(i) = xe + ab*(xf-1)
               .efy(i) = ye + ab*(yf-1)
               .efz(i) = ze + ab*(zf-1)
         
            end
         
         end

      end

      .no_Ixy_is_x = i
      Ixy_is_x.destroy

      do k = 1,ky

        es = Ixy_is_y(k,1)
        fs = Ixy_is_y(k,2)

        frms => fxy_rms(fs).element
        erms => exy_rms(es).element

        .do_Ixy_is_y(i+1) = TRUE

        do fm = 1,frms.dim

           f = f0(frms(fm))
           xf = fx(f); yf = fy(f); zf = fz(f)

           do em = 1,erms.dim

              e = e0(erms(em))
              xe = ex(e); ye = ey(e); ze = ez(e)

              i = i + 1
              .ef(i)  = e  + ne*(f -1)
              .efx(i) = xe + ab*(xf-1)
              .efy(i) = ye + ab*(yf-1)
              .efz(i) = ze + ab*(zf-1)

           end

        end

      end

      .no_Ixy_is_y = i
      Ixy_is_y.destroy

      ! Ixy = Ix*Iy ...
      do k = 1,aa

        es = Ixy_is_p(k,1)
        fs = Ixy_is_p(k,2)

        frms => fxy_rms(fs).element
        erms => exy_rms(es).element

        .do_Ixy(i+1) = TRUE

        do fm = 1,frms.dim

           f = f0(frms(fm))
           xf = fx(f); yf = fy(f); zf = fz(f)

           do em = 1,erms.dim

              e = e0(erms(em))
              xe = ex(e); ye = ey(e); ze = ez(e)

              i = i + 1
              .ef(i)  = e  + ne*(f -1)
              .efx(i) = xe + ab*(xf-1)
              .efy(i) = ye + ab*(yf-1)
              .efz(i) = ze + ab*(zf-1)

           end

        end

      end

      fxy_rms => fr.xy_rms_n  
      exy_rms => er.xy_rms_n 
      f0 => fr.n0
      e0 => er.n0

      do k = aa+1,nn

        es = Ixy_is_p(k,1)
        fs = Ixy_is_p(k,2)

        frms => fxy_rms(fs).element
        erms => exy_rms(es).element

        .do_Ixy(i+1) = TRUE

        do fm = 1,frms.dim

           f = f0(frms(fm))
           xf = fx(f); yf = fy(f); zf = fz(f)

           do em = 1,erms.dim

              e = e0(erms(em))
              xe = ex(e); ye = ey(e); ze = ez(e)

              i = i + 1
              .ef(i)  = e  + ne*(f -1)
              .efx(i) = xe + ab*(xf-1)
              .efy(i) = ye + ab*(yf-1)
              .efz(i) = ze + ab*(zf-1)

           end

        end

      end


      fxy_rms => fr.xy_rms_a
      exy_rms => er.xy_rms_n  
      f0 => fr.a0
      e0 => er.n0

      do k = nn+1,an

        es = Ixy_is_p(k,1)
        fs = Ixy_is_p(k,2)

        frms => fxy_rms(fs).element
        erms => exy_rms(es).element

        .do_Ixy(i+1) = TRUE

        do fm = 1,frms.dim

           f = f0(frms(fm))
           xf = fx(f); yf = fy(f); zf = fz(f)

           do em = 1,erms.dim

              e = e0(erms(em))
              xe = ex(e); ye = ey(e); ze = ez(e)

              i = i + 1
              .ef(i)  = e  + ne*(f -1)
              .efx(i) = xe + ab*(xf-1)
              .efy(i) = ye + ab*(yf-1)
              .efz(i) = ze + ab*(zf-1)

           end

        end

      end

      fxy_rms => fr.xy_rms_n
      exy_rms => er.xy_rms_a  
      f0 => fr.n0
      e0 => er.a0

      do k = an+1,na

        es = Ixy_is_p(k,1)
        fs = Ixy_is_p(k,2)

        frms => fxy_rms(fs).element
        erms => exy_rms(es).element

        .do_Ixy(i+1) = TRUE

        do fm = 1,frms.dim

           f = f0(frms(fm))
           xf = fx(f); yf = fy(f); zf = fz(f)

           do em = 1,erms.dim

              e = e0(erms(em))
              xe = ex(e); ye = ey(e); ze = ez(e)

              i = i + 1
              .ef(i)  = e  + ne*(f -1)
              .efx(i) = xe + ab*(xf-1)
              .efy(i) = ye + ab*(yf-1)
              .efz(i) = ze + ab*(zf-1)

           end

        end

      end

      Ixy_is_p.destroy

      ENSURE(i==n,"inconsistent final index")

   end

!   set_indices(er,fr,ex,ey,ez,fx,fy,fz) ::: leaky
!   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
!   ! thus saving work. This version takes care of cases when Ix and Iy
!   ! are equal to 1.
!     er,fr :: RMS_INDICES, IN
!     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
!     e0,erms,f0,frms :: VEC{INT}*
!     fxy_rms,exy_rms :: VEC{VEC_{INT}}*
!     Ixy_is_1,Ixy_is_x,Ixy_is_y,Ixy_is_p :: MAT{INT}*
!     n,ne,nf,i,k,k1,kx,ky,kp,aa,nn,an,na,nrms,e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
!     xe1,ye1,xf1,yf1,x1,y1,xy1 :: BIN
!
!     ne = ex.dim
!     nf = fx.dim
!     n  = ne*nf
!
!     .e.create(n);  .f.create(n)
!     .ex.create(n); .ey.create(n); .ez.create(n)
!     .fx.create(n); .fy.create(n); .fz.create(n)
!
!     Ixy_is_1.create(n,2)
!     Ixy_is_y.create(n,2)
!     Ixy_is_x.create(n,2)
!     Ixy_is_p.create(n,2)
!
!     fxy_rms => fr.xy_rms_a                           ! Case when Ix, Iy are unity f
!     exy_rms => er.xy_rms_a                           ! is done first ...
!     f0 => fr.a0
!     e0 => er.a0
!     k1 = 0; kx = 0; ky = 0
!     aa = 0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        xf1 = xf==1; yf1 = yf==1
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           xe1 = xe==1; ye1 = ye==1                   ! Eliminate unity factors
!           x1 = xf1 AND xe1
!           y1 = yf1 AND ye1
!           xy1  = x1 AND y1
!           if      (xy1) then
!              k1 = k1 + 1
!              Ixy_is_1(k1,1) = es
!              Ixy_is_1(k1,2) = fs
!           else if ( x1) then
!              ky = ky + 1
!              Ixy_is_y(ky,1) = es
!              Ixy_is_y(ky,2) = fs
!           else if ( y1) then
!              kx = kx + 1
!              Ixy_is_x(kx,1) = es
!              Ixy_is_x(kx,2) = fs
!           else
!              aa = aa + 1
!              Ixy_is_p(aa,1) = es
!              Ixy_is_p(aa,2) = fs
!           end
!        end
!     end
!
!     Ixy_is_1.shrink(k1,2)
!     Ixy_is_x.shrink(kx,2)
!     Ixy_is_y.shrink(ky,2)
!
!     .Ixy_is_1.create(k1)
!     .Ixy_is_y.create(kx)
!     .Ixy_is_x.create(ky)
!
!     fxy_rms => fr.xy_rms_n                           ! Now do cases when there
!     exy_rms => er.xy_rms_n                           ! are no unity factors ...
!     f0 => fr.n0
!     e0 => er.n0
!     nn = aa
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           nn = nn + 1
!           Ixy_is_p(nn,1) = es
!           Ixy_is_p(nn,2) = fs
!        end
!     end
!
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_n  
!     f0 => fr.a0
!     e0 => er.n0
!     an = nn
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           an = an + 1
!           Ixy_is_p(an,1) = es
!           Ixy_is_p(an,2) = fs
!        end
!     end
!
!     fxy_rms => fr.xy_rms_n
!     exy_rms => er.xy_rms_a  
!     f0 => fr.n0
!     e0 => er.a0
!     na = an
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           na = na + 1
!           Ixy_is_p(na,1) = es
!           Ixy_is_p(na,2) = fs
!        end
!     end
!     kp = na
!     Ixy_is_p.shrink(kp,2)
!     .Ixy_is_p.create(kp)
!
!     ! Now order the indices over "i"  for efficiency
!     i = 0
!     fxy_rms => fr.xy_rms_a                           ! Case when Ix, Iy are unity f
!     exy_rms => er.xy_rms_a                           ! is done first ...
!     f0 => fr.a0
!     e0 => er.a0
!     do k = 1,k1
!        es = Ixy_is_1(k,1)
!        fs = Ixy_is_1(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_1(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!     do k = 1,kx
!        es = Ixy_is_x(k,1)
!        fs = Ixy_is_x(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_x(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!     do k = 1,ky
!        es = Ixy_is_y(k,1)
!        fs = Ixy_is_y(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_y(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!
!     ! Non unit cases ...
!     do k = 1,aa
!        es = Ixy_is_p(k,1)
!        fs = Ixy_is_p(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_p(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!
!     fxy_rms => fr.xy_rms_n  
!     exy_rms => er.xy_rms_n 
!     f0 => fr.n0
!     e0 => er.n0
!     do k = aa+1,nn
!        es = Ixy_is_p(k,1)
!        fs = Ixy_is_p(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_p(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_n  
!     f0 => fr.a0
!     e0 => er.n0
!     do k = nn+1,an
!        es = Ixy_is_p(k,1)
!        fs = Ixy_is_p(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_p(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!
!     fxy_rms => fr.xy_rms_n
!     exy_rms => er.xy_rms_a  
!     f0 => fr.n0
!     e0 => er.a0
!     do k = an+1,na
!        es = Ixy_is_p(k,1)
!        fs = Ixy_is_p(k,2)
!        frms => fxy_rms(fs).element
!        erms => exy_rms(es).element
!        nrms = erms.dim*frms.dim
!        .Ixy_is_p(k) = nrms
!        do fm = 1,frms.dim
!           f = f0(frms(fm))
!           xf = fx(f); yf = fy(f); zf = fz(f)
!           do em = 1,erms.dim
!              e = e0(erms(em))
!              xe = ex(e); ye = ey(e); ze = ez(e)
!              i = i + 1
!              .e(i)  = e;  .f(i)  = f
!              .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!              .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!           end
!        end
!     end
!
!     ENSURE(i==n,"inconsistent final index")
!
!     Ixy_is_p.destroy
!     Ixy_is_x.destroy
!     Ixy_is_y.destroy
!     Ixy_is_1.destroy
!
!   end

!   set_indices_old(er,fr,ex,ey,ez,fx,fy,fz, a,b,c,d) ::: leaky
!   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
!   ! thus saving work. This version takes care of cases when Ix and Iy
!   ! are equal to 1.
!     er,fr :: RMS_INDICES, IN
!     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
!     en0,ea0,e0,erms :: VEC{INT}*
!     fn0,fa0,f0,frms :: VEC{INT}*
!     fxy_rms,exy_rms :: VEC{VEC_{INT}}*
!     i,n,ne,nf,e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
!     xe1,ye1,xf1,yf1,xye1,xyf1,xy1 :: BIN
!     ne = ex.dim
!     nf = fx.dim
!     n  = ne*nf
!     .e.create(n);  .f.create(n)
!     .ex.create(n); .ey.create(n); .ez.create(n)
!     .fx.create(n); .fy.create(n); .fz.create(n)
!     .do_Ixy.create(n);      .do_Ixy = FALSE
!     .do_Ixy_is_x.create(n); .do_Ixy_is_x = FALSE
!     .do_Ixy_is_y.create(n); .do_Ixy_is_y = FALSE
!     .do_Ixy_is_1.create(n); .do_Ixy_is_1 = FALSE
!     i = 0
!     en0 => er.n0; ea0 => er.a0                       ! Case when Ix, Iy are unity f
!     fn0 => fr.n0; fa0 => fr.a0                       ! is done first ...
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_a
!     f0 => fa0
!     e0 => ea0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        xf1 = xf==1; yf1 = yf==1
!        xyf1 = xf1 AND yf1
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           xe1 = xe==1; ye1 = ye==1                   ! Eliminate unity factors
!           xye1 = xe1  AND ye1
!           xy1  = xyf1 AND xye1
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 .do_Ixy_is_1(i) = xy1
!              end
!           end
!        end
!     end
!     .do_Ixy_is_1.shrink(i)
!     .do_Ixy_is_y.shrink(i)
!     .do_Ixy_is_x.shrink(i)
!     fxy_rms => fr.xy_rms_n                           ! Now do cases when there
!     exy_rms => er.xy_rms_n                           ! are no unity factors ...
!     f0 => fn0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_n  
!     f0 => fa0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_n
!     exy_rms => er.xy_rms_a  
!     f0 => fn0
!     e0 => ea0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!              end
!           end
!        end
!     end
!     ENSURE(i==n,"inconsistent final index")
!   end

!   set_indices_print(er,fr,ex,ey,ez,fx,fy,fz, a,b,c,d) ::: leaky
!   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
!   ! thus saving work. This version takes care of cases when Ix and Iy
!   ! are equal to 1.
!     er,fr :: RMS_INDICES, IN
!     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
!   a,b,c,d :: INT, IN
!     en0,ea0,e0,erms :: VEC{INT}*
!     fn0,fa0,f0,frms :: VEC{INT}*
!     fxy_rms,exy_rms :: VEC{VEC_{INT}}*
!     i,n,ne,nf,e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
!     xe1,ye1,xf1,yf1,xye1,xyf1,xy1 :: BIN
!     xypart,zpart,sep :: STR
!     use_xy :: BIN
!     ne = ex.dim
!     nf = fx.dim
!     n  = ne*nf
!     .e.create(n);  .f.create(n)
!     .ex.create(n); .ey.create(n); .ez.create(n)
!     .fx.create(n); .fy.create(n); .fz.create(n)
!     .do_Ixy.create(n);      .do_Ixy = FALSE
!     .do_Ixy_is_x.create(n); .do_Ixy_is_x = FALSE
!     .do_Ixy_is_y.create(n); .do_Ixy_is_y = FALSE
!     .do_Ixy_is_1.create(n); .do_Ixy_is_1 = FALSE
!     i = 0
!     en0 => er.n0; ea0 => er.a0                       ! Case when Ix, Iy are unity f
!     fn0 => fr.n0; fa0 => fr.a0                       ! is done first ...
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_a
!     f0 => fa0
!     e0 => ea0
!   stdout.text("case ("//trim(a.to_str)// &
!                         trim(b.to_str)// &
!                         trim(c.to_str)// &
!                         trim(d.to_str)//")")
!   sep = " "
!   if (ne>9 OR nf>9) sep = "_"
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        xf1 = xf==1; yf1 = yf==1
!        xyf1 = xf1 AND yf1
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           xe1 = xe==1; ye1 = ye==1                   ! Eliminate unity factors
!           xye1 = xe1  AND ye1
!           xy1  = xyf1 AND xye1
!           use_xy = TRUE
!           if      (    xy1    ) then
!              xypart = " "
!           else if (xe1 AND xf1) then; .do_Ixy_is_y(i+1) = TRUE
!              xypart = "Iy"//trim(ye.to_str)//trim(yf.to_str)
!              use_xy = FALSE
!           else if (ye1 AND yf1) then; .do_Ixy_is_x(i+1) = TRUE
!              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)
!              use_xy = FALSE
!           else;                       .do_Ixy(i+1) = TRUE
!              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
!                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
!           end
!              if (xypart/=" " AND frms.dim*erms.dim>1 AND use_xy) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 .do_Ixy_is_1(i) = xy1
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt"
!                 else
!                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
!                 end
!                 if (xy1) then
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    trim(zpart))
!                 else if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else if (use_xy) then
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     .do_Ixy_is_1.shrink(i)
!     .do_Ixy_is_y.shrink(i)
!     .do_Ixy_is_x.shrink(i)
!     fxy_rms => fr.xy_rms_n                           ! Now do cases when there
!     exy_rms => er.xy_rms_n                           ! are no unity factors ...
!     f0 => fn0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
!                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt"
!                 else
!                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_n  
!     f0 => fa0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
!                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt"
!                 else
!                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_n
!     exy_rms => er.xy_rms_a  
!     f0 => fn0
!     e0 => ea0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix"//trim(xe.to_str)//trim(xf.to_str)//"*"// &
!                       "Iy"//trim(ye.to_str)//trim(yf.to_str)
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt"
!                 else
!                    zpart = "Iz"//trim(ze.to_str)//trim(zf.to_str)
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " = v"// &
!                    trim(sep)// &
!                    trim(e.to_str)// &
!                    trim(sep)// &
!                    trim(f.to_str)// &
!                    " + "// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     ENSURE(i==n,"inconsistent final index")
!   end

!   set_indices_print_old(er,fr,ex,ey,ez,fx,fy,fz, a,b,c,d) ::: leaky
!   ! Form the RMS pair indices, which tells when to multiply Ix and Iy,
!   ! thus saving work. This version takes care of cases when Ix and Iy
!   ! are equal to 1.
!     er,fr :: RMS_INDICES, IN
!     ex,ey,ez,fx,fy,fz :: VEC{INT}, IN
!   a,b,c,d :: INT, IN
!     en0,ea0,e0,erms :: VEC{INT}*
!     fn0,fa0,f0,frms :: VEC{INT}*
!     fxy_rms,exy_rms :: VEC{VEC_{INT}}*
!     i,n,ne,nf,e,f,ze,ye,xe,zf,yf,xf,fs,es,fm,em :: INT
!     xe1,ye1,xf1,yf1,xye1,xyf1,xy1 :: BIN
!     xypart,zpart :: STR
!     ne = ex.dim
!     nf = fx.dim
!     n  = ne*nf
!     .e.create(n);  .f.create(n)
!     .ex.create(n); .ey.create(n); .ez.create(n)
!     .fx.create(n); .fy.create(n); .fz.create(n)
!     .do_Ixy.create(n);      .do_Ixy = FALSE
!     .do_Ixy_is_x.create(n); .do_Ixy_is_x = FALSE
!     .do_Ixy_is_y.create(n); .do_Ixy_is_y = FALSE
!     .do_Ixy_is_1.create(n); .do_Ixy_is_1 = FALSE
!     i = 0
!     en0 => er.n0; ea0 => er.a0                       ! Case when Ix, Iy are unity f
!     fn0 => fr.n0; fa0 => fr.a0                       ! is done first ...
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_a
!     f0 => fa0
!     e0 => ea0
!   stdout.text("case ("//trim(a.to_str)// &
!                         trim(b.to_str)// &
!                         trim(c.to_str)// &
!                         trim(d.to_str)//")")
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        xf1 = xf==1; yf1 = yf==1
!        xyf1 = xf1 AND yf1
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           xe1 = xe==1; ye1 = ye==1                   ! Eliminate unity factors
!           xye1 = xe1  AND ye1
!           xy1  = xyf1 AND xye1
!           if      (    xy1    ) then
!              xypart = " "
!           else if (xe1 AND xf1) then; .do_Ixy_is_y(i+1) = TRUE
!              xypart = "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!           else if (ye1 AND yf1) then; .do_Ixy_is_x(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")"
!           else;                       .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!           end
!              if (xypart/=" " AND frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 .do_Ixy_is_1(i) = xy1
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (xy1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(zpart))
!                 else if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     .do_Ixy_is_1.shrink(i)
!     .do_Ixy_is_y.shrink(i)
!     .do_Ixy_is_x.shrink(i)
!     fxy_rms => fr.xy_rms_n                           ! Now do cases when there
!     exy_rms => er.xy_rms_n                           ! are no unity factors ...
!     f0 => fn0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_a
!     exy_rms => er.xy_rms_n  
!     f0 => fa0
!     e0 => en0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     fxy_rms => fr.xy_rms_n
!     exy_rms => er.xy_rms_a  
!     f0 => fn0
!     e0 => ea0
!     do fs = 1,fxy_rms.dim                            ! Apply (f) RMS here
!        frms => fxy_rms(fs).element
!        f = f0(frms(1))
!        xf  = fx(f); yf = fy(f)
!        do es = 1,exy_rms.dim                         ! Apply (e) RMS here
!           erms => exy_rms(es).element
!           e = e0(erms(1))
!           xe  = ex(e); ye  = ey(e)
!           .do_Ixy(i+1) = TRUE
!              xypart = "Ix(:,"//trim(xe.to_str)//","//trim(xf.to_str)//")*"// &
!                       "Iy(:,"//trim(ye.to_str)//","//trim(yf.to_str)//")"
!              if (frms.dim*erms.dim>1) stdout.text("   Ixy = "//trim(xypart))
!           do fm = 1,frms.dim
!              f = f0(frms(fm))
!              zf = fz(f)
!              do em = 1,erms.dim
!                 e = e0(erms(em))
!                 ze = ez(e)
!                 i = i + 1
!                 .e(i)  = e;  .f(i)  = f
!                 .ex(i) = xe; .ey(i) = ye; .ez(i) = ze
!                 .fx(i) = xf; .fy(i) = yf; .fz(i) = zf
!                 if (ze==1 AND zf==1) then
!                    zpart = "wt)"
!                 else
!                    zpart = "Iz(:,"//trim(ze.to_str)//","//trim(zf.to_str)//"))"
!                 end
!                 if (frms.dim==1 AND erms.dim==1) then
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    trim(xypart)//"*"// &
!                    trim(zpart))
!                 else
!                    stdout.text( &
!                    "   esfs("// &
!                    trim(e.to_str)// &
!                    ","// &
!                    trim(f.to_str)// &
!                    ") = sum("// &
!                    "Ixy*"// &
!                    trim(zpart))
!                 end
!              end
!           end
!        end
!     end
!     ENSURE(i==n,"inconsistent final index")
!   end

end
