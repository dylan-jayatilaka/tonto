!-------------------------------------------------------------------------------
!
! SHELL1PAIR : pair of gaussian SHELL1's, incorporating stored intermediate data
! valuable for integral evaluation.
!
! Copyright (C) Dylan Jayatilaka, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module SHELL1PAIR

   implicit none

contains

!  ==================
!  Allocation methods
!  ==================

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object. This version does not set defaults.
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object
   end
 
   nullify_ptr_part ::: pure
   ! Nullify the pointer parts of self
      self :: INOUT

      .a.nullify_ptr_part
      .b.nullify_ptr_part
      nullify(.exponent_sum)
      nullify(.exponent_inv)
      nullify(.contraction_prefactor)
      nullify(.contraction_s_prefactor)
      nullify(.contraction_p_prefactor)
      nullify(.pair_center)

   end
 
   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts of self
      self :: INOUT

      .a.destroy_ptr_part
      .b.destroy_ptr_part
      .exponent_sum.destroy
      .exponent_inv.destroy
      .contraction_prefactor.destroy
      .contraction_s_prefactor.destroy
      .contraction_p_prefactor.destroy
      .pair_center.destroy

   end

!  ============
!  Copy methods
!  ============
 
   create_copy(ab) ::: leaky
   ! Create a copy of the "ab" shellpair
      self :: PTR
      ab :: SHELL1PAIR, IN
      .create
      .copy(ab)
   end
 
   copy(ab) ::: leaky
   ! Copy the using shellpair "ab" and also set precalculated data.
   ! NOTE : ensure the ptr parts have been destroyed beforehand.
      ab :: SHELL1PAIR, IN

      self = ab

      .nullify_ptr_part

      .a.copy(ab.a)
      .b.copy(ab.b)

      if (ab.exponent_sum.associated)            .exponent_sum.create_copy(ab.exponent_sum)
      if (ab.exponent_inv.associated)            .exponent_inv.create_copy(ab.exponent_inv)
      if (ab.contraction_prefactor.associated)   .contraction_prefactor.create_copy(ab.contraction_prefactor)
      if (ab.contraction_s_prefactor.associated) .contraction_s_prefactor.create_copy(ab.contraction_s_prefactor)
      if (ab.contraction_p_prefactor.associated) .contraction_p_prefactor.create_copy(ab.contraction_p_prefactor)
      if (ab.pair_center.associated)             .pair_center.create_copy(ab.pair_center)

   end
 
   copy_a(shell_a) ::: leaky
   ! Copy the "a" shell1 of the shell2 objects from "shell_a"
      shell_a :: SHELL1, IN
      .a.copy(shell_a)
   end
 
   copy_b(shell_b) ::: leaky
   ! Copy the "b" shell1 of the shell2 objects from "shell_b"
      shell_b :: SHELL1, IN
      .b.copy(shell_b)
   end
 
   copy_a(shell_a) ::: leaky
   ! Copy the "a" shell of the shell2 objects from "shell_a"
      shell_a :: SHELL, IN
      .a.copy(shell_a)
   end
 
   copy_b(shell_b) ::: leaky
   ! Copy the "b" shell of the shell2 objects from "shell_b"
      shell_b :: SHELL, IN
      .b.copy(shell_b)
   end

!  ============
!  Precalculate
!  ============
 
   unnormalise ::: PURE
   ! Unnormalise each shell
      self :: INOUT

      .a.unnormalise
      .b.unnormalise

   end
 
   make_precalculated_data ::: leaky, PURE
   ! Precalculate some data for the 1/r_{12} electron repulsion integrals
      self :: INOUT

      a_cc,b_cc,p_cc,a,b,ab_sum,ab_inv,cc_prefac :: REAL
      ag,bg,i :: INT

      .l_max = max(.a.l,.b.l)
      .l_min = min(.a.l,.b.l)
      .l_sum = .a.l + .b.l

      .first_gaussian = GAUSSIAN_DATA:n_comp_up_to(.l_max-1) + 1
      .last_gaussian  = GAUSSIAN_DATA:n_comp_up_to(.l_sum)
      .n_gaussian = .last_gaussian - .first_gaussian + 1

      .n_gaussian_pairs = .a.n_cc*.b.n_cc

      .exponent_sum.create(.n_gaussian_pairs)
      .exponent_inv.create(.n_gaussian_pairs)
      .contraction_prefactor.create(.n_gaussian_pairs)
      .pair_center.create(3,.n_gaussian_pairs)

      i  = 0

      do bg = 1,.b.n_cc

         b    = .b.exponent(bg)
         b_cc = .b.contraction(bg)

         do ag = 1,.a.n_cc

            a         = .a.exponent(ag)
            a_cc      = .a.contraction(ag)

            ab_sum    = a + b
            ab_inv    = ONE/ab_sum
            p_cc      = b_cc*a_cc
            cc_prefac = p_cc*ab_inv*sqrt(ab_inv) ! *exp(-a*b*ab_inv)

         !  if (cc_prefac<pair_cutoff) cycle

            i = i + 1
            .exponent_sum(i)          = ab_sum
            .exponent_inv(i)          = ab_inv
            .contraction_prefactor(i) = cc_prefac
            .pair_center(:,i)         = (a*.a.position + b*.b.position)*ab_inv

         end

      end

      .n_comp_pairs = .a.n_comp*.b.n_comp
      .n_sph_pairs  = .a.n_sph*.b.n_sph
      .n_bf_pairs   = .a.n_bf*.b.n_bf

   end

!  ====
!  Dump
!  ====

   do_dump ::: private
   ! Dump object data as text

      .a.dump("a")
      .b.dump("b")

      stdout.dump("n_gaussian_pairs",.n_gaussian_pairs)
      stdout.dump("n_comp_pairs",.n_comp_pairs)
      stdout.dump("n_sph_pairs",.n_sph_pairs)
      stdout.dump("n_bf_pairs",.n_bf_pairs)
      stdout.dump("l_max",.l_max)
      stdout.dump("l_min",.l_min)
      stdout.dump("l_sum",.l_sum)
      stdout.dump("first_gaussian",.first_gaussian)
      stdout.dump("last_gaussian",.last_gaussian)
      stdout.dump("n_gaussian",.n_gaussian)
      stdout.dmpp("exponent_sum",.exponent_sum)
      stdout.dmpp("exponent_inv",.exponent_inv)
      stdout.dmpp("contraction_prefactor",.contraction_prefactor)
      stdout.dmpp("contraction_s_prefactor",.contraction_s_prefactor)
      stdout.dmpp("contraction_p_prefactor",.contraction_p_prefactor)
      stdout.dmpp("pair_center",.pair_center)

   end

   dump(object_name,ptr) ::: get_from(OBJECT, TYPE?=>SHELL1PAIR)
   ! Dump object data as text
   end

   dmpp(object_name) ::: get_from(OBJECT, TYPE?=>SHELL1PAIR)
   ! Dump pointer object data as text
   end

!  ======
!  Output
!  ======

   put
   ! Put the shell information to "stdout"

      table :: VEC{TABLE_COLUMN}*

      ! Title
      stdout.flush
      stdout.flush
      stdout.text("===================")
      stdout.text("Gaussian SHELL1PAIR")
      stdout.text("===================")
      stdout.flush
      stdout.show("No. of primitive pair-products    =",.n_gaussian_pairs)
      stdout.show("No. of contracted cartesian pairs =",.n_comp_pairs)
      stdout.show("No. of contracted spherical pairs =",.n_comp_pairs)
      stdout.show("No. of basis fn. product-pairs    =",.n_bf_pairs)
      stdout.show("l_max, max of angular momenta     =",.l_max)
      stdout.show("l_min, min of angular momenta     =",.l_min)
      stdout.show("l_sum, sum of angular momenta     =",.l_max)
      stdout.show("Start index for l_max-type shell  =",.first_gaussian)
      stdout.show("End   index for l_sum-type shell  =",.last_gaussian)
      stdout.show("No. of source gaussian integrals  =",.n_gaussian)
      stdout.flush

      if (.exponent_sum.disassociated) return
      if (.exponent_inv.disassociated) return
      if (.contraction_prefactor.disassociated) return
      if (.pair_center.disassociated) return

      ! Table headings
      table.create(6)
      table(1).set_heading("Exponent")
      table(1).set_subhead("sum")
      table(2).set_heading("Exponent")
      table(2).set_subhead(" inverse")
      table(3).set_heading("Contraction")
      table(3).set_subhead(" prefactor")
      table(4).set_heading("Primitive")
      table(4).set_subhead("x/au")
      table(5).set_heading("pair")
      table(5).set_subhead("y/au")
      table(6).set_heading("center")
      table(6).set_subhead("z/au")

      ! Set table column data
      table(1).set_values(.exponent_sum)
      table(2).set_values(.exponent_inv)
      table(3).set_values(.contraction_prefactor)
      table(4).set_values(.pair_center(1,:))
      table(5).set_values(.pair_center(2,:))
      table(6).set_values(.pair_center(3,:))

      ! Make the table
      table.put

      ! Clean
      table.destroy

   end

end
