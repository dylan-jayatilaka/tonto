!---------------------------------------------------------------------------
!
!  VEC{VEC_{REAL}} : a matrix where each column is a different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{VEC_{REAL}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Create space for object
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Create space for a vector of vectors
   end

   create(dim,bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Create space for a vector of vectors
   end

   create(bounds1,bounds2) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Create space for a vector of vectors
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the pointer parts
   end

   create_vec(bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the pointer parts
   end

   destroy ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Destroy space for object
   end

   nullify_ptr_part ::: get_from(VEC{VEC_{INTRINSIC}}), pure
   ! Nullify the pointer parts
   end

   destroy_ptr_part ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Destroy the pointer parts
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   max_element_dim result (res) ::: get_from(VEC{VEC_{INTRINSIC}}), pure
   ! Return the maximum element dimension
   end

!  ====
!  Copy
!  ====

   create_copy(vec) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Create a replica copy of "vec".
   end

   copy(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Make a copy of "v".
   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Shrinks self to dimension "dim". Contents are retained.
   end

   expand(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to dimension "dim". Contents are retained.
   ! NOTE: pointer assignment is used to retain contents.
   ! NOTE: Elements which are added are nullified.
   end

   append(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
   end

   append_fifo(value,length) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self and insert "value"; if equal to "length", push the
   ! first/oldest vectors down/up the list
   end

   append_listed_to(res,list) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
   end

!   unflatten(vec_mat) ::: PURE
!   ! unflatten the vectors of a vector of vectors into matrices
!   ! meant for singlet contraction_wfs at present
!     self :: IN
!     vec_mat :: VEC{MAT_{REAL}}, INOUT
!
!     n,o,p,dim1,dim :: INT
!     counter :: INT
!
!     dim  = self(1).element.dim
!     dim1 = int(dsqrt(2*dim+0.25d0)-0.5d0)
!
!     do n = 1,.dim
!
!       counter = 0
!       do o = 1, dim1
!          counter=counter+1
!          vec_mat(n).element(o,o) = self(n).element(counter)
!       end
!
!       do o = 1, dim1
!       do p = 1,o-1
!          counter = counter + 1
!          vec_mat(n).element(o,p) = self(n).element(counter)
!          vec_mat(n).element(p,o) = self(n).element(counter)
!       end
!       end
!
!     end
!
!   end

!  =============
!  Miscellaneous
!  =============

!   make_R_multipoles(qc,qs,charges,points,l_max) ::: selfless, leaky
!   ! Make the scaled regular solid harmonic multipole moments "qc" and "qs" for
!   ! a given set of "charges" located at a set of "points", up to a maximum
!   ! angular momentum "l_max".  Reference: the book by Helgaker, Olsen, and
!   ! Simons, p. 414. NOTE: "qc" and "qs" are created.
!      qc,qs :: VEC{VEC_{REAL}}*
!      charges :: VEC{REAL}
!      points :: MAT{REAL}
!      l_max :: INT
!
!   ENSURE(charges.dim==points.dim1,"inconsistent charges and points arrays")
!   ENSURE(points.dim2==3,"wrong 2nd dimension, points arrays")
!   ENSURE(l_max>=0,"l_max must be non-negative")
!
!      Rc,Rs :: VEC{VEC_{VEC_{REAL}}}*
!      cv,sv :: VEC{REAL}*
!      c,s,q :: REAL
!      L,M,n,i :: INT
!
!      n = charges.dim
!
!      qc.create(0,l_max)
!      qs.create(0,l_max)
!
!      VEC{REAL}:make_R_harmonics(Rc,Rs,points,l_max)
!
!      do L = 0,l_max
!
!         qc(L).element.create(0,L)
!         qs(L).element.create(0,L)
!
!         do M = 0,L
!
!            cv => Rc(L).element(M).element
!            sv => Rs(L).element(M).element
!
!            c = ZERO
!            s = ZERO
!
!            do i = 1,n
!               q = charges(i)
!               c = c + q*cv(i)
!               s = s + q*sv(i)
!            end
!
!            qc(L).element(M) = c
!            qs(L).element(M) = s
!
!         end
!
!      end
!
!      ! Clean
!      do L = 0,l_max
!         do M = -L,L
!            deallocate(Rs(L)[M].element)
!            deallocate(Rc(L)[M].element)
!         end
!         deallocate(Rs(L).element)
!         deallocate(Rc(L).element)
!      end
!      deallocate(Rs)
!      deallocate(Rc)
!
!   end

   schmidt_orthonormalise(S,scales,n_dependent)
   ! Schmidt orthonormalise the vectors in "self" using "S" as the
   ! metric. "scales" is set to the
   ! normalisation factors used to normalise each column after the Schmidt
   ! procedure. Only those vectors with norm more than the linear dependence
   ! tolerance are orthonormalised. the others are counted (n_dependent) 
   ! and normalised if the norm is not initially below a certain threshold. 
     self :: target
     S :: MAT{REAL}, IN 
     scales :: VEC{REAL}, OUT
     n_dependent :: INT, OUT

   ENSURE(NOT S.is_zero,"S is zero matrix")

     old,new :: VEC{REAL}*
     keep :: VEC{REAL}*
     skip :: VEC{BIN}*
     fac :: REAL
     tol :: REAL
     n,o,dim :: INT
     norm :: REAL

     n_dependent = 0
     tol = dsqrt(MAT_LINEAR_DEPENDENCE_TOL)
     dim = self(1).element.dim

     keep.create(dim)
     skip.create(1,.dim)
     skip = FALSE

     ! Eliminate function with small norms
     do n = 1,.dim
       new => self(n).element
       norm = S.dot(new,new)
       if(norm < dsqrt(tol)) then
         n_dependent=n_dependent+1
         skip(n)=TRUE
         scales(n)=norm
       end
     end

     do n = 1,.dim

        if(skip(n)) cycle

        new => self(n).element
        keep = new
        norm = S.dot(new,new)

        ! Orthogonalisation
        do o = 1,n-1
           if(skip(o)) cycle
           old => self(o).element
           fac = S.dot(old,new)
           new = new - fac*old
           norm = norm - fac*fac
        end
        scales(n) = norm

        ! Normalisation of the orthogonalised vector
     !  if(norm>MAT_LINEAR_DEPENDENCE_TOL) then
        if(norm>tol) then
          norm = dsqrt(norm)
          new = new/norm
        else
          n_dependent=n_dependent+1
          new=keep
          skip(n) = TRUE
        end

     end

     ! Clean
     nullify(new)
     nullify(old)
     keep.destroy
     skip.destroy

   end

end
