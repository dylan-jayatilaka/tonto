!---------------------------------------------------------------------------
!
! OBJECT: Generic object operations ...
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module OBJECT

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

!  =================
!  Memory allocation
!  =================

   create ::: leaky, PURE
   ! Allocate an object
      self :: allocatable, OUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self,stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self)
#endif

   end

   create ::: leaky, PURE
   ! Allocate an object and set defaults
      self :: allocatable, OUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self,stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self)
#endif

      .set_defaults

   end

   destroy ::: leaky, PURE
   ! Deallocate "self"
      self :: allocatable, INOUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      if (NOT allocated(self)) return

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      deallocate(self)
#endif

   end

! Old

   create ::: leaky
   ! Create an object
      self :: PTR

      status :: INT

      nullify(self)
      allocate(self,stat=status)

      ENSURE(status==0,"error in allocating memory")
      status = status
      status = 0

      .:nullify_ptr_part
      .:set_defaults

   end

   create ::: leaky
   ! Create an object. This version does not set defaults.
      self :: PTR

      status :: INT

      nullify(self)
      allocate(self,stat=status)

      ENSURE(status==0,"error in allocating memory")
      status = status
      status = 0

      .:nullify_ptr_part

   end

   create ::: leaky
   ! Create an object. This version does not nullify point parts.
      self :: PTR

      status :: INT

      nullify(self)
      allocate(self,stat=status)

      ENSURE(status==0,"error in allocating memory")
      status = status
      status = 0

      .:set_defaults

   end

   create ::: leaky
   ! Create an object. This does not nullify point parts or set
   ! defaults.
      self :: PTR

      status :: INT

      nullify(self)
      allocate(self,stat=status)

      ENSURE(status==0,"error in allocating memory")
      status = status
      status = 0

   end


   create_copy(object) ::: leaky
   ! Create a copy of object
      self :: PTR
      object :: OBJECT, IN

      .:create
      .:copy(object)

   end

   create_minimal_copy(object) ::: leaky
   ! Create a minimal copy of "object".
      self :: PTR
      object :: OBJECT, IN

      .:create
      .:minimal_copy(object)

   end


   destroy ::: leaky
   ! Destroy an object
      self :: PTR

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      if (.:destroyed) return

      .:destroy_ptr_part

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      deallocate(self)
#endif

   end

   destroy ::: leaky
   ! Destroy an object. This version does not destroy pointer parts.
      self :: PTR

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      if (.:destroyed) return

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      deallocate(self)
#endif

   end


   created result (res) ::: inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
      result = associated(self)
   end

   destroyed result (res) ::: inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
      result = NOT associated(self)
   end

!  ==========
!  Saved self
!  ==========

   set_saved_self 
   ! Set saved_self
      self :: PTR

      saved_self => self

   end

   set_saved_self 
   ! Set saved_self. This version has self a target.
      self :: target

      saved_self => self

   end

   set_from_saved_self
   ! Set from saved_self
      self :: PTR

      self => saved_self

   end

!  ============
!  Set routines
!  ============

   set(object) ::: pure
   ! Set the object. Pointer parts are assigned not copied.
      self   :: OUT
      object :: OBJECT, IN

      self = object

   end

   set(val) ::: pure
   ! Generic set
      self :: INOUT
      val  :: VAL?, IN

      ARG? = val

   end

!  ============
!  I/O routines
!  ============

   redirect ::: leaky
   ! Redirect input
      self :: PTR

      filename :: STR

      if (FALSE) self = self

      filename = stdin.next_str

      stdin.redirect(trim(filename))

   end

   revert ::: leaky
   ! Revert back to previous stdin file
      self :: PTR

      if (FALSE) self = self

      stdin.revert

   end

   redirect ::: leaky
   ! Redirect input. (This code is for non-pointer self objects).

      filename :: STR

      if (FALSE) self = self

      filename = stdin.next_str

      stdin.redirect(trim(filename))

   end

   revert ::: leaky
   ! Revert back to previous stdin file. (This code is for non-pointer self
   ! objects).

      if (FALSE) self = self

      stdin.revert

   end

   read_keywords ::: recursive, leaky
   ! Read data from "stdin" using keyword style input.
      self :: INOUT

   ENSURE(stdin.next_item=="{","expecting open bracket symbol, {")

      word :: STR

      ! Read the open braces {
      stdin.read(word)

      ! Echo keyword if requested
      if (tonto.keyword_echo) then
         stdout.flush
         stdout.text("keyword found --> " // trim(word))
      end

      do ! Loop over input keywords

         ! Read the keyword
         stdin.read(word)
         DIE_IF(stdin.reverted,"unexpected end of file while reading list keywords")
         word.to_lower_case

         ! Append any lonely = sign
         if (NOT stdin.buffer_exhausted) then 
         if (stdin.next_item=="=") then 
            stdin.skip_next_item
            word = trim(word) // "="
         end
         end

         ! Echo keyword if requested
         if (tonto.keyword_echo) then
            stdout.flush
            stdout.text("keyword found --> " // trim(word))
         end

         ! Exit if keyword is closing brace }
         if (word=="}")      exit

         ! Process the keyword 
         .:process_keyword(word)

      end

   end

   read_keywords ::: recursive, leaky
   ! Read data from "stdin" using keyword style input.
      self :: PTR

   ENSURE(stdin.next_item=="{","expecting open bracket symbol, {")

      word :: STR

      ! Read the open braces {
      stdin.read(word)


      ! Echo keyword if requested
      if (tonto.keyword_echo) then
         stdout.flush
         stdout.text("keyword found --> " // trim(word))
      end

      do ! Loop over input keywords

         ! Read the keyword
         stdin.read(word)
         DIE_IF(stdin.reverted,"unexpected end of file while reading list keywords")
         word.to_lower_case

         ! Append any lonely = sign
         if (NOT stdin.buffer_exhausted) then 
         if (stdin.next_item=="=") then ! assume this is an attached = sign
            stdin.skip_next_item
            word = trim(word) // "="
         end
         end

         ! Echo keyword if requested
         if (tonto.keyword_echo) then
            stdout.flush
            stdout.text("keyword found --> " // trim(word))
         end

         ! Exit if keyword is closing brace }
         if (word=="}")      exit

         ! Process the keyword 
         .:process_keyword(word)

      end

   end

   read_units
   ! Read a string which describes the units to be used

      if (FALSE) self = self

      stdin.set_default_units(stdin.next_str)

   end

   read_junk
   ! Read in a junk string, useful for ignoring a field

      if (FALSE) self = self

      stdin.skip_next_item

   end

   read_and_set
   ! Generic read and set
      val :: VAL?

      stdin.read(val)

      SET?(val)

   end

   read_and_set
   ! Generic read and set a quantity with units
      val :: VAL?

      stdin.read_quantity(val)

      SET?(val)

   end

!  ==========================
!  Input key related routines
!  ==========================

   read_keys ::: leaky
   ! Read the "keys".
      if (FALSE) self = self

      keys.destroy
      stdin.read_ptr(keys)

   end

   process_keys ::: leaky
   ! Process each of the words in the "keys" list.
   ENSURE(keys.associated,"no keys")

      k,l,n_key :: INT
      keyword :: STR
      keyword_echo :: BIN
      internal :: VEC{STR}*

      ! The number of keys
      n_key = keys.dim

      ! Keyword counter
      k = 0

      do ! Loop over keywords in "keys"

         ! Get the next keyword
         k = k + 1
         keyword = keys(k)

         ! Exit if close brace
         if (keyword=="}") exit

         if (keyword=="{") then ! embedded keyword

            ! Turn off keyword echo
            keyword_echo = tonto.keyword_echo
            tonto.keyword_echo = FALSE

            ! Find closing brace of embedded section
            l = keys(k:).index_of_matching_bracket("{")
            DIE_IF(l==0,"no matching closing brace in embedded keyword")

            ! Set internal array
            internal => keys(k:k+l-1)

            ! Process internalized keywords
            stdin.redirect(internal)
            .:read_keywords
            stdin.revert

            ! Reset key counter
            k = k + l - 1

            ! Reset keyword echo
            tonto.keyword_echo = keyword_echo

         else ! plain-old keyword

            ! Process plain-old keyword
            .:process_keyword(keyword)

         end

         ! Exit if no keys left
         if (k==n_key) exit

      end

   end

   keys_created result (res)
   ! Return TRUE if the list-element keys are created.
      res :: BIN

      if (FALSE) self = self

      res = keys.associated
      if (res) res = keys.dim>0

   end

   set_keys(the_keys) ::: leaky
   ! This is for setting the "keys" externally.
      the_keys :: VEC{STR}

      if (FALSE) self = self

      keys.destroy
      keys.create_copy(the_keys)

   end

   clear_keys ::: leaky
   ! This is for destroying the "keys" externally.

      if (FALSE) self = self

      keys.destroy
      keys.create(0)

   end

!  ======
!  Output
!  ======

   dump(object_name,ptr) 
   ! Dump object data as text
      object_name :: STR
      ptr :: BIN, optional

      is_ptr :: BIN

      is_ptr = FALSE
      if (present(ptr)) is_ptr = ptr

      if (is_ptr) then; stdout.text(trim(object_name)//":TYPE?* = { ")
      else;             stdout.text(trim(object_name)//":TYPE? = { ")
      end

      stdout.increment_margin_width(1)

      .do_dump

      stdout.increment_margin_width(-1)

      stdout.text("}")

   end

   dmpp(object_name)
   ! Dump pointer object data as text
      self :: PTR
      object_name :: STR, IN

      if (.disassociated) then

         stdout.text(trim(object_name)//":TYPE* = null")

      else

         .dump(trim(object_name),ptr=TRUE)

      end

   end

end
