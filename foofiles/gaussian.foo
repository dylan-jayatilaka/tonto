!-------------------------------------------------------------------------------
!
! For describing a single gaussian function :: GAUSSIAN.
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: gaussian.foo 3754 2012-06-12 12:37:56Z dylan_ $
!-------------------------------------------------------------------------------

module GAUSSIAN

   implicit none

contains

   create ::: get_from(OBJECT), leaky
   ! Create an object. This version does not nullify point parts.
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object. This version does not destroy pointer parts.
   end

   create_copy(G) ::: leaky
   ! Create a copy of "G"
      self :: PTR
       G :: GAUSSIAN
      .create
      .copy(G)
   end

   copy(G)
   ! Set the gaussian to "G"
      G :: GAUSSIAN
      self = G
   end

   set_defaults ::: pure
   ! Set defaults
      self :: INOUT

      .l = 0
      .n_sph = 0
      .exponent = ZERO
      .position = ZERO
      .first_gaussian = 0
      .last_gaussian = 0

   end

   set(G) ::: pure
   ! Set the gaussian to "G"
      self :: INOUT
      G :: GAUSSIAN, IN

      .set_l(G.l)
      .set_exponent(G.exponent)
      .set_position(G.position)

   end

   set(l,pos,ex) ::: pure
   ! Set the gaussian to "G"
      self :: INOUT
      l :: INT, IN
      pos :: VEC{REAL}(3), IN
      ex  :: REAL, IN

      .set_l(l)
      .set_position(pos)
      .set_exponent(ex)

   end

   set_l(l) ::: pure
   ! Set the l value
      self :: INOUT
      l :: INT, IN

      .l      = l
      .n_sph  = GAUSSIAN_DATA:n_sph(.l) 
      .n_comp = GAUSSIAN_DATA:n_comp(.l)

      .first_gaussian = GAUSSIAN_DATA:n_comp_up_to(l-1) + 1
      .last_gaussian  = .first_gaussian + .n_comp - 1

   end

   set_position(pos) ::: pure
   ! Set the position
      self :: INOUT
      pos :: VEC{REAL}(3), IN

      .position = pos

   end

   set_exponent(ex) ::: pure
   ! Set a gaussian object
      self :: INOUT
      ex :: REAL, IN

      .exponent = ex

   end

   l_chr result (res) ::: PURE
   ! Return a character representation for the angular mtm
      self :: IN
      res :: STR(len=1)

      l :: INT

      l = .l
      select case (l)
      case (0); res="s"
      case (1); res="p"
      case (2); res="d"
      case (3); res="f"
      case (4); res="g"
      case default;
         ENSURE(l<=23,"angular momentum too large:"// trim(l.to_str))
         res = achar(l-4+iachar("g"))
      end

   end

!  ==============
!  Output methods
!  ==============

   put
   ! Put the gaussian information to file "stdout"
      stdout.show("l        =",.l)
      stdout.show("l symbol =",.l_chr)
      stdout.show("pos      =",.position)
      stdout.show("exponent =",.exponent)
      stdout.show("n_sph    =",.n_sph)
      stdout.show("n_comp   =",.n_comp)
   end

!  =============
!  Input methods
!  =============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
         case ("}        ");   ! exit case
         case ("exponent=");   .read_exponent
         case ("l=       ");   .read_l
         case ("l_chr=   ");   .read_l_chr
         case ("l_int=   ");   .read_l_int
         case ("position=");   .read_position
         case ("put      ");   .put
         case default;      UNKNOWN(word)
      end
   end

   read_l
   ! Read in the l symbol
      word :: STR
      stdin.read(word)
      stdin.move_to_previous_item
      if (word.is_int) then; .read_l_int
      else;                  .read_l_chr
      end
   end

   read_l_int
   ! Read in the l integer
      word :: STR
      stdin.read(word)
      ENSURE(word.is_int,"expecting an integer for L")
      .set_l(word.to_int)
   end

   read_l_chr
   ! Read in the l symbol
      word :: STR
      l_c :: STR(len=1)
      l :: INT

      stdin.read(word)
      DIE_IF(len_trim(word)/=1,"unknown L symbol")

      l_c = word(1:1)
      l_c.to_lower_case

      l = 0
      select case (l_c)
         case ("s"); l = 0
         case ("p"); l = 1
         case ("d"); l = 2
         case ("f"); l = 3
         case ("g"); l = 4
         case default;
            DIE_IF(l_c<"g","unknown angular momentum character: "//l_c)
            l = 4 + iachar(l_c)-iachar("g")
      end

      .set_l(l)

   end

   read_exponent
   ! Read in the exponents
      stdin.read(.exponent)
   end

   read_position
   ! Read in the position
      stdin.read_quantity(.position)
   end

! =====================
! Miscellaneous methods
! =====================

   normalisation_factor result (res) 
   ! Return the normaliston factor assuming it is x^l
      res :: REAL
      res = PI**(-HALF-QUARTER) * TWO**(real(.l,kind=REAL_KIND)+HALF+QUARTER) * &
            .exponent**(HALF*.l+HALF+QUARTER) * (ONE/(sqrt(.l.double_factorial)))
   end

   same_as(G) result (same)
   ! Return TRUE if the gaussian "self" is the same as "G".
      G :: GAUSSIAN
      same :: BIN
      same = .l           == G.l           &
         AND .exponent    == G.exponent    &
         AND .position(1) == G.position(1) &
         AND .position(2) == G.position(2) &
         AND .position(3) == G.position(3) 
   end

   make_grid(g,pt)
   ! Return "g(i,n)", the value of the gaussian component "n" on grid point "i"
   ! given a set of grid points "pt(i,1:3)"
      pt :: MAT{REAL}, target
       g :: MAT{REAL}
   ENSURE(g.dim2==.n_comp,"incorrectly dimensioned")
      x,y,z :: VEC{REAL}*
      x => pt(:,1); y => pt(:,2); z => pt(:,3)
      .make_grid(g,x,y,z)
   end

   make_grid(g,x,y,z)
   ! Return "g(i,n)", the value of the gaussian component "n" on grid point "i"
   ! given a set of grid points "(x(i),y(i),z(i))"
      x,y,z :: VEC{REAL}
      g :: MAT{REAL}
   ENSURE(g.dim2==.n_comp,"incorrectly dimensioned")
      lx,ly,lz :: VEC{INT}*
      n_pt,n,b,j, f,l :: INT
      rr,xx,yy,zz,posx,posy,posz,g0,gbn :: REAL
      n_pt = size(x)
      posx = .position(1); posy = .position(2); posz = .position(3)
      select case (.l)
        case (0)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz
             g(n,1) = exp( -rr * .exponent )
          end
        case (1)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz
             g0 = exp( -rr * .exponent )
             g(n,1) = xx*g0
             g(n,2) = yy*g0
             g(n,3) = zz*g0
          end
        case (2)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz
             g0 = exp( -rr * .exponent )
             g(n,1) = xx*xx*g0
             g(n,2) = yy*yy*g0
             g(n,3) = zz*zz*g0
             g(n,4) = xx*yy*g0
             g(n,5) = xx*zz*g0
             g(n,6) = yy*zz*g0
          end
        case default
          GAUSSIAN_DATA:set_indices(.l)     ! Make sure indices are there
          f = .first_gaussian; l = .last_gaussian
          lx => GAUSSIAN_DATA::px(f:l)
          ly => GAUSSIAN_DATA::py(f:l)
          lz => GAUSSIAN_DATA::pz(f:l)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz    ! Do exponential part of the gaussian
             g0 = exp( -rr * .exponent )
             do b = 1,.n_comp              ! Loop over all basis functions
                gbn = g0                   ! Combine exponential and cartesian
                do j = 1,lx(b)             ! power of the x^j part
                   gbn = xx*gbn
                end
                do j = 1,ly(b)
                   gbn = yy*gbn
                end
                do j = 1,lz(b)
                   gbn = zz*gbn
                end
                g(n,b) = gbn
             end
          end
      end
   end

end
