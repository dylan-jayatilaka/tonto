!-------------------------------------------------------------------------------
!
!  POINTGROUP : for deriving and manipulating pointgroup objects
!
!  Input required is the Schonflies symbol. The data generated are
!  The 3x3 rotation matrices, all the irreducible representations,
!  The character table, the irreducible representation lables,
!  the group multiplication table, and the list of inverse operators
!
! Copyright (C) 1994-1997, Anthony J. Russell
! Copyright (C) 1998, Dylan Jayatilaka
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module POINTGROUP

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Create an object. This version does not set defaults.
   end

   create(symbol,use_spherical_basis) ::: leaky
   ! Create a pointgroup object, optionally with Schoenflies "symbol"
      self :: PTR
      symbol :: STR, IN
      use_spherical_basis :: BIN, optional, IN

      .create
      .set_symbol(symbol)
      if (present(use_spherical_basis)) .use_spherical_basis = use_spherical_basis

      .analyze

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object
   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts of the object
      self :: INOUT

      nullify(.table)
      nullify(.mat)
      nullify(.inverse)
      nullify(.irrep)

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts of the object
      self :: INOUT

      .table.destroy
      .mat.destroy
      .inverse.destroy
      .irrep.destroy

   end

!  ====
!  Copy
!  ====

   create_copy(pg)
   ! Copy the pointgroup "pg"
      self :: PTR
      pg :: POINTGROUP
      .create
      .copy(pg)
   end

   copy(pg) ::: leaky
   ! Copy the pointgroup "pg"
      pg :: POINTGROUP
      self = pg
      .nullify_ptr_part
      if (pg.table.associated)   .table.create_copy(pg.table)
      if (pg.mat.associated)     .mat.create_copy(pg.mat)
      if (pg.inverse.associated) .inverse.create_copy(pg.inverse)
      if (pg.irrep.associated)   .irrep.create_copy(pg.irrep)
   end

!  ===========
!  Set methods
!  ===========

   set_defaults
   ! Set the default pointgroup, "C1"
      self :: INOUT

      .set_symbol("C1")
      .use_spherical_basis = FALSE

      .analyze

   end

   set_symbol(symbol) ::: pure
   ! Set the pointgroup Schonflies symbol
      self :: INOUT
      symbol :: STR, IN

      .symbol    = symbol
      .ID_symbol = symbol
      .ID_symbol.to_lower_case

   end

!  =============
!  Input methods
!  =============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
         case ("}                  ")  ! exit case
         case ("put                "); .put
         case ("schoenflies_symbol="); .read_symbol
         case ("schonflies_symbol= "); .read_symbol
         case ("symbol=            "); .read_symbol
         case default;               UNKNOWN(word)
      end
   end

   read_symbol
   ! Read the pointgroup Schonflies symbol
      self :: INOUT

      stdin.read(.symbol)
      .ID_symbol = .symbol

      select case (.symbol)
      case("c1   ","cs   ","ci   ")
      case("c2   ","c3   ","c4   ","c5   ","c6   ","c7   ","c8   ","c9   ","c10  ","c11  ","c12  ")
      case("s2   ","s4   ","s6   ","s8   ","s10  ","s12  ")
      case("c2h  ","c3h  ","c4h  ","c5h  ","c6h  ","c7h  ","c8h  ","c9h  ","c10h ","c11h ","c12h ")
      case("c2v  ","c3v  ","c4v  ","c5v  ","c6v  ","c7v  ","c8v  ","c9v  ","c10v ","c11v ","c12v ")
      case("d2   ","d3   ","d4   ","d5   ","d6   ","d7   ","d8   ","d9   ","d10  ","d11  ","d12  ")
      case("d2h  ","d3h  ","d4h  ","d5h  ","d6h  ","d7h  ","d8h  ","d9h  ","d10h ","d11h ","d12h ")
      case("d2d  ","d3d  ","d4d  ","d5d  ","d6d  ","d7d  ","d8d  ","d9d  ","d10d ","d11d ","d12d ")
      case("cinfv","dinfh","t    ","th   ","td   ","o    ","oh   ","i    ","ih   ")
      case default;   UNKNOWN(.symbol)
      end

      .analyze

   end

   analyze ::: leaky, private
   ! Analyze the pointgroup
      self :: INOUT

      .analyze_symbol
      .make_rep_matrices
      .make_xyz_matrices
      .make_inverse
      .make_table
      .make_irrep_matrices
      .make_irrep_labels
      .make_character_table

   end

   analyze_symbol ::: private, PURE
   ! Analyze the pointgroup symbol
      self :: INOUT

      axis :: STR
      n :: INT
      temp_bin :: BIN

      select case (.ID_symbol)
      case ("c1");    .ID_number=1;  .ID_symbol="c1 "
      case ("cs");    .ID_number=2;  .ID_symbol="cs "
      case ("ci");    .ID_number=3;  .ID_symbol="ci "
      case ("c2 ","c3 ","c4 ","c5 ","c6 ","c7 ","c8 ","c9 ","c10 ","c11 ","c12 "); .ID_number=4;  .ID_symbol="cn "
      case ("s2 ","s4 ","s6 ","s8 ","s10","s12");                                  .ID_number=5;  .ID_symbol="s2n"
      case ("c2h","c3h","c4h","c5h","c6h","c7h","c8h","c9h","c10h","c11h","c12h"); .ID_number=6;  .ID_symbol="cnh"
      case ("c2v","c3v","c4v","c5v","c6v","c7v","c8v","c9v","c10v","c11v","c12v"); .ID_number=7;  .ID_symbol="cnv"
      case ("d2 ","d3 ","d4 ","d5 ","d6 ","d7 ","d8 ","d9 ","d10 ","d11 ","d12 "); .ID_number=8;  .ID_symbol="dn "
      case ("d2h","d3h","d4h","d5h","d6h","d7h","d8h","d9h","d10h","d11h","d12h"); .ID_number=9;  .ID_symbol="dnh"
      case ("d2d","d3d","d4d","d5d","d6d","d7d","d8d","d9d","d10d","d11d","d12d"); .ID_number=10; .ID_symbol="dnd"
      case ("cinfv"); .ID_number=11; .ID_symbol="cinf"
      case ("dinfh"); .ID_number=12; .ID_symbol="dinf"
      case ("t ");    .ID_number=13; .ID_symbol="t  "
      case ("th");    .ID_number=14; .ID_symbol="th "
      case ("td");    .ID_number=15; .ID_symbol="td "
      case ("o ");    .ID_number=16; .ID_symbol="o  "
      case ("oh");    .ID_number=17; .ID_symbol="oh "
      case ("i ");    .ID_number=18; .ID_symbol="i  "
      case ("ih");    .ID_number=19; .ID_symbol="ih "
      case default;   .ID_number=20
      end

      temp_bin = any(.ID_symbol==(/"i   ","ih  ","cinf","dinf"/))

      ENSURE(NOT temp_bin,"Group" // trim(.symbol) // "not implemented")
      ENSURE(NOT .ID_number==20,"Unknown group symbol: " // trim(.symbol))

      select case (.ID_number)
      case (1:3)
         .axis_order = 1
      case (4:10)
         axis = .symbol(2:)
         n = axis.verify("123456789")-1
         axis = axis(1:n)
         .axis_order = axis.to_int
         if (.ID_number==5) .axis_order = .axis_order/2
      case (13:15)
         .axis_order = 2
      case (16:17)
         .axis_order = 4
      end

      select case (.ID_symbol)
      case ("c1 "); .order = 1
      case ("cs "); .order = 2
      case ("ci "); .order = 2
      case ("cn "); .order =   .axis_order
      case ("s2n"); .order = 2*.axis_order
      case ("cnh"); .order = 2*.axis_order
      case ("cnv"); .order = 2*.axis_order
      case ("dn "); .order = 2*.axis_order
      case ("dnh"); .order = 4*.axis_order
      case ("dnd"); .order = 4*.axis_order
      case ("t  "); .order = 12
      case ("th "); .order = 24
      case ("td "); .order = 24
      case ("o  "); .order = 24
      case ("oh "); .order = 48
      end

   end

   make_rep_matrices ::: leaky, private, PURE
   ! Make the 3x3 point group representation matrices
      self :: INOUT

      n :: INT

      n = .axis_order

      .mat.create(3,3,.order)
      .mat(:,:,1).to_unit_matrix

      select case (.ID_symbol)

      case ("c1")                ! C1

      case ("cs")                
         ! Cs  = C1 x sigma-h
         .times_sigma_h(1)

      case ("ci")                
         ! Ci  = C1 x Ci
         .times_ci(1)

      case ("cn")                
         ! Cn
         .make_cn_matrices

      case ("s2n")               
         ! Sn
         .make_cn_matrices
         .make_sn_matrices(n)

      case ("cnh")               
         ! Cnh = Cn x sigma-h(xy)
         .make_cn_matrices
         .times_sigma_h(n)

      case ("cnv")               
         ! Cnv = Cn x sigma-v(xz)
         .make_cn_matrices
         .times_sigma_v(n)

      case ("dn")                
         ! Dn  = Cn  x C2(x)
         .make_cn_matrices
         .times_c2x(n)

      case ("dnh")               
         ! Dnh = Cn x sigma-h(xy) x C2(x)
         .make_cn_matrices
         .times_sigma_h(n)
         n = 2*n
         .times_c2x(n)

      case ("dnd")               
         ! Dnd = Cn x C2(x) x sigma-d
         .make_cn_matrices
         .times_c2x(n)
         n = 2*n
         .times_sigma_d(n)

      case ("t")                 
         ! T
         .make_t_matrices

      case ("th")                
         ! Th  = T x Ci
         .make_t_matrices
         .times_ci(12)

      case ("td")                
         ! Td  = T x sigma(x=y)
         .make_t_matrices
         .mat(:,1,13:24) = .mat(:,2,1:12)
         .mat(:,2,13:24) = .mat(:,1,1:12)
         .mat(:,3,13:24) = .mat(:,3,1:12)

      case ("o")                 
         ! O  = T x C4(z)
         .make_t_matrices
         .times_c4z(12)

      case ("oh")                
         ! Oh = T x C4(z) x Ci
         .make_t_matrices
         .times_c4z(12)
         .times_ci(24)

      end

   end

   times_ci(n) ::: private, PURE
   ! Direct product with inversion operator
      self :: INOUT
      n :: INT, IN

      .mat(1,:,n+1:n+n) = -.mat(1,:,1:n)
      .mat(2,:,n+1:n+n) = -.mat(2,:,1:n)
      .mat(3,:,n+1:n+n) = -.mat(3,:,1:n)

   end

   times_sigma_h(n) ::: private, PURE
   ! Direct product with sigma-h, which is the xy plane
      self :: INOUT
      n :: INT, IN

      .mat(1,:,n+1:n+n) =  .mat(1,:,1:n)
      .mat(2,:,n+1:n+n) =  .mat(2,:,1:n)
      .mat(3,:,n+1:n+n) = -.mat(3,:,1:n)

   end

   times_sigma_v(n) ::: private, PURE
   ! Direct product with sigma-v, which is the xz plane
      self :: INOUT
      n :: INT, IN

      .mat(1,:,n+1:n+n) =  .mat(1,:,1:n)
      .mat(2,:,n+1:n+n) = -.mat(2,:,1:n)
      .mat(3,:,n+1:n+n) =  .mat(3,:,1:n)

   end

   times_sigma_d(n) ::: private, PURE
   ! Direct product with sigma-d. Equation of sigma-d is sin(alph/4)*x-cos(alph/4)*y=0
      self :: INOUT
      n :: INT, IN

      beta,cosb,sinb :: REAL

      beta = PI/.axis_order
      cosb = cos(beta)
      sinb = sin(beta)

      .mat(1,:,n+1:n+n) = cosb*.mat(1,:,1:n) + sinb*.mat(2,:,1:n)
      .mat(2,:,n+1:n+n) = sinb*.mat(1,:,1:n) - cosb*.mat(2,:,1:n)
      .mat(3,:,n+1:n+n) = .mat(3,:,1:n)

   end

   times_c2x(n) ::: private, PURE
   ! Direct product with C2x, for Dn groups
      self :: INOUT
      n :: INT, IN

      .mat(1,:,n+1:n+n) =  .mat(1,:,1:n)
      .mat(2,:,n+1:n+n) = -.mat(2,:,1:n)
      .mat(3,:,n+1:n+n) = -.mat(3,:,1:n)

   end

   times_c4z(n) ::: private, PURE
   ! Direct product with the C4z matrix
      self :: INOUT
      n :: INT, IN

      .mat(:,1,n+1:n+n) = -.mat(:,2,1:n)
      .mat(:,2,n+1:n+n) =  .mat(:,1,1:n)
      .mat(:,3,n+1:n+n) =  .mat(:,3,1:n)

   end

   make_cn_matrices ::: private, PURE
   ! Make the Cn rotation matrices
      self :: INOUT

      alph,alpha,cosa,sina :: REAL
      n :: INT

      alph  = TWO*PI/.axis_order
      alpha = ZERO

      do n = 2, .axis_order

         alpha = alpha + alph
         cosa  = cos(alpha)
         sina  = sin(alpha)

         .mat(:,:,n) = reshape( [cosa,-sina, ZERO, sina, cosa, ZERO, ZERO, ZERO, ONE], [3,3] )

      end

   end

   make_sn_matrices(n) ::: private, PURE
   ! Make the Sn rotation matrices
      self :: INOUT
      n :: INT, IN

      beta,cosb,sinb :: REAL

      beta = PI/.axis_order
      cosb = cos(beta)
      sinb = sin(beta)

      .mat(1,:,n+1:n+n) =  cosb*.mat(1,:,1:n) + sinb*.mat(2,:,1:n)
      .mat(2,:,n+1:n+n) = -sinb*.mat(1,:,1:n) + cosb*.mat(2,:,1:n)
      .mat(3,:,n+1:n+n) = -.mat(3,:,1:n)

   end

   make_t_matrices ::: private, PURE
   ! Make the Tetrahedral group 3x3 representation matrices
      self :: INOUT

      n :: INT

      n = 1

      .mat(:,:,2) = reshape([  ONE, ZERO, ZERO, ZERO, -ONE, ZERO, ZERO, ZERO, -ONE], [3,3]) ! C2x
      .mat(:,:,3) = reshape([ -ONE, ZERO, ZERO, ZERO,  ONE, ZERO, ZERO, ZERO, -ONE], [3,3]) ! C2y
      .mat(:,:,4) = reshape([ -ONE, ZERO, ZERO, ZERO, -ONE, ZERO, ZERO, ZERO,  ONE], [3,3]) ! C2z

      do n = 5, 12
         .mat(:,1,n) = .mat(:,3,n-4)
         .mat(:,2,n) = .mat(:,1,n-4)
         .mat(:,3,n) = .mat(:,2,n-4)
      end

   end

   make_xyz_matrices ::: leaky, private, PURE
   ! Make the representation matrices for xyz products found in
   ! gaussian shells, i.e. work out matrix R, where the shell row vector
   ! p'(r) = p(S^{-1}r) = p(r)R, and S is the symop.
   ! WARNING: this routine is tied to an explicit ordering of the cartesian
   ! gaussian basis functions in a shell.
      self :: INOUT

      .ptr = .mat
      .dtr = GAUSSIAN_DATA:d_xyz_rep_matrices_for(.mat,.use_spherical_basis)
      .ftr = GAUSSIAN_DATA:f_xyz_rep_matrices_for(.mat,.use_spherical_basis)
      .gtr = GAUSSIAN_DATA:g_xyz_rep_matrices_for(.mat,.use_spherical_basis)

   end

   xyz_matrix(n,l) result (res) ::: PURE
   ! Return the "n"-th representation matrix for xyz product found in
   ! a gaussian shell of angular momentum "l"
      self :: IN
      n,l :: INT, IN
      res :: MAT{REAL}@

   ENSURE(l>=0,"l must be non-negative")
   ENSURE(l<5, "l must be less than 5 (no h functions or higher)")

      select case (l)
      case(0); res = .irrep(1).mat(:,:,n)
      case(1); res = .ptr(:,:,n)
      case(2); res = .dtr(:,:,n)
      case(3); res = .ftr(:,:,n)
      case(4); res = .gtr(:,:,n)
      end

   end

   make_inverse ::: leaky, private, PURE
   ! Make the inverse operator list
      self :: INOUT

      m,n :: INT
      test :: REAL

      .inverse.create(.order)

      do m = 1,.order
      do n = 1,.order
         test = .mat(:,:,m).trace_product_with( .mat(:,:,n)) - THREE
         if (abs(test)>0.001d0) cycle
         .inverse(m) = n
         exit
      end
      end

   end

   make_table ::: leaky, private, PURE
   ! Make the group multiplication table
      self :: INOUT

      l,m,n :: INT
      same :: BIN
      prod :: MAT{REAL}(3,3)

      .table.create(.order,.order)

      do l = 1,.order
      do m = 1,.order

         prod.to_product_of(.mat(:,:,l),.mat(:,:,m))

         do n = 1,.order
            same = .mat(:,:,n).equals(prod)
            if (same) exit
         end

         .table(l,m) = n

      end
      end

   end

   make_irrep_matrices ::: leaky, private
   ! Make the Irreps for the group
      self :: INOUT

      if (.ID_number<=10) .make_C_type_irreps
      if (.ID_number>=13) .make_T_type_irreps

   end

   make_C_type_irreps ::: leaky, private, PURE
   ! Make irrep matrices for the groups C1, Cs, Ci, Cn, Cnh, Cnv, S2n, Dn, Dnh, Dnd
      self :: INOUT

      odd_axis :: BIN
      e, i, n, n_max, dim :: INT
      theta :: REAL
      gen1, gen2, gen3 :: MAT3{REAL}(2,2,14), target  ! generator matrices
      mat :: MAT3{REAL}*
      g1,g2,g3 :: MAT{REAL}*

      odd_axis = NOT .axis_order==2*(.axis_order/2)

      select case (.ID_symbol)

      case ("c1")
         .has_complex_irreps = FALSE
         .n_irrep = 1
         .irrep.create(.n_irrep)
         .irrep(1).dimension = 1
         e = 2
         .n_gen = 1
         gen1(1,1, 1) =  ONE
      
      case ("cs","ci")
         .has_complex_irreps = FALSE
         .n_irrep = 2
         .irrep.create(.n_irrep)
         .irrep(1:2).dimension = 1
         e = 3
         .n_gen = 1
         gen1(1,1, 1) =  ONE
         gen1(1,1, 2) = -ONE

      case ("cn")
         if (.axis_order>2) .has_complex_irreps = TRUE
         .n_gen = 1
         gen1(1,1, 1) =  ONE
         if (odd_axis) then
            .n_irrep = (.axis_order+1)/2
            .irrep.create(.n_irrep)
            .irrep(1).dimension = 1
            e = 2
         else
            .n_irrep = .axis_order/2 + 1
            .irrep.create(.n_irrep)
            .irrep(1:2).dimension = 1
            e = 3
            gen1(1,1, 2) = -ONE
         end
         .make_cn_gen(e,gen1,.axis_order)

      case ("s2n")
         if (.axis_order>=2) .has_complex_irreps = TRUE
         .n_irrep = .axis_order + 1
         .irrep.create(.n_irrep)
         .irrep(1:2).dimension = 1
         e = 3
         .n_gen = 2
         gen1(1,1, 1) =  ONE
         gen1(1,1, 2) =  ONE
         gen2(1,1, 1) =  ONE
         gen2(1,1, 2) = -ONE
         .make_cn_gen(e,gen2,2*.axis_order)
         .make_cn_gen(e,gen1,.axis_order)

      case ("cnh")
         if (.axis_order>2) .has_complex_irreps = TRUE
         .n_gen = 2
         gen1(1,1, 1) =  ONE
         gen1(1,1, 2) =  ONE
         gen2(1,1, 1) =  ONE
         gen2(1,1, 2) = -ONE
         if (odd_axis) then
            .n_irrep = .axis_order + 1
            .irrep.create(.n_irrep)
            .irrep(1:2).dimension = 1
            e = 3
         else
            .n_irrep = .axis_order + 2
            .irrep.create(.n_irrep)
            .irrep(1:4).dimension = 1
            e = 5
            gen1(1,1, 3) = -ONE
            gen1(1,1, 4) = -ONE
            gen2(1,1, 3) =  ONE
            gen2(1,1, 4) = -ONE
         end
         .make_cnh_gen(e,gen1,gen2)

      case ("cnv","dn")
         .has_complex_irreps = FALSE
         .n_gen = 2
         gen1(1,1, 1) =  ONE
         gen1(1,1, 2) =  ONE
         gen2(1,1, 1) =  ONE
         gen2(1,1, 2) = -ONE
         if (odd_axis) then
            .n_irrep = (.axis_order + 3)/2
            .irrep.create(.n_irrep)
            .irrep(1:2).dimension = 1
            e = 3
         else
            .n_irrep = .axis_order/2 + 3
            .irrep.create(.n_irrep)
            .irrep(1:4).dimension = 1
            e = 5
            gen1(1,1, 3) = -ONE
            gen1(1,1, 4) = -ONE
            gen2(1,1, 3) =  ONE
            gen2(1,1, 4) = -ONE
         end
         .make_sigma_x_gen(e,gen2)
         .make_cn_gen(e,gen1,.axis_order)

      case ("dnh")
         .has_complex_irreps = FALSE
         .n_gen = 3
         gen1(1,1, 1) =  ONE
         gen1(1,1, 2) =  ONE
         gen2(1,1, 1) =  ONE
         gen2(1,1, 2) = -ONE
         gen2(1,1, 3) =  ONE
         gen2(1,1, 4) = -ONE
         gen3(1,1, 1) =  ONE
         gen3(1,1, 2) =  ONE
         if (odd_axis) then
            .n_irrep = .axis_order + 3
            .irrep.create(.n_irrep)
            .irrep(1:4).dimension = 1
            e = 5
            gen3(1,1, 3) = -ONE
            gen3(1,1, 4) = -ONE
            gen1(1,1, 3) =  ONE ! Warning, possible error, Changed from gen3
                                ! to gen1; the first two could be gen1
            gen1(1,1, 4) =  ONE ! Warning, possible error, Changed from gen3
                                ! to gen1
         else
            .n_irrep = .axis_order + 6
            .irrep.create(.n_irrep)
            .irrep(1:8).dimension = 1
            e = 9
            gen1(1,1, 3) = -ONE
            gen1(1,1, 4) = -ONE
            gen1(1,1, 5) =  ONE
            gen1(1,1, 6) =  ONE
            gen1(1,1, 7) = -ONE
            gen1(1,1, 8) = -ONE
            gen2(1,1, 5) =  ONE
            gen2(1,1, 6) = -ONE
            gen2(1,1, 7) =  ONE
            gen2(1,1, 8) = -ONE
            gen3(1,1, 3) =  ONE
            gen3(1,1, 4) =  ONE
            gen3(1,1, 5) = -ONE
            gen3(1,1, 6) = -ONE
            gen3(1,1, 7) = -ONE
            gen3(1,1, 8) = -ONE
         end
         do i = e,.n_irrep
            gen3(1,1, i) =  ONE
            gen3(2,2, i) = -ONE
            gen3(2,1, i) = ZERO   ! Transposed
            gen3(1,2, i) = ZERO
         end
         .make_cnh_gen(e,gen1,gen2)

      case ("dnd")
         .has_complex_irreps = FALSE
         .n_irrep = .axis_order + 3
         .irrep.create(.n_irrep)
         .irrep(1:4).dimension = 1
         e = 5
         .n_gen = 3
         gen1(1,1, 1) =  ONE
         gen1(1,1, 2) =  ONE
         gen1(1,1, 3) =  ONE
         gen1(1,1, 4) =  ONE
         gen2(1,1, 1) =  ONE
         gen2(1,1, 2) = -ONE
         gen2(1,1, 3) =  ONE
         gen2(1,1, 4) = -ONE
         gen3(1,1, 1) =  ONE
         gen3(1,1, 2) =  ONE
         gen3(1,1, 3) = -ONE
         gen3(1,1, 4) = -ONE
         do i = e,.n_irrep
            theta = (i-e+1)*PI/.axis_order
            gen3(1,1, i) =  cos(theta)
            gen3(2,2, i) = -cos(theta)
            gen3(2,1, i) =  sin(theta) ! Transposed
            gen3(1,2, i) =  sin(theta)
         end
         .make_sigma_x_gen(e,gen2)
         .make_cn_gen(e,gen1,.axis_order)
      end

      do i = 1, .n_irrep

         dim = .irrep(i).dimension

         .irrep(i).mat.create(dim,dim, .order)

         mat => .irrep(i).mat
         g1  => gen1(1:dim,1:dim,i)
         g2  => gen2(1:dim,1:dim,i)
         g3  => gen3(1:dim,1:dim,i)

         mat(:,:,1).to_unit_matrix

         n_max = .axis_order
         if (.ID_symbol=="c1") cycle
         if (.ID_symbol=="cs") n_max = 2
         if (.ID_symbol=="ci") n_max = 2

         do n = 2,n_max
            mat(:,:,n).to_product_of(g1,mat(:,:,n-1))
         end

         if (.n_gen==1) cycle

         do n = 1,n_max
            mat(:,:,n_max+n).to_product_of(g2,mat(:,:,n))
         end

         if (.n_gen==2) cycle

         n_max = 2*n_max
         do n = 1,n_max
            mat(:,:,n_max+n).to_product_of(g3,mat(:,:,n))
         end

      end

   end

   make_cnh_gen(e,gen1,gen2) ::: private, PURE
   ! Make the Cnh generator matrices for the irreps
      self :: INOUT
      e :: INT, IN
      gen1, gen2 :: MAT3{REAL}(2,2,14), OUT

      i,m :: INT
      sign,theta :: REAL

      do i = e,.n_irrep
         .irrep(i).dimension = 2
         m = (i-e+2)/2
         theta = m*TWO*PI/.axis_order
         gen1(1,1, i) =  cos(theta)
         gen1(2,2, i) =  cos(theta)
         gen1(2,1, i) = -sin(theta) ! Transposed
         gen1(1,2, i) =  sin(theta)
      end

      sign = ONE
      do i = e,.n_irrep
         sign = -sign
         gen2(1,1, i) = sign
         gen2(2,2, i) = sign
         gen2(2,1, i) = ZERO ! Transposed
         gen2(1,2, i) = ZERO
      end

   end

   make_sigma_x_gen(e,gen2) ::: private, PURE
   ! Make the sigma-x generator matrices for the irreps
      self :: INOUT
      e :: INT, IN
      gen2 :: MAT3{REAL}(2,2,14), OUT

      i :: INT

      do i = e,.n_irrep
         gen2(1,1, i) =  ONE
         gen2(2,2, i) = -ONE
         gen2(2,1, i) = ZERO ! Transposed
         gen2(1,2, i) = ZERO
      end

   end

   make_cn_gen(e,gen1,axis_order) ::: private, PURE
   ! Make the Cn generator matrices for the irreps
      self :: INOUT
      e,axis_order :: INT, IN
      gen1 :: MAT3{REAL}(2,2,14), OUT
      i :: INT
      theta :: REAL

      do i = e,.n_irrep

         .irrep(i).dimension = 2

         theta = (i-e+1)*TWO*PI/axis_order

         gen1(1,1, i) =  cos(theta)
         gen1(2,2, i) =  cos(theta)
         gen1(2,1, i) = -sin(theta) ! Transposed
         gen1(1,2, i) =  sin(theta)

      end

   end

   make_T_type_irreps ::: leaky, private
   ! Make irrep matrices for the groups T, Th, Td, O, and Oh
   ! Must have already generated the 3x3 rep matrices
      self :: INOUT
      irrep_dimension :: MAT{INT}(10,5) = reshape( &               ! Irrep dimensions for T-groups
                         (/ 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, &    ! T
                            1, 2, 3, 1, 2, 3, 0, 0, 0, 0, &    ! Th
                            1, 1, 2, 3, 3, 0, 0, 0, 0, 0, &    ! Td
                            1, 1, 2, 3, 3, 0, 0, 0, 0, 0, &    ! O
                            1, 1, 2, 3, 3, 1, 1, 2, 3, 3 /), & ! Oh
                          (/10,5/))
      n_irrep :: VEC{INT}(5)  = (/ 3, 6, 5, 5, 10 /)               ! No of irreps
      ab_irrep :: VEC{INT}(5) = (/ 0, 4, 2, 2, 2  /)               ! A irreps
      ea_irrep :: VEC{INT}(5) = (/ 2, 2, 3, 3, 3  /)               ! E irreps
      eb_irrep :: VEC{INT}(5) = (/ 0, 5, 0, 0, 8  /)               ! E irreps
      fa_irrep :: VEC{INT}(5) = (/ 3, 6, 5, 4, 9  /)               ! F irreps
      fb_irrep :: VEC{INT}(5) = (/ 0, 0, 4, 5, 10 /)               ! F irreps
      i, n, id, dim :: INT
      ab,ea,eb,fa,fb :: INT
      pt5,r32 :: REAL

      .has_complex_irreps = FALSE
      if (.ID_symbol=="t" ) .has_complex_irreps = TRUE
      if (.ID_symbol=="td") .has_complex_irreps = TRUE

      id = .ID_number - 12

      .n_irrep = n_irrep(id)
      .irrep.create(.n_irrep)
      .irrep(:).dimension = irrep_dimension(1:.n_irrep,id)

      do i = 1,.n_irrep
         dim = .irrep(i).dimension
         .irrep(i).mat.create(dim,dim,.order)
      end

      .irrep(1).mat(1,1,:) = ONE

      pt5 = HALF
      r32 = sqrt(THREE)/TWO
      ea = ea_irrep(id)
      .irrep(ea).mat(1,1,1:4)  =  ONE
      .irrep(ea).mat(2,1,1:4)  = ZERO
      .irrep(ea).mat(1,2,1:4)  = ZERO
      .irrep(ea).mat(2,2,1:4)  =  ONE

      .irrep(ea).mat(1,1,5:8)  = -pt5
      .irrep(ea).mat(2,1,5:8)  = -r32
      .irrep(ea).mat(1,2,5:8)  =  r32
      .irrep(ea).mat(2,2,5:8)  = -pt5

      .irrep(ea).mat(1,1,9:12) = -pt5
      .irrep(ea).mat(2,1,9:12) =  r32
      .irrep(ea).mat(1,2,9:12) = -r32
      .irrep(ea).mat(2,2,9:12) = -pt5

      fa = fa_irrep(id)
      .irrep(fa).mat(:,:,:) = .mat(:,:,:)

      if (.ID_symbol=="t") return

      ab = ab_irrep(id)
      .irrep(ab).mat(1,1, 1:12) =  ONE
      .irrep(ab).mat(1,1,13:24) = -ONE
      if (.ID_symbol=="oh") then
         .irrep(2).mat(1,1,25:48) =  .irrep(2).mat(1,1, 1:24)
         .irrep(6).mat(1,1, 1:24) =  ONE
         .irrep(6).mat(1,1,25:48) = -ONE
         .irrep(7).mat(1,1, 1:24) =  .irrep(2).mat(1,1, 1:24)
         .irrep(7).mat(1,1,25:48) = -.irrep(2).mat(1,1, 1:24)
      end

      .irrep(ea).mat(:,:,13:24)   =  .irrep(ea).mat(:,:,1:12)
      n = .order/2
      if (.ID_symbol=="th" OR .ID_symbol=="oh") then
         .irrep(ea).mat(:,:,n+1:n+n) =  .irrep(ea).mat(:,:,1:n)
         eb = eb_irrep(id)
         .irrep(eb).mat(:,:,  1:  n) =  .irrep(ea).mat(:,:,  1:  n)
         .irrep(eb).mat(:,:,n+1:n+n) = -.irrep(ea).mat(:,:,n+1:n+n)
      end

      if (.ID_symbol=="th") then
         .irrep(3).mat(:,:, 1:12) =  .irrep(6).mat(:,:, 1:12)
         .irrep(3).mat(:,:,13:24) =  .irrep(6).mat(:,:, 1:12)
      else
         fb = fb_irrep(id)
         fa = fa_irrep(id)
         .irrep(fb).mat(:,:, 1:12) =  .irrep(fa).mat(:,:, 1:12)
         .irrep(fb).mat(:,:,13:24) = -.irrep(fa).mat(:,:,13:24)
         if (.ID_symbol=="oh") then
            .irrep(10).mat(:,:,25:48) = -.irrep(10).mat(:,:, 1:24)
            .irrep(4).mat(:,:, 1:24)  =  .irrep(9).mat(:,:, 1:24)
            .irrep(5).mat(:,:, 1:24)  =  .irrep(10).mat(:,:, 1:24)
            .irrep(4).mat(:,:,25:48)  =  .irrep(9).mat(:,:, 1:24)
            .irrep(5).mat(:,:,25:48)  =  .irrep(10).mat(:,:, 1:24)
         end
      end

   end

   make_character_table ::: leaky, private, PURE
   ! Make the character table
      self :: INOUT

      n,i :: INT

      do i = 1, .n_irrep

         .irrep(i).character.create(.order)

         do n = 1, .order
            .irrep(i).character(n) = .irrep(i).mat(:,:,n).trace
         end

      end

   end

   make_irrep_labels ::: private
   ! Make the names for the symmetry irreducible representations
   ! The irrep object must already be created and dimensioned correctly.
      self :: INOUT

      warn_str :: STR(len=41)

      warn_str = "can't label irreps for groups larger than"

      WARN_IF(.ID_symbol=="cn"  AND .axis_order>9, warn_str // " C9")
      WARN_IF(.ID_symbol=="s2n" AND .axis_order>8, warn_str // " S8")
      WARN_IF(.ID_symbol=="cnh" AND .axis_order>6, warn_str // " C6h")
      WARN_IF(.ID_symbol=="cnv" AND .axis_order>6, warn_str // " C6v")
      WARN_IF(.ID_symbol=="dn"  AND .axis_order>6, warn_str // " D6")
      WARN_IF(.ID_symbol=="dnh" AND .axis_order>8, warn_str // " D8h")
      WARN_IF(.ID_symbol=="dnd" AND .axis_order>6, warn_str // " D6d")

      .irrep(:).label = "?"

      select case (.ID_symbol)

      case ("c1")
         .irrep(:).label = (/"A   "/)

      case ("cs")
         .irrep(:).label = (/"A'  ", "A'' "/)

      case ("ci")
         .irrep(:).label = (/"Ag  ", "Au  "/)

      case ("cn")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"A   "/)
         case (2)
            .irrep(:).label = (/"A   ", "B   "/)
         case (3)
            .irrep(:).label = (/"A   ", "E   "/)
         case (4)
            .irrep(:).label = (/"A   ", "B   ", "E   "/)
         case (5)
            .irrep(:).label = (/"A   ", "E1  ", "E2  "/)
         case (6)
            .irrep(:).label = (/"A   ", "B   ", "E1  ", "E2  "/)
         case (7)
            .irrep(:).label = (/"A   ", "E1  ", "E2  ", "E3  "/)
         case (8)
            .irrep(:).label = (/"A   ", "B   ", "E1  ", "E2  ", "E3  "/)
         case (9)
            .irrep(:).label = (/"A   ", "E1  ", "E2  ", "E3  ", "E4  "/)
         end

      case ("s2n")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"Ag  ", "Au  "/)
         case (2)
            .irrep(:).label = (/"A   ", "B   ", "E   "/)
         case (3)
            .irrep(:).label = (/"Ag  ", "Au  ", "Eu  ", "Eg  "/)
         case (4)
            .irrep(:).label = (/"A   ", "B   ", "E1  ", "E2  ", "E3  "/)
         end

      case ("cnh")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"A'  ","A'' "/)
         case (2)
            .irrep(:).label = (/"Ag  ","Au  ","Bu  ","Bg  "/)
         case (3)
            .irrep(:).label = (/"A'  ","A'' ","E'' ","E'  "/)
         case (4)
            .irrep(:).label = (/"Ag  ","Au  ","Bg  ","Bu  ", &
                                "Eg  ","Eu  "/)
         case (5)
            .irrep(:).label = (/"A'  ","A'' ", &
                                "E1''","E1' ","E2''", "E2' "/)
         case (6)
            .irrep(:).label = (/"Ag  ","Au  ","Bu  ","Bg  ", &
                                "E1g ", "E1u ","E2u ","E2g "/)
         end

      case ("cnv")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"A'  ","A'' "/)
         case (2)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  "/)
         case (3)
            .irrep(:).label = (/"A1  ","A2  ","E   "/)
         case (4)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  ","E   "/)
         case (5)
            .irrep(:).label = (/"A1  ","A2  ","E1  ","E2  "/)
         case (6)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  ","E1  ","E2  "/)
         end

      case ("dn")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"A1  ","B   "/)
         case (2)
            .irrep(:).label = (/"A   ","B1  ","B3  ","B2  "/)
         case (3)
            .irrep(:).label = (/"A1  ","A2  ","E   "/)
         case (4)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  ","E   "/)
         case (5)
            .irrep(:).label = (/"A1  ","A2  ","E1  ","E2  "/)
         case (6)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  ","E1  ","E2  "/)
         end

      case ("dnh")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  "/)
         case (2)
            .irrep(:).label = (/"Ag  ","Au  ","B3u ","B3g ","B1g ", "B1u ","B2u ","B2g "/)
         case (3)
            .irrep(:).label = (/"A1' ","A1''","A2' ","A2''","E'' ", "E'  "/)
         case (4)
            .irrep(:).label = (/"A1g ","A1u ","B1g ","B1u ", &
                                "A2g ","A2u ","B2g ","B2u ", &
                                "Eg  ","Eu  "/)
         case (5)
            .irrep(:).label = (/"A1' ","A1''","A2' ","A2''", &
                                "E1''","E1' ","E2''","E2' "/)
         case (6)
            .irrep(:).label = (/"A1g ","A1u ","B1u ","B1g ", &
                                "A2g ","A2u ","B2u ","B2g ", &
                                "E1g ","E1u ","E2u ","E2g "/)
         case (8)
            .irrep(:).label = (/"A1g ","A1u ","A2g ","A2u ", &
                                "B1g ","B1u ","B2g ","B2u ", &
                                "E1g ","E1u ","E2u ","E2g ","E3g ","E3u "/)
         case (7)
            DIE("No such group as d7h")
         end

      case ("dnd")
         select case (.axis_order)
         case (1)
            .irrep(:).label = (/"Ag  ","Au  ","Bu  ","Bg  "/)
         case (2)
            .irrep(:).label = (/"A1  ","B2  ","B1  ","A2  ","E   "/)
         case (3)
            .irrep(:).label = (/"A1g ","A2u ","A1u ","A2g ","Eu  ","Eg  "/)
         case (4)
            .irrep(:).label = (/"A1  ","A2  ","B1  ","B2  ", &
                                "E1  ","E2  ","E3  "/)
         case (5)
            .irrep(:).label = (/"A1g ","A1u ","A2u ","A2g ", &
                                "E2u ","E1g ","E1u ","E2g "/)
         case (6)
            .irrep(:).label = (/"A1  ","B2  ","B1  ","A2  ", &
                                "E1  ","E2  ","E3  ","E4  ","E5  "/)
         end

      case ("t")
         .irrep(:).label = (/"A   ","E   ","F   "/)

      case ("th")
         .irrep(:).label = (/"Ag  ","Eg  ","Fg  ",  &
                             "Au  ","Eu  ","Fu  "/)
      case ("td")
         .irrep(:).label = (/"A1  ","A2  ","E   ","F1  ","F2  "/)

      case ("o")
         .irrep(:).label = (/"A1  ","A2  ","E   ","F1  ","F2  "/)

      case ("oh")
         .irrep(:).label = (/"A1g ","A2g ","Eg  ","F1g ","F2g ", &
                             "A1u ","A2u ","Eu  ","F1u ","F2u "/)
      case ("i")
         .irrep(:).label = (/"A   ","F1  ","F2  ","G   ","H   "/)

      case ("ih")
         .irrep(:).label = (/"Ag  ","F1g ","F2g ","Gg  ","Hg  ", &
                             "Au  ","F1u ","F2u ","Gu  ","Hu  "/)
      end
      
   end

   put(output)
   ! Display the pointgroup data to output file "out".
      self :: IN
      output :: TEXTFILE, optional, target

      out :: TEXTFILE*
      i,n,dim :: INT
      block,n_fields,n_block,f,l :: INT

      if (present(output)) then; out => output
      else;                      out => TEXTFILE::stdout
      end

      out.flush
      out.text("POINTGROUP output:")
      out.flush
      out.show("Symbol                  =",.symbol)
      out.show("ID_symbol               =",.ID_symbol)
      out.show("ID_number               =",.ID_number)
      out.show("Principal axis order    =",.axis_order)
      out.show("Order                   =",.order)
      out.show("No. of Irreps           =",.n_irrep)
      out.show("No. of Irrep generators =",.n_gen)
      out.show("Has complex irreps?     =",.has_complex_irreps)

      out.flush
      out.text("List of inverse group elements :")
      out.flush
      out.put(.inverse)

      out.flush
      out.text("Group multiplication table :")
      out.flush
      out.put(.table)

      out.flush
      out.text("Character Table :")
      n_fields = out.n_fields_per_line
      n_block = (.order-1)/n_fields + 1
      do block = 1,n_block
         f = 1 + (block-1)*n_fields
         l = min(f+n_fields-1,.order)
         out.flush                          ! Banner
         out.dash(int_fields=1,real_fields=min(n_fields,.order))
         out.tab(int_fields=1)
         do n = f,l
            out.put(n,real_width=TRUE)
         end
         out.flush
         out.dash(int_fields=1,real_fields=min(n_fields,.order))
         do i = 1,.n_irrep                     ! The actual table
            out.put(.irrep(i).label,int_width=TRUE)
            do n = f,l
               out.put(.irrep(i).character(n))
            end
            out.flush
         end
         out.dash(int_fields=1,real_fields=min(n_fields,.order))
      end

      out.flush
      out.text("3x3 Representation matrices :")
      out.flush
      out.put(.mat,by_dim3_matrices=TRUE)

      out.flush
      out.text("Irrep matrices :")
      out.flush
      do i = 1,.n_irrep
        out.flush
        dim = .irrep(i).dimension
        out.text("Irrep " // trim( .irrep(i).label) // ", dimension " // trim( dim.to_str) // ":" )
        out.flush
        if (dim==1) then
           out.put(.irrep(i).mat(1,1,:))
        else
           do n = 1,.order
              out.text("Matrix number " // n.to_str)
              out.flush
              out.put(.irrep(i).mat(:,:,n))
           end
        end
      end
   end

end
