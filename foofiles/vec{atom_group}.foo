!==================================================================
!
!  VEC{ATOM_GROUP}: a vector of ATOM_GROUPS
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!==================================================================

module VEC{ATOM_GROUP}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Deallocate the vector
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: get_from(VEC{OBJECT}), PURE
   ! Set default values
   end

!  =======================
!  List-based I/O Routines
!  =======================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! This version is for allocatable arrays.
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are not needed.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This version is for allocatable arrays.
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read a new set of keys
   end


   redirect ::: get_from(OBJECT), leaky
   ! Redirect input. (This code is for non-pointer self objects).
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file. (This code is for non-pointer self
   ! objects).
   end

   update(atom) ::: leaky
   ! Do all the sanity checks and default settings
      self :: INOUT
      atom :: VEC{ATOM}, IN

      g :: INT

      ! Finalize checks on each group
      do g = 1,.dim
         self(g).update(atom)
      end

   end

!  ===========================
!  Non-list based I/O routines
!  ===========================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! This version is for allocatable arrays.
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
      self :: allocatable, INOUT
      keyword :: STR

      word :: STR

      word = keyword
      word.to_lower_case
      select case (word)
      case("}") ! do nothing.
      case("redirect                 "); .redirect
      case("revert                   "); .revert
      case default;     UNKNOWN(word)
      end

   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}), leaky
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

!  =======
!  Enquiry
!  =======

!   has_all_mols result (res) ::: pure
!   ! True if all the mol's are associated
!      self :: allocatable, IN
!      res :: BIN
!
!      g :: INT
!
!      res = .allocated
!      if (NOT res) return
!
!      res = TRUE
!      do g = 1,.dim
!         res = associated(self(g)%mol)
!         if (NOT res) exit
!      end
!
!   end

   has_wfn_files result (res) ::: pure
   ! True if all the fchk files are defined
      self :: allocatable, IN
      res :: BIN

      res = .allocated
      if (NOT res) return

      res = all(ATOM_GROUP:has_wfn_file(self))

   end

   has_MO_files result (res) ::: pure
   ! True if all the MO files are defined
      self :: allocatable, IN
      res :: BIN

      res = .allocated
      if (NOT res) return

      res = all(self.MO_file_name /= " ")

   end

   has_atom_indices result (res) ::: pure
   ! True if all the fchk files are defined
      self :: allocatable, IN
      res :: BIN

      g :: INT

      res = .allocated
      if (NOT res) return

      do g = 1,.dim
         res = self(g).atom_index.allocated
         if (NOT res) exit
      end

   end

   atom_lists result (res) ::: leaky
   ! Produce a list of integer lists for each atom group.
   ! Useful for ROBY module.
      self :: IN
      res :: VEC{EVEC{INT}}@

      g :: INT

      res.create(.dim)
      do g = 1,.dim
         res(g).element = self(g).atom_index
      end

   end

!   n_bf_up_to_mol(g) result (res) ::: PURE
!   ! Return the no. of basis functions up to True if all the MO files are defined
!      self :: IN
!      g :: INT, IN
!      res :: INT
!
!   ENSURE(g>0 AND g<=self.dim,"group out of range")
!
!      i :: INT
!
!      res = 0
!      do i = 1,g-1
!         ENSURE(self(g).mol.associated,"no mol for group "//trim(g.to_str))
!         res = res + self(i).mol.n_bf
!      end
!
!   end

   group_for_atom(a) result (res) ::: PURE
   ! Return the index of the group (or molecule) to which atom "a"
   ! belongs.
      self :: IN
      a :: INT, IN
      res :: INT

      g :: INT

      res = 0

      do g = 1,.dim
         if (any(a==self(g).atom_index(:))) then
            res = g
            exit
         end
      end

   end

!  ======
!  Output
!  ======

   put
   ! Output the atom group table
      self :: IN

      at :: VEC{EVEC{INT}}@
      table :: VEC{TABLE_COLUMN}@
      g  :: INT

      stdout.flush
      stdout.flush
      stdout.text("===========")
      stdout.text("Atom groups")
      stdout.text("===========")
      stdout.flush
      stdout.text("Atom groups are used to define submolecules on which")
      stdout.text("calculations can be made and analyzed and combined  ")
      stdout.text("back into the parent supermolecule.")
      stdout.flush
      stdout.show("No. of atom groups =",.dim)
      stdout.flush

      ! Data
      at.create(.dim)
      do g = 1,.dim
         at(g).element = self(g).atom_index
      end

      ! Table
      table.create(4)
      table(1).set_heading("Group");  table(1).set_values(.name)
      table(1).set_subhead("name")
      table(2).set_real_precision(2)
      table(2).set_heading("Charge"); table(2).set_values(.charge)
      table(3).set_heading("No of");  table(3).set_values(.n_atoms)
      table(3).set_subhead("atoms")
      table(4).set_heading("Atom");   table(4).set_values(at)
      table(4).set_subhead("list")
      table.put(label_rows=TRUE)

      ! Clean
      table.destroy
      at.destroy

   end

end
