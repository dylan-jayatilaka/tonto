!==================================================================
!
! MAT{EMAT{REAL}}
!
! A matrix elements each of which is a matrix.
!
! Copyright (C) Dylan Jayatilaka, 2024
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!==================================================================

module MAT{EMAT{REAL}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2) ::: get_from(MAT{INTRINSIC}), leaky, PURE
   ! Allocate a matrix with the given dimensions
   end

   create(dim1,dim2,dim3,dim4) ::: leaky, PURE
   ! Allocate object with desired dimensions, ".element" part with bounds "dimv".
      self :: allocatable, OUT
      dim1,dim2,dim3,dim4  :: INT, IN

      .create(dim1,dim2)
      .create_mat(dim3,dim4)

   end

   create_mat(dim3,dim4) ::: leaky, PURE
   ! Allocate all ".element" parts with the same shape.
      self :: INOUT
      dim3,dim4 :: INT, IN

      i1,i2 :: INT

      do i1 = 1,.dim1
      do i2 = 1,.dim2
         self(i1,i2).element.create(dim3,dim4)
      end
      end

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   destroy_ptr_part ::: leaky, PURE
   ! Deallocate the ".element" parts
      self :: INOUT

      i1,i2 :: INT

      do i1 = 1,.dim1
      do i2 = 1,.dim2
         self(i1,i2).element.destroy
      end
      end

   end

end
