! json.foo
! Module for printing and/or reading JSON data
! This module uses nonstandard JSON, only for complex numbers.
! They will be formatted as follows: (Re, Im)
! Created Mon 11 Aug 2014 15:04:32 WST

module JSON

    implicit none

    out :: TEXTFILE*, public DEFAULT_NULL

contains

!  ==========
!  Allocation
!  ==========

   create(output_name) ::: leaky
   ! create a JSON object with default filenames
       self :: PTR
       output_name :: STR, optional

       allocate(self)
       .nullify_ptr_part
       .set_defaults

       if(present(output_name)) .set_name(output_name)
       .out.create(.name)
       .out.set_column_spacing(1)
       .out.set_using_fields(FALSE)
   
   end

   destroy ::: leaky, recursive
   ! Destroy a textfile
       self :: PTR

       if (.disassociated) return

       .destroy_ptr_part

       deallocate(self)

   end

   set_name(name)
   ! Set the file name
       self :: PTR
       name :: STR

       DIE_IF(name==" ","name is blank!")

       .name = name 

   end

   set_defaults
   ! Set defaults
       .name = "out.json"
       .margin = 0
   end

   destroy_ptr_part ::: leaky
       .out.destroy
   end

   nullify_ptr_part 
       nullify(.out)
   end


!  =====
!  Write
!  =====

   write_start 
       .out.open(for="write")
       .out.text("{")
       .margin = .margin + 2
       .out.set_margin_width(.margin)
   end

   write_end
       .margin = .margin - 2
       .out.set_margin_width(.margin)
       .out.flush
       .out.text("}")
       .out.close
   end

   put_entry(name, value) ::: template
       name :: STR
       value :: T?

       .out.put('"')
       .out.put(name)
       .out.put('" : ')
       .out.put(value)
       .out.flush
   end

   print_cpx(c)
       c :: CPX
       s :: STR(16)
       r, i :: REAL
       r = real(c)
       i = aimag(c)
       write (s, '(1x, 1("(", F5.2) , 1(",", F5.2, ")"))') r, i
       .out.put(s)
   end

   put_entry(name, value)
       name :: STR
       value :: CPX
       .out.put('"')
       .out.put(name)
       .out.put('" : ')
       .print_cpx(value)
       .out.flush
   end


   put_entry(name, value) ::: get_from(JSON, T?=>STR, ARG?=>)
   end
   

   put_entry(name, value) ::: get_from(JSON, T?=>INT, ARG?=>)
   end

  
   put_entry(name, value) ::: get_from(JSON, T?=>REAL, ARG?=>)
   end


   print_vec(v, separator) ::: template
       v :: V?, IN
       separator :: STR, optional
       i, dim :: INT
       sep :: STR

       sep = ', '
       dim = v.dim
       if(present(separator)) sep = separator
       WARN_IF(dim == 0, "Zero sized dimension!")

       .out.put('\[ ')
       do i = 1, dim
           if (i > 1) then
               .out.put(sep)
           end
           if (mod(i, 7) == 0) then
               .out.text(" ")
           end
           .out.put(v(i))
       end
       .out.put('\]')
       .out.flush
   end
   

   print_vec(v, separator) ::: get_from(JSON, V?=>VEC{STR}, ARG?=>)
   end


   print_vec(v, separator) ::: get_from(JSON, V?=>VEC{REAL}, ARG?=>)
   end


   print_vec(v, separator) ::: get_from(JSON, V?=>VEC{INT}, ARG?=>)
   end


   print_vec(v, separator)
       v :: VEC{CPX}, IN
       separator :: STR, optional
       i, dim :: INT
       sep :: STR

       sep = ', '
       dim = v.dim
       if(present(separator)) sep = separator
       WARN_IF(dim == 0, "Zero sized dimension!")

       .out.put('\[ ')
       do i = 1, dim
           if (i > 1) then
               .out.put(sep)
           end
           if (mod(i, 7) == 0) then
               .out.text(" ")
           end
           .print_cpx(v(i))
       end
       .out.put('\]')
       .out.flush
   end


   put_entry(name, value, separator) ::: template
       name :: STR
       value :: V?, IN
       separator :: STR, optional
       sep :: STR

       sep = ', '
       if(present(separator)) sep = separator

       .out.put('"')
       .out.put(name)
       .out.put('" : ')
       .print_vec(value, sep)
       .out.text(" ")
   end


   put_entry(name, value, separator) ::: get_from(JSON, V?=>VEC{STR}, ARG?=>)
   end


   put_entry(name, value, separator) ::: get_from(JSON, V?=>VEC{REAL}, ARG?=>)
   end


   put_entry(name, value, separator) ::: get_from(JSON, V?=>VEC{INT}, ARG?=>)
   end


   put_entry(name, value, separator) ::: get_from(JSON, V?=>VEC{CPX}, ARG?=>)
   end


   put_entry(name, value, separator, order) ::: template
       name :: STR
       value :: MAT{T?}, IN
       separator :: STR, optional
       order :: BIN, optional
       i, dim1, dim2 :: INT
       sep :: STR
       row :: VEC{T?}*

       sep = ', '
       dim1 = value.dim1
       dim2 = value.dim2
       if(present(separator)) sep = separator
       if(present(order)) order = NOT order
       

       WARN_IF(dim1 == 0, "Zero sized dimension!")

       .out.put('"')
       .out.put(name)
       .out.put('" :')
       .out.text(" ")
       .out.text('\[ ')
       row.create(dim2)
       do i = 1, dim1
           if (i > 1) then
               .out.text(sep)
           end
           row = value(i, :)
           .print_vec(row)
       end
       .out.text('\]')
       .out.flush
   end


   put_entry(name, value, separator, order) ::: get_from(JSON, T?=>REAL, ARG?=>)
   end


   put_entry(name, value, separator, order) ::: get_from(JSON, T?=>INT, ARG?=>)
   end


   put_entry(name, value, separator, order) ::: get_from(JSON, T?=>CPX, ARG?=>)
   end

   put_entry(name, value, separator, order) ::: get_from(JSON, T?=>STR, ARG?=>)
   end
    

end
