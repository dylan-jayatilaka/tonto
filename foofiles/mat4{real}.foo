!---------------------------------------------------------------------------
!
!  MAT4{REAL}: 4 dimensional matrices
!
! Copyright (C) Dylan Jayatilaka and Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAT4{REAL}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2,dim3,dim4) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create a 4-d array with all upper "bounds" specified
   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds1,bounds2,bounds3,bounds4) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create(bounds) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create the object with the desired bounds
   end

   create_copy(c) ::: get_from(MAT4{INTRINSIC}), leaky, PURE
   ! Create a copy of matrix "c"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object. This version does not destroy pointer parts.
   end

!  =================
!  Enquiry functions
!  =================

   is_same_shape_as(b) result (res)  ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   is_hypercube result (res) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns TRUE if self is a hypercube
   end

!  ===========
!  Set methods
!  ===========

   set_to(b) ::: get_from(MAT4{INTRINSIC}), pure
   ! Set "self" to "b"
   end

   set_to(b) ::: get_from(MAT4{INTRINSIC}), pure
   ! Set "self" to vector "b" in standard order
   end

!  ===========
!  Contraction
!  ===========

   partial_trace(d1,d2,T) ::: PURE
   ! Contract self by tracing over its dimensions d1 and d2, d1<d2.
   ! return the matrix T.
      self :: IN
      T :: MAT{REAL}, OUT
      d1,d2 :: INT, IN

   ENSURE(1<=d1 AND d2<=4, "dimensions out of bound")
   ENSURE(d1<d2,"dimensions not in increasing order")

      m,n :: INT

      if (d1==1 AND d2==2) then

         do m=1,.dim3
         do n = 1,.dim4
           T(m,n) = self(:,:,m,n).trace
         end
         end

      else if (d1==1 AND d2==3) then

         do m = 1,.dim2
         do n = 1,.dim4
           T(m,n) = self(:,m,:,n).trace
         end
         end

      else if (d1==1 AND d2==4) then

         do m = 1,.dim2
         do n = 1,.dim3
           T(m,n) = self(:,m,n,:).trace
         end
         end

      else if (d1==2 AND d2==3) then

         do m = 1,.dim1
         do n = 1,.dim4
           T(m,n) = self(m,:,:,n).trace
         end
         end

      else if (d1==2 AND d2==4) then

         do m = 1,.dim1
         do n = 1,.dim3
           T(m,n) = self(m,:,n,:).trace
         end
         end

      else if (d1==3 AND d2==4) then

         do m = 1,.dim1
         do n = 1,.dim2
           T(m,n) = self(m,n,:,:).trace
         end
         end

      end

   end

   contract_with(v) result (res) ::: PURE
   ! Contract with a 1-vector.
      self :: IN
      v :: VEC{REAL}, IN
      res :: REAL

   ENSURE(.is_hypercube,"self in not a hypercube")
   ENSURE(.dim1==v.dim,"wrong size, v")

      dim,i1,i2,i3,i4 :: INT

      dim = .dim1

      res = ZERO

      do i4 = 1,dim
      do i3 = 1,dim
      do i2 = 1,dim
      do i1 = 1,dim
         res = res + self(i1,i2,i3,i4)*v(i1)*v(i2)*v(i3)*v(i4)
      end
      end
      end
      end

   end

   change_index_1_to(new,V) ::: PURE
   ! Change the 1st index basis of "self" using vectors "V", and place
   ! the result in "new".  new(1,:,:,:) = self(1,:,:,:) V(1,:)
      self :: IN
      new :: MAT4{REAL}, OUT
      V :: MAT{REAL}, IN

   ENSURE(V.dim1==   .dim1,"wrong shapes")
   ENSURE(V.dim2==new.dim1,"wrong shapes")

      i,j,k :: INT
      do i = 1, .dim2
      do j = 1, .dim3
      do k = 1, .dim4
         new(:,i,j,k) = matmul(self(:,i,j,k),V)
      end do
      end do
      end do

   end

   change_index_2_to(new,V) ::: PURE
   ! Change the 2nd index basis of "self" using vectors "V", and place
   ! the result in "new".  new(:,2,:,:) = self(:,2,:,:) V(2,:)
      self :: IN
      new :: MAT4{REAL}, OUT
      V :: MAT{REAL}, IN

   ENSURE(V.dim1==   .dim2,"wrong shapes")
   ENSURE(V.dim2==new.dim2,"wrong shapes")

      i,j,k :: INT

      do i = 1, .dim1
      do j = 1, .dim3
      do k = 1, .dim4
         new(i,:,j,k) = matmul(self(i,:,j,k),V)
      end do
      end do
      end do

   end

   change_index_3_to(new,V) ::: PURE
   ! Change the 3rd index basis of "self" using vectors "V", and place
   ! the result in "new".  new(:,:,3,:) = self(:,:,3,:) V(3,:)
      self :: IN
      new :: MAT4{REAL}, OUT
      V :: MAT{REAL}, IN

   ENSURE(V.dim1==   .dim3,"wrong shapes")
   ENSURE(V.dim2==new.dim3,"wrong shapes")

      i,j,k :: INT
      do i = 1, .dim1
      do j = 1, .dim2
      do k = 1, .dim4
         new(i,j,:,k) = matmul(self(i,j,:,k),V)
      end do
      end do
      end do

   end

   change_index_4_to(new,V) ::: PURE
   ! Change the 3rd index basis of "self" using vectors "V", and place
   ! the result in "new".  new(:,:,:,4) = self(:,:,:,4) V(4,:)
      self :: IN
      new :: MAT4{REAL}, OUT
      V :: MAT{REAL}, IN

   ENSURE(V.dim1==   .dim4,"wrong shapes")
   ENSURE(V.dim2==new.dim4,"wrong shapes")

      i,j,k :: INT

      do i = 1, .dim1
      do j = 1, .dim2
      do k = 1, .dim3
         new(i,j,k,:) = matmul(self(i,j,k,:),V)
      end do
      end do
      end do

   end

!  ========================
!  Change of basis routines
!  ========================

   change_basis_using(V) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V"; self = self ... V
   end

   change_basis_to(new,V) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V
   end

   back_transform_using(V) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V"; self = self ... V^T
   end

   back_transform_to(new,V) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Change the basis of "self" using vectors "V", and place the result in
   ! "new".  new = self ... V^T
   end

!  ==============
!  Symmetrization
!  ==============

   make_symmetric ::: get_from(MAT4{INTRINSIC}), pure
   ! Make the upper pyramid of "self" the same as the lower pyramid
   end

!  ======================================
!  Compression and uncompression routines
!  ======================================

   compress_to_pyramid(py) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Converts the lower pyramid of self to the pyramid "py".
   end

   uncompress_from_pyramid(py) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Converts the pyramid "py" into the symmetric cube "self".
   end

   pyramid_size result (res) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Returns the size of the lower pyramid needed to store a
   ! totally symmetric self.
   end

!  =============
!  String widths
!  =============

   str_lengths(dp,spaces) result (res) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      dp :: INT, IN
      spaces :: INT, IN, optional
      res :: MAT4{INT}(.dim1,.dim2,.dim3,.dim4)
   end

   get_max_str_length(msl,max_dp,spaces) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns the maximum of the string lengths.
   end

end
