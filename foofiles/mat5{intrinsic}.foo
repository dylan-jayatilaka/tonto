!---------------------------------------------------------------------------
!
! MAT5{INTRINSIC}: 
!
! This is a virtual module, for 5 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module MAT5{INTRINSIC}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3,dim4,dim5) ::: leaky, PURE
   ! Allocate a matrix with the given dimensions
      self :: allocatable, OUT
      dim1,dim2,dim3,dim4,dim5 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3,dim4,dim5),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(dim1,dim2,dim3,dim4,dim5))
#endif

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4,lb5,ub5) ::: leaky, PURE
   ! Allocate a matrix with the given bounds
      self :: allocatable, OUT
      lb1,ub1 :: INT, IN
      lb2,ub2 :: INT, IN
      lb3,ub3 :: INT, IN
      lb4,ub4 :: INT, IN
      lb5,ub5 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4,lb5:ub5),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4,lb5:ub5))
#endif

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

! Old

   create(dim1,dim2,dim3,dim4,dim5) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      dim1,dim2,dim3,dim4,dim5 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      nullify(self)

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3,dim4,dim5),STAT=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(dim1,dim2,dim3,dim4,dim5))
#endif

   end

   create(bounds) ::: leaky, PURE
   ! Create a 5-d array with all upper "bounds" specified
     self :: PTR
     bounds :: VEC{INT}(5), IN

     .create(bounds(1),bounds(2),bounds(3),bounds(4),bounds(5))

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4,lb5,ub5) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      lb1,lb2,lb3,ub1,ub2,ub3,lb4,ub4,lb5,ub5 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      nullify(self)

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4,lb5:ub5),STAT=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4,lb5:ub5))
#endif

   end

   create(bounds1,bounds2,bounds3,bounds4,bounds5) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      bounds1,bounds2,bounds3,bounds4,bounds5 :: VEC{INT}(2), IN

      .create(bounds1(1),bounds1(2), &
              bounds2(1),bounds2(2), &
              bounds3(1),bounds3(2), &
              bounds4(1),bounds4(2), &
              bounds5(1),bounds5(2))
   end

   create(bounds) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: PTR
      bounds :: MAT{INT}(5,2), IN

      .create(bounds(1,1),bounds(1,2), &
              bounds(2,1),bounds(2,2), &
              bounds(3,1),bounds(3,2), &
              bounds(4,1),bounds(4,2), &
              bounds(5,1),bounds(5,2))

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Destroy an object. This version does not destroy pointer parts.
   end

!  ====
!  Copy
!  ====

   create_copy(c) ::: leaky
   ! Create a copy of matrix "c"
      self :: PTR
      c :: MAT5{INTRINSIC}, IN

      .create(lbound(c,1),ubound(c,1), &
              lbound(c,2),ubound(c,2), &
              lbound(c,3),ubound(c,3), &
              lbound(c,4),ubound(c,4), &
              lbound(c,5),ubound(c,5)  )

      self = c

   end

!  =======
!  Inquiry
!  =======

   is_same_shape_as(b) result (res) 
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT5{INTRINSIC}, IN
      res :: BIN
      res = .dim1==b.dim1 &
        AND .dim2==b.dim2 &
        AND .dim3==b.dim3 &
        AND .dim4==b.dim4 &
        AND .dim5==b.dim5
   end

!  ===========
!  Set methods
!  ===========

   set_to(b)
   ! Set "self" to "b"
      b :: MAT5{INTRINSIC}
   ENSURE(.is_same_shape_as(b),"different shapes")
      self = b
   end

   set_to(b)
   ! Set "self" to vector "b" in standard order
      b :: VEC{INTRINSIC}
   ENSURE(size(self)==size(b),"different sizes")
      self = reshape(b,[.dim1,.dim2,.dim3,.dim4,.dim5])
   end

end
