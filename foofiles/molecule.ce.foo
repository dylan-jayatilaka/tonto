!==============================================================================-
!
! MOLECULE.CE: CrystalExplorer related routines
!
! Copyright (C) Dylan Jayatilaka, Daniel Grimwood, 1996
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!==============================================================================-


module MOLECULE.CE

   implicit none

contains

!  ======================
!  Read CIF block options
!  ======================

   read_CX_file_name 
   ! Read the CX file name
      stdin.read(.CX_file_name)
   end

   read_CX_uses_angstrom 
   ! Read whether CX should use angstroms
      stdin.read(.CX_uses_angstrom)
   end

   read_CX_isosurface ::: leaky
   ! Read in special crystalexplorer isosurface data. This only works
   ! if there is a .saved.cluster created . This CX isosurface differs from a normal
   ! isosurface in that the default box sizes for the isosurface are set from
   ! the cluster fragment (as opposed to the .atom list for normal isosurfaces),
   ! and there is a default isosurface kind, which is the "stockholder_density".
   ! NOTE: the isosurface has its own plotgrid, different from that used in 
   ! normal density plots. 

   ENSURE(.saved.associated,"no saved molecule")
   ENSURE(.saved.cluster.associated,"no saved cluster data")
   ENSURE(.saved.cluster.info_made, "no saved cluster info")
   ENSURE(.saved.atom.associated,"no saved atom list")
   ENSURE(.atom.associated,"no atom list")

      if (.isosurface.disassociated) .isosurface.create(.atom)

      .isosurface.plot_grid.set_defaults(.saved.atom)
      .isosurface.plot_grid.n_x = 2**ISOSURFACE_MINIMUM_SCAN_LEVEL + 1
      .isosurface.plot_grid.set_points_widths_origin

      .isosurface.property = "stockholder_weight"  

      !!!!!!!!!!!!!!!!!!!!!!!!!
      .isosurface.read_keywords
      !!!!!!!!!!!!!!!!!!!!!!!!!

      ! Use unit cell as bbox if requested
      if (.isosurface.plot_grid.use_unit_cell_as_bbox) then
         WARN("resetting plot axes, plot widths from unit cell")
         .isosurface.plot_grid.set_bbox_from_unit_cell(.saved.cluster.crystal.unit_cell)
      end

   end

!  =========================
!  Process CIF block options
!  =========================

   process_CIF_for_CX ::: leaky
   ! Process the entire .cif file by reading *all* acceptable data
   ! blocks (i.e. those with crystal and atom information) and then
   ! writing this information to a CE information file. 
   ! NOTE: on termination, this does NOT produce a valid atom list.
   !       For that, use process_CIF
      self :: PTR

   ENSURE(.CX_file_name/=" ","no CX file name")
   ENSURE(.cif.associated,"no CIF object created")
   ENSURE(.cif.file_name/=" ","no CIF file name specified")

      found,CX_uses_angstrom :: BIN
      cif :: CIF*
      CX_file :: TEXTFILE*

      CX_file.create(.CX_file_name)
      CX_file.open_for("write")

      ! Save .cif outside of self, since it gets destroyed
      cif => .cif   
      nullify(.cif)

      do

         ! Find next data block
         .:find_CIF_crystal_data_block(cif,found)

         ! Any data left?
         if (NOT found) exit 

         ! Read and create in from cif (leaky)
         .XTAL:read_CIF_atoms(cif)            
         .XTAL:read_CIF_crystal(cif)

         ! Create the cluster
         .cluster.create(.crystal)
         .cluster.radius = ZERO       
         .cluster.generation_method = "fragment"
         .cluster.defragment = FALSE
         .cluster.make_info                   
         .cluster.put

         ! Write out 
         .:put_CX_data(CX_file,cif)       

         ! Preserve
         CX_uses_angstrom  = .CX_uses_angstrom
         nullify(.cif)

         ! Destroy self (leaky)
         .BASE:destroy                             
         .BASE:create

         ! Next 
         .CX_uses_angstrom = CX_uses_angstrom
         cif.move_to_end_of_data

      end

      ! Clean
      cif.destroy
      CX_file.destroy

   end

   process_CIF_cell_and_symmetry ::: leaky
   ! Process only the cell and spacegroup from the CIF file.
   ! If ".cif.data_block_name" is not defined, use the first
   ! acceptable data block.
      self :: INOUT

   ENSURE(.cif.associated,"no CIF object created")

      ! Find a data block name
      if (.cif.data_block_name==" ") then
         WARN("No CIF data block as specified")
         WARN("Searching for first acceptable data block")
         .:find_CIF_crystal_data_block(.cif)
      end

      ! Find the data block
      ::open_CIF_at_data_block(.cif)
      
      ! Read crystal info
      .XTAL:read_CIF_crystal(.cif) 

   end

   process_CIF ::: leaky
   ! Process a CIF file: read atom and crystal information.
   ! If ".cif.data_block_name" is not defined, use the first
   ! acceptable data block.
      self :: INOUT

   ENSURE(.cif.associated,"no CIF object created")

      ! Find a data block name
      if (.cif.data_block_name==" ") then
      !  WARN("No CIF data block as specified")
      !  WARN("Searching for first acceptable data block")
         .:find_CIF_crystal_data_block(.cif)
      end

      ! Find the data block
      ::open_CIF_at_data_block(.cif)

      ! Read in atoms of asymmetric unit
      .XTAL:read_CIF_atoms(.cif)   
      
      ! Read crystal info
      .XTAL:read_CIF_crystal(.cif) 

      ! Set dispersion coefficients?
    ! if (.atom.associated) then
    ! if (.crystal.xray_data.associated) then
    ! if (.crystal.xray_data.have_set_wavelength) then
    !    .atom.set_dispersion_coefficients(.crystal.xray_data.wavelength)
    ! end
    ! end
    ! end

      ! Make Hirshfeld info
      if (.scfdata.associated) then
      if (.basis_info_made) then
      if (.atom.associated) then
      if (.crystal.data.associated) then
      if (.crystal.data.thermal_smearing_model=="hirshfeld") then
         .SCF:make_Hirshfeld_inputs
      end
      end
      end
      end
      end

      ! Reset to finalize next time
      .crystal.finalize = TRUE

   end

   find_CIF_crystal_data_block(cif,found) ::: public
   ! Find the *first* crystal data block in the "cif" file
   ! starting from line cif.start_of_data, and set the locator
   ! "cif.data_block_name". The name of the molecule is set to 
   ! the name of the cif file concatenated with the block name.  
      cif :: CIF
      found :: BIN, optional, OUT

   ENSURE(cif.file.associated,"no CIF file name")
   ENSURE(cif.file.name/=" ","no CIF file name")

      fnd :: BIN
      head :: STR

      head  = cif.file.name.filename_head
      .name = head

      if (NOT cif.file.is_open) cif.open

      cif.find_crystal_data_block(fnd)

      if (present(found)) then
         found = fnd
         if (NOT found) return
      else 
         DIE_IF(NOT fnd,"couldn't find crystal data block")
      end

      ! Set job name
      .name = head.trim // "_" &
           // cif.data_block_name 

    ! WARN("Job name has now been set to: "//.name.trim)

   end

   open_CIF_at_data_block(cif) ::: selfless
   ! Open the "cif" file at the block with name "cif.data_block_name".
      cif :: CIF*

   ENSURE(cif.associated,"no CIF object created")
   ENSURE(cif.file_name/=" ","no CIF file name")
   ENSURE(cif.data_block_name/=" ","no CIF data block name")

      name :: STR

      cif.open

      ! Store: cif.data_block_name is trashed
      name = cif.data_block_name 
      cif.find_data_block(name)

   end

!  ======================
!  New cluster operations
!  ======================

   defragment ::: leaky
   ! Defragment the current atom list, assuming it is read in from CIF
   ! file and may consist of just an asymmetric unit.
      self :: INOUT

   ENSURE(.cif.associated,"no CIF info")
   ENSURE(.crystal.associated,"no crystal")

      ! Defragment any molecules in the CIF
      .crystal.set_generation_method("fragment")
      .crystal.set_radius(ZERO)
      .crystal.set_defragment(TRUE)
      .crystal.make_info

      ! Reset .atom list to the .crystal.geometry
      .atom.destroy
      .crystal.create_atom_list(.atom)

      ! Finalize atom info/bases
      .atom_info_made = FALSE
      .:finalize_atoms

   end

   finalize_atoms ::: leaky
   ! Read in the atom list information
      self :: INOUT

      ! Finalize atom info/basis sets
      .BASE:set_atom_info
      .BASE:finalize_atom_groups
      .BASE:resolve_basis_info

      ! Finalize crystal
      if (associated(.crystal)) then
         .BASE:resolve_axis_system
         .crystal.make_fragment_data(.atom,assign_atom=TRUE)
      end

      ! Make Hirshfeld info
      if (.scfdata.associated) then
      if (.basis_info_made) then
      if (.crystal.associated) then
      if (.crystal.xray_data.associated) then
      if (.crystal.xray_data.thermal_smearing_model=="hirshfeld") then
         .SCF:make_Hirshfeld_inputs
      end
      end
      end
      end
      end

      ! Destroy stored atoms here
      .isosurface.destroy

   end

!  ===
!  Put
!  ===

   put_CX_data
   ! Output information that Crystal Explorer requires to the file 
   ! with name ".CX_file_name".
      .:put_CX_data(.cif)
   end

   serialize_isosurface_sbf 
   ! Dump sbf file 
      .:serialize_isosurface_sbf(.cif)
   end

   put_CX_data(cif)
   ! Output information that Crystal Explorer requires to the file 
   ! with name ".CX_file_name".
      cif :: CIF*

      CX_file :: TEXTFILE*

      if (.CX_file_name/=" ") then

         CX_file.create(.CX_file_name)
         CX_file.open_for("write")
         .:put_CX_data(CX_file,cif)
         CX_file.close
         CX_file.destroy

      else

         .:put_CX_data(TEXTFILE::stdout,cif)

      end

   end

   serialize_isosurface_sbf(cif)
   ! Output information that Crystal Explorer requires to the file 
   ! with name ".CX_file_name".
      cif :: CIF*

      if(.CX_file_name /= " ") then
         .:serialize_isosurface_sbf(trim(.CX_file_name), cif)
      else
         .:serialize_isosurface_sbf(trim(.name)//"-hs.sbf", cif)
      end if

   end


   put_CX_data(CX_file,cif)
   ! Output information that Crystal Explorer requires to file "CX_file".
   ! NOTE: this requires a "cif" file to have been read, and a valid data block
   ! name to be stored in the "cif" object.
      CX_file :: TEXTFILE*
      cif :: CIF*

 ! ENSURE(cif.associated,"no CIF object created")
 ! ENSURE(cif.data_block_name/=" ","no CIF data block name")

      save :: TEXTFILE*
      CX_label,CX_name,formula,spacegroup :: STR
      done :: BIN

      if (cif.associated) then
         CX_name  = cif.file_name
         CX_label = cif.data_block_name
      else
         CX_name  = "unknown"
         CX_label = "unknown"
      end

      stdout.flush
      stdout.text("Writing Crystal Explorer data file: " // CX_file.name.trim)
      stdout.flush

      ! Redirect stdout to out
      save   => TEXTFILE::stdout                      
      stdout => CX_file

      ! Reset output format
      stdout.save
      stdout.set_int_width(7)
      stdout.set_real_style("f")
      stdout.set_real_precision(5)
      stdout.set_real_width(12)
      stdout.set_using_fields(FALSE)

      stdout.flush
      stdout.text("Crystal Explorer data")

      stdout.flush
      stdout.show("begin CIF ",CX_label,dots=FALSE)
      stdout.show("file_name =",CX_name,dots=FALSE)
      stdout.show("data_block_name =",CX_label,dots=FALSE)
      stdout.text("end CIF")
      stdout.flush

      ! Crystal data and cluster/fragment positions
      ! Try saved cluster first
      done = FALSE
      if (.saved.associated) then
      if (.saved.cluster.associated) then

         ENSURE(.saved.cluster.info_made,"no cluster information")
         ENSURE(.saved.cluster.crystal.associated,"no cluster crystal data")
         ENSURE(.saved.cluster.n_fragment_atoms>0,"no fragment size")

         formula    = .saved.cluster.crystal.CIF_chemical_formula
         spacegroup = .saved.cluster.crystal.spacegroup.HM_symbol

         stdout.show("begin crystal ",CX_label,dots=FALSE)
         .saved.cluster.crystal.put_CX(CX_label,formula,spacegroup) 
         .saved.cluster.put_CX(angstrom=.CX_uses_angstrom)
         stdout.flush
         stdout.text("end crystal")

         done = TRUE

      end
      end

      ! Try normal cluster
      if (NOT done) then
      if (.cluster.associated) then

         ENSURE(.cluster.info_made,"no cluster information")
         ENSURE(.cluster.crystal.associated,"no cluster crystal data")
         ENSURE(.cluster.n_fragment_atoms>0,"no fragment size")

         formula    = .cluster.crystal.CIF_chemical_formula
         spacegroup = .cluster.crystal.spacegroup.HM_symbol

         stdout.show("begin crystal ",CX_label,dots=FALSE)
         .cluster.crystal.put_CX(CX_label,formula,spacegroup) 
         .cluster.put_CX(angstrom=.CX_uses_angstrom)
         stdout.flush
         stdout.text("end crystal")

         done = TRUE

      end
      end

      ! Finally try .crystal and .atom
      if (NOT done) then
      if (.crystal.associated AND .atom.associated) then

         formula    = .crystal.CIF_chemical_formula
         spacegroup = .crystal.spacegroup.HM_symbol

         stdout.show("begin crystal ",CX_label)
         .crystal.put_CX(CX_label,formula,spacegroup) 
         .atom.put_CX(CX_label,angstrom=.CX_uses_angstrom)
         stdout.flush
         stdout.text("end crystal")

         done = TRUE

      end
      end

      ! Isosurface information
      if (.isosurface.associated) then
      if (.isosurface.atom.associated) then 

      ! Try saved cluster first
      done = FALSE
      if (.saved.associated) then
      if (.saved.cluster.associated) then

         stdout.flush
         stdout.show("begin surface ",.isosurface.surface_label.trim,dots=FALSE)
         .isosurface.put_CX(.saved.cluster.fragment_atom_indices &
                           ,.saved.cluster.nonfragment_atom_indices &
                           ,.atom &
                           ,angstrom=.CX_uses_angstrom)
         .saved.cluster.put_CX_atoms
         .isosurface.put_fingerprint_face_atoms(.saved.cluster.fragment_atom_indices &
                           ,.saved.cluster.nonfragment_atom_indices)
         stdout.text("end surface")

         done = TRUE

      end
      end

      ! Try normal cluster
      if (NOT done) then
      if (.cluster.associated) then
         DIE("should we be here?")
         done = TRUE
      end
      end

      ! Finally try isosurface only
      if (NOT done) then
         DIE("should we be here?")
         done = TRUE
      end

      end
      end

      ! Put back stdout
      stdout.unsave
      stdout => save                        

   end

   serialize_isosurface_sbf(filename, cif)
   ! Output information that Crystal Explorer requires to file "CX_file".
   ! NOTE: this requires a "cif" file to have been read, and a valid data block
   ! name to be stored in the "cif" object.
      filename :: STR
      cif :: CIF*
      datafile :: DATAFILE
      CX_label,CX_name :: STR
      points, normals :: MAT{REAL}*
      values,d_e,d_i,d_norm_e,d_norm_i,d_norm,si,cn :: VEC{REAL}*
      d_e_atoms, d_i_atoms :: VEC{INT}*
      atoms_inside, atoms_outside :: MAT{INT}*
      done,has_curvatures :: BIN

      if (cif.associated) then
         CX_name  = cif.file_name
         CX_label = cif.data_block_name
      else
         CX_name  = "unknown"
         CX_label = "unknown"
      end

      stdout.flush
      stdout.text("Writing Crystal Explorer data file: " // filename.trim)
      stdout.flush

   if(tonto.is_master_processor) then

      datafile.open(filename)

      ! Isosurface information
      if (.isosurface.associated) then
      if (.isosurface.atom.associated) then 

      ! Try saved cluster first
      done = FALSE
      if (.saved.associated) then
      if (.saved.cluster.associated) then

         points.create_copy(.isosurface.point)
         points = points*ANGSTROM_PER_BOHR
         call datafile%sbf%add_dataset(sbf_Dataset("vertices", points))
         points.destroy

         call datafile%sbf%add_dataset(sbf_Dataset("faces", .isosurface.face))

         normals.create(3,.isosurface.n_pt)
         .isosurface.make_vertex_normals(normals)
         call datafile%sbf%add_dataset(sbf_Dataset("vertex normals", normals))
         normals.destroy

         ! d_i, d_norm_i, d_e, d_norm_e and d_norm
         d_i.create(.isosurface.n_pt)
         d_e.create(.isosurface.n_pt)
         d_norm_i.create(.isosurface.n_pt)
         d_norm_e.create(.isosurface.n_pt)
         d_norm.create(.isosurface.n_pt)
         .isosurface.make_fingerprint_distances(d_e,d_i,d_norm_e &
                                                ,d_norm_i,d_norm &
                                                ,.saved.cluster.fragment_atom_indices &
                                                ,.saved.cluster.nonfragment_atom_indices &
                                                ,.atom,TRUE)

         ! Print it out
         call datafile%sbf%add_dataset(sbf_Dataset("d_i",d_i))
         call datafile%sbf%add_dataset(sbf_Dataset("d_e",d_e))
         call datafile%sbf%add_dataset(sbf_Dataset("d_norm_i",d_norm_i))
         call datafile%sbf%add_dataset(sbf_Dataset("d_norm_e",d_norm_e))
         call datafile%sbf%add_dataset(sbf_Dataset("d_norm",d_norm))

         ! Clean
         d_norm.destroy
         d_norm_e.destroy
         d_norm_i.destroy
         d_e.destroy
         d_i.destroy

         ! Shape index and curvedness
         has_curvatures = .isosurface.point_mean_curvature.associated &
                     AND  .isosurface.point_gaussian_curvature.associated
         if (.isosurface.CX_output_shape_properties AND has_curvatures) then
            si.create(.isosurface.n_pt)
            cn.create(.isosurface.n_pt)
            .isosurface.make_vertex_SI_and_curvedness(si,cn)
            call datafile%sbf%add_dataset(sbf_Dataset("shape_index",si))
            call datafile%sbf%add_dataset(sbf_Dataset("curvedness",cn))
            cn.destroy
            si.destroy
         end

         ! User-requested property?
         if (.isosurface.surface_property_values.associated) then
            ! Create a copy of property
            values.create_copy(.isosurface.surface_property_values)
            ! Chop it if requested
            if (.isosurface.surface_property_lb_set) values.chop_small_values(.isosurface.surface_property_lb)
            if (.isosurface.surface_property_ub_set) values.chop_large_values(.isosurface.surface_property_ub)
            ! Put out the surface property values
            call datafile%sbf%add_dataset(sbf_Dataset(trim(.isosurface.surface_property),values))
            values.destroy
         end

         if (.isosurface.surface_iso_values.associated) then
            call datafile%sbf%add_dataset(sbf_Dataset(trim(.isosurface.property),.isosurface.surface_iso_values))
         end


         atoms_outside => NULL()
         atoms_inside => NULL()
         .saved.cluster.make_CX_atoms(atoms_inside, atoms_outside)
         call datafile%sbf%add_dataset(sbf_Dataset("atoms_inside_surface",atoms_inside))
         if (atoms_outside.associated) call datafile%sbf%add_dataset(sbf_Dataset("atoms_outside_surface",atoms_outside))

         d_i_atoms.create(.isosurface.n_face)
         d_e_atoms.create(.isosurface.n_face)
         .isosurface.make_fingerprint_face_atoms(d_e_atoms,d_i_atoms &
                                                ,.saved.cluster.fragment_atom_indices &
                                                ,.saved.cluster.nonfragment_atom_indices)
         call datafile%sbf%add_dataset(sbf_Dataset("d_i_atoms",d_i_atoms))
         call datafile%sbf%add_dataset(sbf_Dataset("d_e_atoms",d_e_atoms))
         d_e_atoms.destroy
         d_i_atoms.destroy

         done = TRUE
      end
      end

      end
      end

      !call datafile%sbf%add_dataset(sbf_Dataset("cif_filename", trim(CX_name)))
      !call datafile%sbf%add_dataset(sbf_Dataset("data_block_name", trim(CX_label)))
      call datafile%sbf%serialize
      datafile.close

   end if !tonto_master_processor

   end

    make_monomer_energies_for_lattice_energy result(res)
        self :: PTR
        res :: VEC{REAL}(4) ! E_en, E_1e, E_ee, E_ex

        J, K, saved_MOs :: OPMATRIX*
        exchange_factor = -HALF :: REAL

        saved_MOs => .molecular_orbitals
        .INTS:make_overlap_matrix
        .SCF:make_core_matrix
        .BASE:make_natural_orbitals
        ! Make integrals
        .molecular_orbitals => .natural_orbitals
        .BASE:make_scf_density_matrix
        .SCF:make_core_matrix
        .nuclear_attraction_matrix.uncompress
        if (.scfdata.is_restricted) then
            exchange_factor = -QUARTER
        end if



        res(1) = .BASE:expectation(.nuclear_attraction_matrix)
        res(2) = .BASE:expectation(.core_matrix)
        J.create(.n_bf, .density_matrix.spinorbital_kind)
        K.create(.n_bf, .density_matrix.spinorbital_kind)
        .FOCK:make_JK_engine(J, K, .density_matrix)
        res(3) = .BASE:expectation(J) * HALF
        res(4) = .BASE:expectation(K) * exchange_factor
        res = -TWO * res
        J.destroy
        K.destroy
        .molecular_orbitals => saved_MOs
    end


    estimate_z result(res)
      res :: INT
      res = .crystal.n_unit_cell_atoms / .cluster.molecule(1).element.dim
    end

    calculate_cell_dipole_correction(mol_dipole) result(res)
      mol_dipole :: VEC{REAL}(3), IN
      res :: REAL
      cell_dipole :: VEC{REAL}(3)
      i :: INT
      unique_symops :: VEC{INT}@
      rot :: MAT{REAL}(3,3)
      res = ZERO
      cell_dipole = ZERO
      unique_symops = .crystal.asym_symop_for_unit_cell_atom.unique_elements
      do i = 1, unique_symops.dim
        rot = .crystal.spacegroup.seitz(1:3, 1:3, unique_symops(i))
        rot = matmul(rot, .crystal.unit_cell.inverse_matrix)
        rot = matmul(.crystal.unit_cell.direct_matrix, rot)
        cell_dipole = cell_dipole + matmul(rot, mol_dipole)
      end do
      res = - TWOTHIRD * PI * (cell_dipole.norm) ** 2
      res = res / (unique_symops.dim * .crystal.unit_cell.volume)
    end

    create_wavefunction_file_for_lattice ::: leaky, private
        mol :: MOLECULE*
        model :: STR
        mol.BASE:create
        mol.scfdata.create
        mol.name = trim(.cif.data_block_name)
        .cluster.create_mol_atom_list(mol.atom, 1)
        mol.BASE:set_atom_info
        mol.BASE:finalize_atom_groups

        mol.scfdata.scf_kind = "rhf"
        VEC{PAIR_ENERGY}:get_energy_model(model)
        stdout.show("Making wavefunction for energy model ", trim(model))
        if(trim(model) == "ce-b3lyp") then
            mol.scfdata.scf_kind = "rks"
            mol.BASE:set_basis_name("6-31G(d,p)")
            mol.scfdata.set_exchange_functional("b3lypgx")
            mol.scfdata.set_correlation_functional("b3lypgc")
        end 
        mol.BASE:set_basis_name("3-21G")
        mol.SCF:make_ANO_data
        mol.SCF:scf
        mol.BASE:serialize(trim(mol.name)//".sbf")
    end

    total_lattice_energy(wavefunction_filename)
      self :: PTR
      wavefunction_filename :: STR
      file_exists :: BIN
      mol1, mol2 :: MOLECULE*
      i, n, current_symop :: INT
      p_e :: PAIR_ENERGY
      pair_energies :: VEC{PAIR_ENERGY}@
      indices, indices_calc :: VEC{INT}@
      monomer_energies, E :: VEC{REAL}(4)
      e_iter, e_prev, delta_e, radius :: REAL
      sep :: VEC{REAL}(3)
      Z :: INT
      cell_dipole_correction :: REAL
      mol_dipole :: VEC{REAL}(3)


      ! Central fragment wavefunction stuff
      !if(.scfdata.scf_kind == "rks") then
      !   VEC{PAIR_ENERGY}:set_energy_model("ce-b3lyp")
      !else
      !   VEC{PAIR_ENERGY}:set_energy_model("ce-hf")
      !end if

      .cluster.create(.crystal) 
      .cluster.set_generation_method("fragment")
      .cluster.radius = 60
      .cluster.defragment = TRUE
      .cluster.make_info

      mol1.BASE:create

      inquire(file=trim(wavefunction_filename), exist=file_exists)
      if (file_exists) then
          stdout.text("Loading g09 wavefunction")
          mol1.BASE:read_wavefunction_file(trim(wavefunction_filename))
      else 
          stdout.text("Wavefunction file does not exist")
          .:create_wavefunction_file_for_lattice
          wavefunction_filename = trim(.cif.data_block_name)//".sbf"
          mol1.BASE:read_wavefunction_file(trim(wavefunction_filename))
      end

      mol1.name = trim(.cif.data_block_name)
      mol1.atom.put


      stdout.flush
      stdout.text("==============================")
      stdout.text("CrystalExplorer lattice energy")
      stdout.text("==============================")

      stdout.text("Calculating monomer energies")
      !! Make monomer energies and multipoles
      monomer_energies  = mol1.:make_monomer_energies_for_lattice_energy
      stdout.text("Monomer energies (Hartree)")
      stdout.show("E_en               =", monomer_energies(1))
      stdout.show("E_1e               =", monomer_energies(2))
      stdout.show("E_ee               =", monomer_energies(3))
      stdout.show("E_ex               =", monomer_energies(4))
      stdout.flush

      mol1.BASE:make_atomic_multipoles
      mol_dipole = mol1.PROP:make_dipole
      cell_dipole_correction = .:calculate_cell_dipole_correction(mol_dipole)
      stdout.show("Cell dipole correction =", cell_dipole_correction)

      ! 1 being the first molecule in the crystal
      pair_energies = .cluster.make_pairs_within_radius_of(1, .cluster.radius)

      indices.create(pair_energies.dim)
      pair_energies(:).symop_id.quick_sort(indices)
      pair_energies(:) = pair_energies(indices)

      current_symop = 0
      radius = 7.2 ! Roughly 3.8 angstrom
      e_iter = ZERO
      delta_e = INT_HUGE
      mol2.BASE:create

      do while (abs(delta_e) > 0.4)
         stdout.show("Calculating pairs within radius = ", radius)
         do i = 1, pair_energies.dim
            if(pair_energies(i).energy_calculated) cycle
            if(pair_energies(i).closest_distance > radius) cycle
            if(current_symop /= pair_energies(i).symop_id) then

                mol2.BASE:destroy
                mol2.BASE:create
                mol2.BASE:read_wavefunction_file(wavefunction_filename)
                !stdout.text("Set atom info")
                !mol2.BASE:set_atom_info
                !stdout.text("finalize atom info")
                !mol2.BASE:finalize_atom_groups
                !stdout.text("resolve basis info")
                !mol2.BASE:resolve_basis_info
                !mol2.BASE:set_basis_name(.basis_name)
                mol2.BASE:rotate_by(pair_energies(i).rot)
                mol2.INTS:make_overlap_matrix
                mol2.BASE:make_natural_orbitals
                mol2.BASE:make_atomic_multipoles
                current_symop = pair_energies(i).symop_id
            end if
            mol2.atom.translate_by(pair_energies(i).trans)
            sep = mol1.atom.center_of_mass - mol2.atom.center_of_mass
            !if (abs(sep.norm - pair_energies(i).center_separation) > 0.001) then
            !    stdout.text("Error: different separations!")
            !    pair_energies(i).put
            !    stdout.show("trans         = ", pair_energies(i).trans)
            !    stdout.show("i               = ", i)
            !end

            ! If we have a unique molecule pair calculate the energies
            E = ZERO
            ! Disp
            E(1:2) = mol1.PROP:symmetric_intermolecular_qm_energies(mol2, monomer_energies)
            E(3) = mol1.PROP:intermolecular_polarization_energy(mol2)
            E(4) = mol1.atom.Grimme06_dispersion_energy(mol2.atom)
            pair_energies(i).set_energy_components(E)
            pair_energies(i).set_energy_calculated(TRUE)
            mol2.atom.translate_by(-pair_energies(i).trans)
         end
         e_iter = pair_energies.total_energy(scaled=TRUE)
         delta_e = e_iter - e_prev
         e_prev = e_iter
         indices_calc = pair_energies.calculated_pairs
         pair_energies(indices_calc).put_lattice_energy_table(cell_dipole_correction)
         if(all(pair_energies(:).energy_calculated)) then
             stdout.show("Convergence not achieved within radius", .cluster.radius)
             exit
         end
         radius = radius + 7.2
         if (radius > .cluster.radius) radius = .cluster.radius
      end

      mol1.BASE:destroy
      mol2.BASE:destroy

    end

end
