!---------------------------------------------------------------------------
!
! CPX: Complex numbers
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: cpx.foo 4349 2014-05-06 02:01:54Z dylan_ $
!---------------------------------------------------------------------------

module CPX

   implicit none

   interface to_str
      to_str_cpx_0
      to_str_cpx_1
      to_str_cpx_2
   end

contains

! =============
! String widths
! =============
   
   no_of_fields_per_value result (res) ::: pure
   ! Returns the number of fields used to print a "self".
      self :: IN
      res :: INT

      if (FALSE) res = transfer(self,res)
      res = 2

   end 
   
   str_length result (res) ::: get_from(INTRINSIC, FMT=>*), pure
   ! Returns the minimal string length.
   ! Note: for real and complex only
   end 

   str_length(dp,spaces) result (res) ::: pure
   ! Return *twice* the string length from the int part of the REAL
   ! value "self", keeping "dp" decimal places with extra "spaces" 
   ! (if present).  The resuls is twice that for a real number.
      self :: IN
      dp :: INT, IN
      spaces :: INT, optional, IN
      res :: INT

      val :: REAL
      wid :: INT

      val = REALIFY(self)
      wid = val.str_length(dp)
      if (present(spaces)) wid = wid + spaces

      res = .no_of_fields_per_value * wid

   end

   get_str_length(sl,spaces) ::: get_from(INTRINSIC, FMT=>*), pure
   ! Returns the minimal string length.
   ! Note: for real and complex only
   end

   get_str_length_maxdp(sl,max_dp,spaces) ::: pure
   ! Return "sl" as *twice* the string length from the int part of the
   ! REAL value "self", keeping "max_dp" decimal places with extra
   ! "spaces" (if present). The resuls is twice that for a real.
      self :: IN
      sl :: INT, OUT
      max_dp :: INT, IN
      spaces :: INT, IN

      val :: REAL
      wid :: INT

      val = REALIFY(self)
      val.get_str_length_maxdp(wid,max_dp,spaces)

      sl = .no_of_fields_per_value * wid

   end

! =================
! String conversion
! =================

! This is for INTEL_ifort

   to_str_cpx_0 result (string) ::: get_from(INTRINSIC:to_str, FMT=>*), pure
   ! Change self to a string of minimal length
   end

   to_str_cpx_1(fmt,left_justify) result (string) ::: get_from(INTRINSIC:to_str), pure
   ! Change self to a "string" using the specified fortran "fmt".
   end

   to_str_cpx_2(style,width,precision,left_justify) result (string) ::: get_from(INTRINSIC:to_str, NN=>2), pure
   ! Change self to a string with specified fortran "style", in a
   ! field of "width" characters and "precision" decimal points.
   end

! ================
! Equality testing
! ================

   equals(c,eps) result (res) ::: pure
   ! Test to see if "self" is the same as "c"
      self :: IN
      c :: CPX, IN
      eps :: REAL, optional, IN
      res :: BIN

      res = .same_as(c,eps)

   end

   same_as(c,eps) result (res) ::: pure
   ! Test to see if "self" is the same as "c"
      self :: IN
      c :: CPX, IN
      eps :: REAL, optional, IN
      res :: BIN

      tol :: REAL

      tol = REAL_EPSILON
      if (present(eps)) tol = abs(eps)

      res = abs(self-c) < tol

   end

   same_as(r,eps) result (res) ::: pure
   ! Test to see if "self" is the same as "c"
      self :: IN
      r :: REAL, IN
      eps :: REAL, optional, IN
      res :: BIN

      tol :: REAL

      tol = REAL_EPSILON
      if (present(eps)) tol = abs(eps)

      res = abs(self-r) < tol

   end

   is_zero(eps) result (res) ::: pure
   ! Return TRUE if self is near enough zero. If present, "eps" defines how
   ! close to zero before the number is considered zero.
      self :: IN
      eps :: REAL, optional, IN
      res :: BIN

      tol :: REAL

      tol = REAL_EPSILON
      if (present(eps)) tol = abs(eps)

      res = abs(self) < tol

   end

   is_one(eps) result (res) ::: pure
   ! Return TRUE if self is near enough one. If present, "eps" defines how
   ! close to one before the number is considered zero.
      self :: IN
      eps :: REAL, optional, IN
      res :: BIN

      tol :: REAL

      tol = REAL_EPSILON
      if (present(eps)) tol = abs(eps)

      res = abs(self-ONE) < tol

   end

   is_minus_one(eps) result (res) ::: pure
   ! Return TRUE if self is near enough minus one. If present, "eps" defines how
   ! close to minus one before the number is considered zero.
      self :: IN
      eps :: REAL, optional, IN
      res :: BIN

      tol :: REAL

      tol = REAL_EPSILON
      if (present(eps)) tol = abs(eps)

      res = abs(self+ONE) < tol

   end

end
