!---------------------------------------------------------------------------
!
! VEC{TERM}: A list of TERM's
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
! 
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{TERM}

   implicit none

   saved_self :: VEC{TERM}*, private

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Create space for object. This version does not nullify ptr parts.
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Destroy space for object. This version does not destroy ptr parts
   end

!  ====
!  Copy
!  ====

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec".
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: get_from(VEC{OBJECT}), PURE
   ! Set default values
   end

! =======================
! List-based I/O Routines
! =======================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read in and process list-based keywords from "stdin". List-based keywords
   ! are those that are intended to apply to each individual element of the list
   ! through a list of "keys" stored in the associated list-element type module.
   ! NOTE: this routine will create the list, if required.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-type "keyword", common to all list-type objects.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the "keys" to read in the data list. 
   ! Opening and closing braces are not needed.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! Read ahead in stdin to get the "length" of the data list, i.e. the number
   ! of data items in the list. The data must begin with the first data item,
   ! *not* a "{" symbol.  The order of data items comprising the list is given
   ! by keys defined in the associated list-element type module. The data list
   ! must be terminated by a "}" symbol.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a sublist of the complete list, and alter the data for that
   ! sublist.  The order of the data items in the sublist is given by the "keys"
   ! defined in the associated list-element type module.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in a set of data to append to an existing set.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the "keys" on each element of the list.
   end

   process_keys_once ::: get_from(VEC{OBJECT})
   ! Process the "keys" just once on an anonymous object. This is useful if the
   ! "keys" set global variables in the list module (e.g. the default order of
   ! lists *within* the list data) as opposed to being keys pertaining to each
   ! element of the list.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT})
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! This is for destroying the "keys" externally.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! Read a new set of keys
   end

   redirect ::: get_from(OBJECT), leaky
   ! Redirect input
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file
   end

! ===========================
! Non-list based I/O routines
! ===========================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! Read in and process normal (non list-type) keywords from "stdin".
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
      self :: PTR
      keyword :: STR

      word :: STR

      word = keyword
      word.to_lower_case
      select case (word)
         case("}") ! do nothing.
         case("redirect                 "); .redirect
         case("revert                   "); .revert
         case default;     UNKNOWN(word)
      end

   end

   shrink(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Shrink self to dimension dim.  Contents are retained.
   end

   expand(dim) ::: get_from(VEC{OBJECT}), leaky
   ! Expand the vector "self" to "dim". New slots are left undefined.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self and appends the contents of vector "v".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky
   ! Expands self by 1, and appends the single scalar "value" onto the end.
   end

!  =======
!  Methods
!  =======

   analyze(d1_codes) ::: leaky
   ! Analyze each observable term with provided d1_codes
      d1_codes :: MAP{STR,INT}*

      i,n_dof :: INT

      ! Analyze each term (leaky)
      do i = 1,.dim
         self(i).set_d1_codes(d1_codes)
         self(i).analyze_descriptor
      end

      ! Check
      .check_dofs_are_contiguous

      ! Set more info arrays (leaky)
      n_dof = .no_of_dofs
      do i = 1,.dim
         self(i).set_has_any_dof(n_dof)
      end


   end

!  ============
!  Info methods 
!  ============

   no_of_dofs result (res) ::: pure
   ! Return the (maximum) number of degrees of freedom
      self :: IN
      res :: INT

      p :: INT

      ! Get the maximum no of degrees of freedom
      res = 0
      do p = 1,.dim
         res = max(res,maxval(self(p).dof_at_pos))
      end

   end

   check_dofs_are_contiguous result (res) ::: pure
   ! Check the DOF's are contiguous.
      self :: IN
      res :: INT

      n :: INT
      dof_present :: VEC{BIN}*

      ! Highest DOF
      n = .no_of_dofs

      ! Record of DOF's present
      dof_present.create(n)
      dof_present = FALSE

      ! Check that the degrees of freedom are contiguous
      do p = 1,.dim
         do d = 1,self(p).n_1d_parts
            dof_present(self(p).dof_at_pos(p)) = TRUE
         end
      end

      ! Get the result
      res = any(NOT dof_present)
 
      ! Clean
      dof_present.destroy

   end

   coefficient_list result (res) ::: leaky
   ! Return the coefficients as a flat list
      self :: IN
      res :: VEC{REAL}@

      res.create(.dim)
      do p = 1,.dim
         res(p) = self(p).coefficient
      end

   end

   variable_code_list result (res) ::: leaky
   ! Return the variable codes as a list-of-lists
      self :: IN
      res :: VEC{EVEC{INT}}@

      ! Get it
      res.create(.dim)
      do p = 1,.dim
         res(p).element = self(p).var_at_pos
      end

   end

   parameter_list result (res) ::: leaky
   ! Return the parameters as a list-of-lists
      self :: IN
      res :: VEC{EVEC{REAL}}*

      ! Get it
      res.create(.dim)
      do p = 1,.dim
         res(p).element = self(p).parameters
      end

   end

!  ===
!  Put
!  ===

   put
   ! Put the series expansion out
      self :: IN

      table :: VEC{TABLE_COLUMN}@
      coeffs :: VEC{REAL}@
      varcodes :: VEC{EVEC{INT}}@
      parameters :: VEC{EVEC{REAL}}@

    ! stdout.flush
    ! stdout.text("==========================")
    ! stdout.text("VEC{TERM} series expansion")
    ! stdout.text("==========================")
    ! stdout.flush
    ! stdout.flush
    ! stdout.show("No. of terms =",.dim)
    ! stdout.flush

      ! Table headings
      table.create(3)
      table(1).set_heading("Coeff")
      table(2).set_heading(" Var")
      table(2).set_subhead("code")
      table(3).set_heading("Power/")
      table(3).set_subhead("Param")
      table(3).set_real_precision(1)

      ! Get table column data
      coeffs     = .coefficient_list
      varcodes   = .variable_code_list
      parameters = .parameter_list

      ! Set table column data
      table(1).set_values(coeffs)
      table(2).set_values(varcodes)
      table(3).set_values(parameters)

      ! Make the table
      table.put(label_rows=TRUE)

      ! Clean
      table.destroy
      parameters.destroy
      varcodes.destroy
      coeffs.destroy

   end

end
