!=====================================================================
!
! OUTPUT_STYLE 
! 
! Style parameters used for writing TEXTFILE output.
! This is a very basic module.
!
! Copyright (C) Dylan Jayatilaka, 2024
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!======================================================================

module OUTPUT_STYLE

   implicit none

contains

!  ===
!  Set
!  ===

   set_from(saved) ::: pure
   ! Set style options from a "saved", including any default units.
      self  :: INOUT
      saved :: OUTPUT_STYLE, IN

      ! Format options
      .using_fields            = saved.using_fields
      .spacing                 = saved.spacing
      .n_fields_per_line       = saved.n_fields_per_line
      .int_width               = saved.int_width
      .real_width              = saved.real_width
      .real_precision          = saved.real_precision
      .real_fortran_fmt        = saved.real_fortran_fmt
      .margin_width            = saved.margin_width
      .using_array_labels      = saved.using_array_labels
      .default_units           = saved.default_units

      ! Buffer parsing style ...
      .comment_chars           = saved.comment_chars
      .quote_chars             = saved.quote_chars
      .list_delimiters         = saved.list_delimiters
      .ignore_unmatched_quotes = saved.ignore_unmatched_quotes
      .eliminate_specials      = saved.eliminate_specials
      .replacement_list        = saved.replacement_list  

   end

!  ==================
!  Set format options
!  ==================

   set_using_fields(val) ::: PURE
   ! Set whether to use fields of fixed width or not.
      self :: INOUT
      val :: BIN, IN
      .using_fields = val
      .set_n_fields_per_line(0)
   end

   set_spacing(val) ::: PURE
   ! Set the spacing between fields.
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"must be non-negative")

      .spacing = val

   end

   set_n_fields_per_line(val) ::: PURE
   ! Set the number of fields per file.
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"not enough fields")

      .n_fields_per_line = val

   end

   set_int_width(val) ::: PURE
   ! Set the width of an integer field.
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"width less than zero")

      .int_width = val

   end

   set_real_width(val) ::: PURE
   ! Set the width of an real-number field.
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"width less than zero")
   ENSURE(val>=.real_precision,"width smaller than precision")

      .real_width = val

   end

   set_real_precision(val) ::: PURE
   ! Set the real-number precision i.e. no of decimal places.
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"precision less than zero")
   ENSURE(val<=.real_width,"precision greater than field width")

      .real_precision = val

   end

   set_real_fortran_fmt(val) ::: PURE
   ! Set the real-number fortran format string.
      self :: INOUT
      val :: STR, IN

   ENSURE(val.is_one_of(["f ","d ","e ","es","en","g "]),"unrecognized fortran style: "//trim(val))

      .real_fortran_fmt = val

   end

   set_line_fortran_fmt(fmt) ::: PURE
   ! Set the line format from fortran format string "fmt". 
   ! It should include the number of fields e.g. "5f10.3". 
   ! The style must be an allowed fortran real style like "f".
      self :: INOUT
      fmt :: STR, IN

      f,l,s :: INT
      tmp :: STR

      ! First and last character
      tmp = adjustl(fmt)
      tmp.get_next_item_position(f,l)
      ENSURE(l/=0, "fmt is blank")
      tmp = tmp(1:l)

      ! Get the number of columns
      s = tmp.index_of_character_not_in("0123456789")
      ENSURE(s/=0, "fmt has no # of fields")
      .set_n_fields_per_line(tmp(1:s-1).to_int)

      ! Get the style
      tmp = tmp(s:)
      s = tmp.index_of_character_in("0123456789")
      ENSURE(s/=0, "fmt has no real style")
      .set_real_fortran_fmt(tmp(1:s-1))

      ! Get the width
      tmp = tmp(s:)
      s = tmp.index_of_character_not_in("0123456789")
      ENSURE(s/=0, "fmt has no width")
      ENSURE(tmp(s:s)==".", "fmt has no dot before precision")
      .set_real_precision(0)
      .set_real_width(tmp(1:s-1).to_int)

      ! Get the precision
      tmp = tmp(s+1:)
      .set_real_precision(tmp.to_int)

   end

   set_margin_width(val) ::: PURE
   ! Set the width of the margin in the buffer.
      self :: INOUT
      val :: INT, IN

   ENSURE(val>=0,"margin width less than zero")
   ENSURE(val<=STR_SIZE,"margin width too large")

      .margin_width = val

   end

   set_using_array_labels(val) ::: pure
   ! Set whether to use numbered columns, or row labels, on matrix or
   ! vector output.
      self :: INOUT
      val :: BIN, IN
      .using_array_labels = val
   end

   set_default_units(units) ::: PURE
   ! Set the .default_units to "units". NOTE: This is reset back to
   ! ONE after a numerical quantity has been read and converted.
      self :: INOUT
      units :: STR, IN

   ENSURE(units==" " OR units.is_known_unit,"Unknown units!")

      .default_units = units

   end

!  ==========================
!  Set buffer parsing options
!  ==========================

   set_comment_chars(val) ::: pure
   ! Set the characters which represent comment characters.
      self :: INOUT
      val  :: STR, IN
      .comment_chars = val
   end

   set_quote_chars(val) ::: pure
   ! Set the characters which represent the quotes.
      self :: INOUT
      val  :: STR, IN
      .quote_chars = val
   end

   set_list_delimiters(val) ::: pure
   ! Set the two open- and close- characters which delimit a list.
      self :: INOUT
      val  :: STR(len=2), IN
      .list_delimiters = val(1:2)
   end

   set_ignore_unmatched_quotes(val) ::: pure
   ! Set whether to ignore unmatched quotes when processing input.
      self :: INOUT
      val  :: BIN, IN
      .ignore_unmatched_quotes = val
   end

   set_eliminate_specials(val) ::: pure
   ! Set the list of characters which should be treated as whitespace.
      self :: INOUT
      val :: BIN, IN
      .eliminate_specials = val
   end

   set_replacement_list(list) ::: leaky, PURE
   ! Set the characters which should be replaced.
   ! The first column in "list" is the character to be replaced, and
   ! the second column is the character it should be replaced with.
      self :: INOUT
      list :: MAT{STR}, IN

   ENSURE(list.dim2==2,"second dimension must be 2")

      .replacement_list = list

   end

end
