!======================================================================
! Macros file
!
! This file contains all global parameters and default values
! for the modules.
!======================================================================

!======================================================================
! Kind parameters for scalar intrinsic types. 
! Note that kind type parameters may not match with byte size length,
! especially for CPX. Normally, the double precision kind type is "8".
!======================================================================

# define CHR_KIND      1

# ifndef INT_KIND
# define INT_KIND      4
# endif
# define INT_1_KIND    1
# define INT_2_KIND    2
# define INT_4_KIND    4
# define INT_8_KIND    8

# ifndef BIN_KIND
# define BIN_KIND      4
# endif
# define BIN_1_KIND    1
# define BIN_4_KIND    4

# ifndef REAL_KIND
# define REAL_KIND     8
# endif
# define REAL_4_KIND   4
# define REAL_8_KIND   8
# define REAL_16_KIND  16

# ifndef CPX_KIND
# define CPX_KIND      8
# endif
# define CPX_4_KIND    4
# define CPX_8_KIND    8
# define CPX_16_KIND   16

!======================================================================
! Byte Size parameters for scalar intrinsic types
!======================================================================

# define CHR_SIZE      1

# define STR_SIZE      512
# define BSTR_SIZE     8192

# define INT_SIZE      4
# define INT_1_SIZE    1
# define INT_2_SIZE    2
# define INT_4_SIZE    4
# define INT_8_SIZE    8

# define BIN_SIZE      4
# define BIN_1_SIZE    1
# define BIN_4_SIZE    4

# define PTR_SIZE      8

# define REAL_SIZE     8
# define REAL_4_SIZE   4
# define REAL_8_SIZE   8
# define REAL_16_SIZE  16

# define CPX_SIZE      16
# define CPX_4_SIZE    8
# define CPX_8_SIZE    16
# define CPX_16_SIZE   32

!======================================================================
! Intrinsic scalar types ...
!======================================================================

# define INT           integer(INT_KIND)
# define INT_1         integer(INT_1_KIND)
# define INT_2         integer(INT_2_KIND)
# define INT_4         integer(INT_4_KIND)
# define INT_8         integer(INT_8_KIND)

# define BIN           logical(BIN_KIND)
# define BIN_1         logical(BIN_1_KIND)
# define BIN_4         logical(BIN_4_KIND)

# define REAL          real(REAL_KIND)
# define REAL_4        real(REAL_4_KIND)
# define REAL_8        real(REAL_8_KIND)
# define REAL_16       real(REAL_16_KIND)

# define CPX           complex(CPX_KIND)
# define CPX_4         complex(CPX_4_KIND)
# define CPX_8         complex(CPX_8_KIND)
# define CPX_16        complex(CPX_16_KIND)

# define CHR           character

!======================================================================
! Array types ...
!======================================================================

# define STR(X)                       character(X)
# define BSTR(X)                      character(X)
# define VEC(X,A)                     X, dimension(A)
# define MAT(X,A,B)                   X, dimension(A,B)
# define MAT3(X,A,B,C)                X, dimension(A,B,C)
# define MAT4(X,A,B,C,D)              X, dimension(A,B,C,D)
# define MAT5(X,A,B,C,D,E)            X, dimension(A,B,C,D,E)
# define MAT6(X,A,B,C,D,E,F)          X, dimension(A,B,C,D,E,F)
# define MAT7(X,A,B,C,D,E,F,G)        X, dimension(A,B,C,D,E,F,G)

!======================================================================
! Pure routines ... turned off for preconditions & MPI
!======================================================================

# define PURE                         pure
# define ELEMENTAL                    pure elemental

!======================================================================
! How the tonto system calls are to appear in the fortran code ...
!
! NO_TONTO_SYSTEM_CALLS     = no system calls, no parallel calls
! NO_TONTO_SYSTEM_CHECKS    = no checking calls, retain parallel calls
!                             you must still define MPI
! NO_GENERIC_NAMES          = prepend module name to routines
! MPI                       = use MPI calls
! USE_PRECONDITIONS         = use routine preconditions
!                           + USE_ERROR_MANAGEMENT
! USE_ERROR_MANAGEMENT      = use die and warn
!======================================================================

# if defined NO_TONTO_SYSTEM_CALLS || defined NO_TONTO_SYSTEM_CHECKS

#    define DIE0(X)                   print *,X; stop
#    define DIE_IF0(X,Y)              if (X) then; print *,Y; stop; end if
#    define WARN0(X)                  print *,X
#    define WARN_IF0(X,Y)             if (X) print *,Y
#    define ENSURE0(X,Y)              if (.not. (X)) then; print *,Y; stop; end if

#    define TONTO_FLUSH_BUFFER0(X)    ! Normally, flush output buffer
#    define TONTO_CREATE0             ! Normally, create tonto defaults (memory, parallel, etc ...)
#    define TONTO_DESTROY0            ! Normally, destroy tonto object
#    define TONTO_SET_STDERR0(X)      ! Normally, set the tonto error outpurt file

# elif defined NO_GENERIC_NAMES

#    define DIE0(X)                   call SYSTEM_die(tonto,X)
#    define DIE_IF0(X,Y)              call SYSTEM_die_if(tonto,X,Y)
#    define WARN0(X)                  call SYSTEM_warn(tonto,X)
#    define WARN_IF0(X,Y)             call SYSTEM_warn_if(tonto,X,Y)
#    define ENSURE0(X,Y)              call SYSTEM_ensure(tonto,X,Y)

#    define TONTO_FLUSH_BUFFER0(X)    call SYSTEM_flush_buffer(tonto,X)
#    define TONTO_CREATE0             call SYSTEM_create(tonto)
#    define TONTO_DESTROY0            call SYSTEM_destroy(tonto)
#    define TONTO_SET_STDERR0(X)      call SYSTEM_set_error_output_file(tonto,X)

# else

#    define DIE0(X)                   call die_(tonto,X)
#    define DIE_IF0(X,Y)              call die_if_(tonto,X,Y)
#    define WARN0(X)                  call warn_(tonto,X)
#    define WARN_IF0(X,Y)             call warn_if_(tonto,X,Y)
#    define ENSURE0(X,Y)              call ensure_(tonto,X,Y)

#    define TONTO_FLUSH_BUFFER0(X)    call flush_buffer_(tonto,X)
#    define TONTO_CREATE0             call create_(tonto)
#    define TONTO_DESTROY0            call destroy_(tonto)
#    define TONTO_SET_STDERR0(X)      call set_error_output_file_(tonto,X)

# endif

! These are system calls involving the tonto variable

# define TONTO_FLUSH_BUFFER(X)        TONTO_FLUSH_BUFFER0(X)
# define TONTO_CREATE                 TONTO_CREATE0
# define TONTO_DESTROY                TONTO_DESTROY0
# define TONTO_SET_STDERR(X)          TONTO_SET_STDERR0(X)

!======================================================================
! How parallelisation appear in the fortran code ...
!======================================================================

# if defined NO_TONTO_SYSTEM_CALLS

#    define PARALLEL_DO_START0(X,Y)    X
#    define PARALLEL_DO_STRIDE0(X)     X
#    define LOCK_PARALLEL_DO0(X)       ! Normally this is a parallel do loop ...
#    define UNLOCK_PARALLEL_DO0(X)     ! End parallel do loop ...
#    define IO_IS_ALLOWED0             TRUE
#    define DO_IN_PARALLEL0            FALSE
#    define PARALLEL_SUM0(X)
#    define PARALLEL_VECTOR_SUM0(X,Y)
#    define PARALLEL_SYMMETRIC_SUM0(X)
#    define PARALLEL_BROADCAST0(X,Y)

# elif defined NO_GENERIC_NAMES

#    define PARALLEL_DO_START0(X,Y)    SYSTEM_parallel_do_start(tonto,X,Y)
#    define PARALLEL_DO_STRIDE0(X)     SYSTEM_parallel_do_stride(tonto,X)
#    define LOCK_PARALLEL_DO0(X)       call SYSTEM_lock_parallel_do(tonto,X)
#    define UNLOCK_PARALLEL_DO0(X)     call SYSTEM_unlock_parallel_do(tonto,X)
#    define IO_IS_ALLOWED0             SYSTEM_IO_is_allowed(tonto)
#    define DO_IN_PARALLEL0            SYSTEM_do_in_parallel(tonto)
#    define PARALLEL_SUM0(X)           if (DO_IN_PARALLEL0) call SYSTEM_parallel_sum(tonto,X)
#    define PARALLEL_VECTOR_SUM0(X,Y)  if (DO_IN_PARALLEL0) call SYSTEM_parallel_vector_sum(tonto,X,Y)
#    define PARALLEL_SYMMETRIC_SUM0(X) if (DO_IN_PARALLEL0) call SYSTEM_parallel_symmetric_sum(tonto,X)
#    define PARALLEL_BROADCAST0(X,Y)   if (DO_IN_PARALLEL0) call SYSTEM_broadcast(tonto,X,Y)

# else

#    define PARALLEL_DO_START0(X,Y)    parallel_do_start_(tonto,X,Y)
#    define PARALLEL_DO_STRIDE0(X)     parallel_do_stride_(tonto,X)
#    define LOCK_PARALLEL_DO0(X)       call lock_parallel_do_(tonto,X)
#    define UNLOCK_PARALLEL_DO0(X)     call unlock_parallel_do_(tonto,X)
#    define IO_IS_ALLOWED0             IO_is_allowed_(tonto)
#    define DO_IN_PARALLEL0            do_in_parallel_(tonto)
#    define PARALLEL_SUM0(X)           if (DO_IN_PARALLEL0) call parallel_sum_(tonto,X)
#    define PARALLEL_VECTOR_SUM0(X,Y)  if (DO_IN_PARALLEL0) call parallel_vector_sum_(tonto,X,Y)
#    define PARALLEL_SYMMETRIC_SUM0(X) if (DO_IN_PARALLEL0) call parallel_symmetric_sum_(tonto,X)
#    define PARALLEL_BROADCAST0(X,Y)   if (DO_IN_PARALLEL0) call broadcast_(tonto,X,Y)

# endif

!======================================================================
! Parallelisation macros ...
!======================================================================

# ifdef MPI

#    define PARALLEL_DO_START(X,Y)    PARALLEL_DO_START0(X,Y)
#    define PARALLEL_DO_STRIDE(X)     PARALLEL_DO_STRIDE0(X)
#    define LOCK_PARALLEL_DO(X)       LOCK_PARALLEL_DO0(X)
#    define UNLOCK_PARALLEL_DO(X)     UNLOCK_PARALLEL_DO0(X)
#    define IO_IS_ALLOWED             IO_IS_ALLOWED0
#    define DO_IN_PARALLEL            DO_IN_PARALLEL0
#    define PARALLEL_SUM(X)           PARALLEL_SUM0(X)
#    define PARALLEL_VECTOR_SUM(X,Y)  PARALLEL_VECTOR_SUM0(X,Y)
#    define PARALLEL_SYMMETRIC_SUM(X) PARALLEL_SYMMETRIC_SUM0(X)
#    define PARALLEL_BROADCAST(X,Y)   PARALLEL_BROADCAST0(X,Y)
#    undef  PURE
#    define PURE
#    undef  ELEMENTAL
#    define ELEMENTAL

# else

#    define PARALLEL_DO_START(X,Y)    X
#    define PARALLEL_DO_STRIDE(X)     X
#    define LOCK_PARALLEL_DO(X)       ! Normally this is a parallel do loop ...
#    define UNLOCK_PARALLEL_DO(X)     ! End parallel do loop ...
#    define IO_IS_ALLOWED             TRUE
#    define DO_IN_PARALLEL            FALSE
#    define PARALLEL_SUM(X)
#    define PARALLEL_VECTOR_SUM(X,Y)
#    define PARALLEL_SYMMETRIC_SUM(X)
#    define PARALLEL_BROADCAST(X,Y)

# endif

!======================================================================
! Precondition and Postcodition macros ...
!======================================================================

# ifdef USE_PRECONDITIONS

#    define USE_ERROR_MANAGEMENT
#    define ENSURE(X,Y)               ENSURE0(X,Y)
#    undef  PURE
#    define PURE
#    undef  ELEMENTAL
#    define ELEMENTAL

# else

#    define ENSURE(X,Y)               ! Ensure (X) or die and print: Y

# endif

!======================================================================
! Error macros ...
!======================================================================

# ifdef USE_ERROR_MANAGEMENT

#    define DIE(X)                    DIE0(X)
#    define DIE_IF(X,Y)               DIE_IF0(X,Y)
#    define WARN(X)                   WARN0(X)
#    define WARN_IF(X,Y)              WARN_IF0(X,Y)

# else

#    define DIE(X)                    ! Die and print: X
#    define DIE_IF(X,Y)               ! Die if (X) and print: Y
#    define WARN(X)                   ! Warning message: X
#    define WARN_IF(X,Y)              ! Warn if (X) and print: Y

# endif

!======================================================================
! Unknown case macro ...
!======================================================================

# define UNKNOWN(X)    DIE("unknown case option: " // trim(X))

!======================================================================
! Convenience macros ...
!======================================================================

# define DEFAULT(X)         = X
# define DEFAULT_NULL       => NULL()

# define AND               .and.
# define OR                .or.
# define NOT               .not.
# define FALSE             .false.
# define TRUE              .true.
# define EQV               .eqv.
# define NEQV              .neqv.

# define PTR               pointer
# define IN                intent(in)
# define OUT               intent(out)
# define INOUT             intent(inout)
# define PAR               parameter

# define ZERO              0.0d0
# define ONE               1.0d0
# define TWO               2.0d0
# define THREE             3.0d0
# define FOUR              4.0d0
# define FIVE              5.0d0
# define SIX               6.0d0
# define SEVEN             7.0d0
# define EIGHT             8.0d0
# define NINE              9.0d0
# define TEN              10.0d0
# define TWELVE           12.0d0
# define FIFTEEN          15.0d0
# define TWENTYFOUR       24.0d0

# define HALF              0.5000d0
# define QUARTER           0.2500d0
# define THREEQUARTERS     0.7500d0
# define EIGHTH            0.1250d0
# define SIXTEENTH         0.0625d0

# define THIRD             0.333333333333333333333d0
# define TWOTHIRD          0.666666666666666666667d0
# define FOURTHIRD         1.333333333333333333333d0
# define ONETHIRD          (ONE/THREE)
# define TWOTHIRDS         (TWO/THREE)
# define FOURTHIRDS        (FOUR/THREE)

# define SIXTH             0.166666666666666666667d0
# define FIVESIXTH         0.833333333333333333333d0
# define ONESIXTH          (ONE/SIX)
# define FIVESIXTHS        (FIVE/SIX)

# define NINTH             0.111111111111111111111d0
# define ONENINTH          (ONE/NINE)

# define TENTH             0.10d0
# define ONETENTH          (ONE/TEN)

# define PI                3.14159265358979323846d0
# define HALF_PI           1.57079632679489661923d0
# define SQRT_PI           1.77245385090551596002d0
# define SQRT_2PI          2.50662827463100050242d0
# define EULER             2.71828182845904523536d0
# define PI32              5.56832799683170784528d0
# define TWOPI5ON2         34.9868366552497256925d0

! ==========
! Tolerances
! ==========

# define TOL(N)            TEN**(-(N))

! ===========
! Intifaction
! ===========

# define INTIFY(X)         int(X,kind=INT_KIND)
# define NINTIFY(X)        nint(X)

! ===============
! Complex numbers
! ===============

# define REALIFY(X)        real(X,kind=REAL_KIND)
# define IMAGIFY(X)        cmplx(ZERO,X,kind=CPX_KIND)
# define COMPLEXIFY(X,Y)   cmplx(X,Y,kind=CPX_KIND)
# define RE(X)             real(X,kind=REAL_KIND)
# define IM(X)             aimag(X)

! ================
! Bit manipulation
! ================

# define BIT_SET_AT_POS_IN(X,P)    btest(X,P)
# define SET_BIT_AT_POS_IN(X,P)    ibset(X,P)
# define CLR_BIT_AT_POS_IN(X,P)    ibclr(X,P)
# define MOVE_BITS_LEFT_IN(X,N)    ishft(X,N)
# define MOVE_BITS_RIGHT_IN(X,N)   ishft(X,-N)
# define BITS_FROM_POS_IN(X,P,N)   ibits(X,P,N)

! ===========
! Copy macro
! ===========
# define COPY_FROM_OBJECT(X)        if (associated(self% X)) call create_copy_(self% X,object% X)

! ================================================
! Fundamental constants and conversion factors ...
! Most taken from CODATA 2002 so do not change!
! ================================================

# define AVOGADROS_NUMBER                          6.0221415d+23
# define SPEED_OF_LIGHT_SI                         2.99792458d+8
# define CHARGE_OF_ELECTRON_SI                     1.60217653d-19
# define AMU_SI                                    1.66053886d-27
# define BOHR_SI                                   0.5291772108d-10
# define MASS_OF_ELECTRON_SI                       9.1093826d-31
# define MASS_OF_PROTON_SI                         1.67262171d-27
# define MASS_OF_NEUTRON_SI                        1.67492728d-27
# define BOHR_MAGNETON_SI                          9.27400949d-24
# define NUCLEAR_MAGNETON_SI                       5.05078343d-27
# define G_FACTOR                                  2.0023193043718
# define BOLTZMANN_SI                              1.3806505d-23
# define HARTREE_SI                                4.35974417d-18
# define ANGSTROM_SI                               1.0d-10
# define PLANCK_SI                                 6.6260693d-34
# define BOHR_MAGNETON_AU                          HALF
# define SPEED_OF_LIGHT_AU                         137.03599d0
# define PERMITTIVITY_OF_FREE_SPACE_SI             8.854187817d-12

# define AMU_PER_MASS_OF_ELECTRON                  (MASS_OF_ELECTRON_SI/AMU_SI)
# define MASS_OF_ELECTRON_PER_AMU                  (AMU_SI/MASS_OF_ELECTRON_SI)
# define ANGSTROM_PER_BOHR                         0.5291772108d0
# define BOHR_PER_ANGSTROM                         (1.0d0/0.5291772108d0)
# define METER_PER_ANGSTROM                        1.0d-10
# define METER_PER_BOHR                            0.5291772108d-10
# define METER_PER_AU                              0.5291772108d-10
# define BOHR_PER_BOHR                             ONE
# define WAVENUMBER_PER_HARTREE                    2.194746313705d+5
# define EV_PER_HARTREE                            27.2113845
# define KELVIN_PER_HARTREE                        3.1577465d+5
# define JOULE_PER_HARTREE                         4.35974417d-18
# define HARTREE_PER_JOULE                         (1.0d0/4.35974417d-18)
# define KJOULE_PER_HARTREE                        4.35974417d-21
# define CAL_PER_HARTREE                           1.042d-18
# define KCAL_PER_HARTREE                          1.042d-21
# define KCALMOL_PER_HARTREE                       627.5
# define KJOULEMOL_PER_HARTREE                     2625.46
# define JOULE_PER_CAL                             4.184
# define DEGREE_PER_RADIAN                         (180d0/PI)
# define RADIAN_PER_DEGREE                         (PI/180d0)
# define DEBYE_PER_AU                              2.54174636d0
# define AU_PER_DEBYE                              (ONE/2.54174636d0)
# define ELECTRIC_FIELD_SI_PER_AU                  5.14220642d+11
# define ELECTRIC_FIELD_GRADIENT_SI_PER_AU         9.71736182d+21
# define ELECTRIC_POLARISABILITY_SI_PER_AU         1.648777274d-41
# define PERMITTIVITY_OF_FREE_SPACE_SI_PER_AU      1.112650056d-10

!===========================================================
! Module constants ...
! The macro-head tells the module where the constant is used
! Please keep the alphabetical order to be nice to others.
!===========================================================

# define ADAPTIVE_QUADRATURE_ACCURACY              TOL(3)

# define ATOM_BONDED_RANGE_FACTOR                  0.4*BOHR_PER_ANGSTROM
# define ATOM_DUMMY_CHARGE_LABEL                   "Q"
# define ATOM_DUMMY_CHARGE_INPUT_SYMBOL            "Q:"
# define ATOM_ADPN_FORM                            "u"

# define BECKE_GRID_KIND                           "mura_knowles"
# define BECKE_GRID_EXTRA_POINTS_PER_SHELL         5
# define BECKE_GRID_REDUCE_CORE_ANGULAR_GRID       TRUE
# define BECKE_GRID_REDUCE_H_ANGULAR_GRID          TRUE
# define BECKE_GRID_SCALE_ATOMIC_GRIDS             TRUE
# define BECKE_GRID_PARTITION_POWER                3
# define BECKE_GRID_STRATMANN_SCUSERIA_A           0.64d0
# define BECKE_GRID_PARTITION_SCHEME               "stratmann_scuseria"
# define BECKE_GRID_PARTITION_SCALING_SCHEME       "none"
# define BECKE_GRID_PRUNING_SCHEME                 "treutler_ahlrichs"
# define BECKE_GRID_ACCURACY                       "low"
# define BECKE_GRID_BASIS_FUNCTION_CUTOFF          TOL(10)
# define BECKE_GRID_PARTITION_CUTOFF               TOL(4)
# define BECKE_GRID_RHO_CUTOFF                     TOL(6)

# define BUFFER_COMMENT_CHARS                      "!#"
# define BUFFER_QUOTE_CHARS                        "'"//'"'

# define CIF_BH_BOND_LENGTH                        1.190d0
# define CIF_CH_BOND_LENGTH                        1.083d0
# define CIF_NH_BOND_LENGTH                        1.009d0
# define CIF_OH_BOND_LENGTH                        0.983d0
# define CIF_GC_FORMAT                             ATOM_ADPN_FORM
# define CIF_GC3_SCALE_FACTOR                      1000d0
# define CIF_GC4_SCALE_FACTOR                      10000d0
# define CIF_GC3_LABEL                             "_atom_site_anharm_GC_C_"
# define CIF_GC4_LABEL                             "_atom_site_anharm_GC_D_"

! Note efficient form for CLUSTER_H_MAX, CLUSTER_n_ATOM_BITS and
! CLUSTER_N_ATOM_MAX. Change these manually if the number bits
! used in the encoding changes. See module.

# define CLUSTER_GENERATION_METHOD                 "fragment"
# define CLUSTER_RADIUS                            ZERO
# define CLUSTER_ATOM_DENSITY_CUTOFF               TOL(10)
# define CLUSTER_DEFRAGMENT                        FALSE
# define CLUSTER_N_INDX_BITS                       4
# define CLUSTER_H_MAX_                            (2**CLUSTER_N_INDX_BITS-1)/2
# define CLUSTER_H_MAX                             7
# define CLUSTER_N_ATOM_BITS_                      8*INT_KIND-3*CLUSTER_N_INDX_BITS-1
# define CLUSTER_N_ATOM_BITS                       19
# define CLUSTER_N_ATOM_MAX_                       2**CLUSTER_N_ATOM_BITS-1
# define CLUSTER_N_ATOM_MAX                        524287
# define CLUSTER_H1_CODE(X)                        X+CLUSTER_H_MAX
# define CLUSTER_H2_CODE(X)                        MOVE_BITS_LEFT_IN(X+CLUSTER_H_MAX,CLUSTER_N_INDX_BITS)
# define CLUSTER_H3_CODE(X)                        MOVE_BITS_LEFT_IN(X+CLUSTER_H_MAX,CLUSTER_N_INDX_BITS*2)
# define CLUSTER_UA_CODE(X)                        MOVE_BITS_LEFT_IN(X,3*CLUSTER_N_INDX_BITS)
# define CLUSTER_H_CODE(A,B,C)                     CLUSTER_H1_CODE(A)+CLUSTER_H2_CODE(B)+CLUSTER_H3_CODE(C)
# define CLUSTER_AT_CODE(A,B,C,U)                  CLUSTER_H_CODE(A,B,C)+CLUSTER_UA_CODE(U)
# define CLUSTER_H1_FROM_CODE(X)                   BITS_FROM_POS_IN(X,CLUSTER_N_INDX_BITS*0,CLUSTER_N_INDX_BITS)-CLUSTER_H_MAX
# define CLUSTER_H2_FROM_CODE(X)                   BITS_FROM_POS_IN(X,CLUSTER_N_INDX_BITS*1,CLUSTER_N_INDX_BITS)-CLUSTER_H_MAX
# define CLUSTER_H3_FROM_CODE(X)                   BITS_FROM_POS_IN(X,CLUSTER_N_INDX_BITS*2,CLUSTER_N_INDX_BITS)-CLUSTER_H_MAX
# define CLUSTER_UA_FROM_CODE(X)                   BITS_FROM_POS_IN(X,CLUSTER_N_INDX_BITS*3,CLUSTER_N_ATOM_BITS)
# define CLUSTER_HC_FROM_CODE(X)                   BITS_FROM_POS_IN(X,CLUSTER_N_INDX_BITS*0,CLUSTER_N_INDX_BITS*3)

# define COPPENSORBITAL_VALUES_CUTOFF              TOL(6)

# define CRYSTAL_SAME_ATOM_TOL                     TOL(3)
# define CRYSTAL_UNIT_CELL_TOL                     TOL(6)

# define DIFFRACTION_DATA_DATA_KIND                "x-ray"
# define DIFFRACTION_DATA_WAVELENGTH               -ONE
# define DIFFRACTION_DATA_MO_K_A                   0.71073d0
# define DIFFRACTION_DATA_TEMPERATURE              ZERO
# define DIFFRACTION_DATA_F_SIGMA_CUTOFF           -TWO
# define DIFFRACTION_DATA_I_SIGMA_CUTOFF           -FOUR
# define DIFFRACTION_DATA_SYNTHESIZE_SIGMA_I       FALSE
# define DIFFRACTION_DATA_PARTITION_MODEL          " "
# define DIFFRACTION_DATA_THERMAL_SMEARING_MODEL   " "
# define DIFFRACTION_DATA_OPTIMIZE_SCALE           TRUE
# define DIFFRACTION_DATA_SCALE_FACTOR             ONE
# define DIFFRACTION_DATA_EXP_SCALE_FACTOR         -ONE
# define DIFFRACTION_DATA_OPTIMIZE_EXTINCTION      TRUE
# define DIFFRACTION_DATA_EXTINCTION_FACTOR        ZERO
# define DIFFRACTION_DATA_CORRECT_DISPERSION       FALSE
# define DIFFRACTION_DATA_MAX_ITER                 100
# define DIFFRACTION_DATA_MIN_ITER                 1
# define DIFFRACTION_DATA_TOL_FOR_SHIFT_ON_ESD     TOL(2)
# define DIFFRACTION_DATA_MAX_ALLOWED_SHIFT        TOL(2)
# define DIFFRACTION_DATA_TOL_0                    TOL(5)
# define DIFFRACTION_DATA_TOL_NEAR_0               TOL(5)
# define DIFFRACTION_DATA_MIN_CORRELATION          0.8d0

# define DFT_FUNCTIONAL_XALPHA                     0.7d0
# define DFT_FUNCTIONAL_RHO_CUTOFF                 TOL(30)

# define DFTGRID_SPHERICAL_GRID_KIND               "lebedev"
# define DFTGRID_SPHERICAL_GRID_ORDER              35
# define DFTGRID_RADIAL_GRID_KIND                  "gauss-chebyshev"
# define DFTGRID_RADIAL_GRID_ORDER                 60
# define DFTGRID_BECKE_M_PARTITION_POWER           TWO
# define DFTGRID_GAUSS_CHEBYSHEV_M                 ONE
# define DFTGRID_GAUSS_CHEBYSHEV_ALPHA             THREE
# define DFTGRID_EULER_MACLAURIN_M                 TWO
# define DFTGRID_EULER_MACLAURIN_ALPHA             TWO
# define DFTGRID_ARCHIVE_ROOT_NAME                 "dftgrid"
# define DFTGRID_ARCHIVE_NAME                      "grid"

# define DIIS_GENRE                                "fdiis"
# define DIIS_START_ITERATION                      3
# define DIIS_SAVE_ITERATION                       1
# define DIIS_KEEP                                 8
# define DIIS_CONVERGENCE_TOLERANCE                TOL(3)
# define DIIS_START_TOLERANCE                      4*TOL(1)
# define DIIS_ENCORE_ITERATIONS                    4
# define DIIS_REPLACEMENT_METHOD                   "worst"
# define DIIS_FORCE_CONVEXITY                      FALSE
# define DIIS_MICRO_ITERATION_METHOD               "bfgs"
# define DIIS_MICRO_STARTING_GUESS                 "diis"
# define DIIS_MICRO_CONVERGENCE_TOL                TOL(6)
# define DIIS_MICRO_MAX_ITERATIONS                 10000
# define DIIS_MICRO_DAMP_FACTOR                    0.9d0
# define DIIS_ERROR_TEMP_CUTOFF                    TOL(2)

# define FILE_BUFFER_LENGTH                        1024

# define GAUSSIAN_DATA_L_MAX                       4

# define INTERPOLATOR_INTERPOLATION_METHOD         "linear"
# define INTERPOLATOR_RANGE_MAPPING                "none"
# define INTERPOLATOR_DOMAIN_MAPPING               "none"
# define INTERPOLATOR_TABLE_LENGTH                 30.0d0
# define INTERPOLATOR_TABLE_ORIGIN                 ZERO
# define INTERPOLATOR_TABLE_SPACING                0.02d0
# define INTERPOLATOR_TABLE_EPS                    TOL(6)
# define INTERPOLATOR_Y1_INITIAL                   huge(ONE)
# define INTERPOLATOR_Y1_FINAL                     huge(ONE)

# define ISOSURFACE_ISO_VALUE                      ONE
# define ISOSURFACE_MINIMUM_SCAN_LEVEL             1
# define ISOSURFACE_MINIMUM_SCAN_DIVISION          0.5d0
# define ISOSURFACE_VOXEL_PROXIMITY_FACTOR         1.5d0
# define ISOSURFACE_SURFACE_POINT                  (/TOL(6),TOL(6),TOL(6)/)
# define ISOSURFACE_PROPERTY_LB                   -huge(ONE)
# define ISOSURFACE_PROPERTY_UB                    huge(ONE)
# define ISOSURFACE_PROPERTY_LB_ABS                TOL(10)
# define ISOSURFACE_PROPERTY_UB_ABS                huge(ONE)
# define ISOSURFACE_N_POINT                        10000
# define ISOSURFACE_N_FACE                         20000
# define ISOSURFACE_N_CAP                          10000
# define ISOSURFACE_INTERPOLATION_KIND             "logarithmic_linear"
# define ISOSURFACE_TABLE_LENGTH                   30.0d0
# define ISOSURFACE_TABLE_ORIGIN                   ZERO
# define ISOSURFACE_TABLE_SPACING                  0.02d0
# define ISOSURFACE_TABLE_EPS                      TOL(9)

# define MAT_LINEAR_DEPENDENCE_TOL                 TOL(10)

# define LINEAR_DEPENDENCE_TOL                     TOL(4)
# define INTERNAL_GEMINAL_TOL                      TOL(8)

# define MO_LOCALISER_ALGORITHM                    "boys"
# define MO_LOCALISER_ACCURACY                     TOL(3)
# define MO_LOCALISER_MAXIT                        20

# define MOLECULE_PHI_STEP_SIZE                    0.04d0

# define MULTI_T_ADP_V_EXPANSION_ORDER             2
# define MULTI_T_ADP_MAX_ITER                      100
# define MULTI_T_ADP_MIN_ITER                      7
# define MULTI_T_ADP_TOL_SHIFT_CONV                TOL(1)
# define MULTI_T_ADP_MAX_SHIFT                     TOL(2)
# define MULTI_T_ADP_TOL_0                         TOL(5)
# define MULTI_T_ADP_TOL_NEAR_0                    TOL(5)
# define MULTI_T_ADP_MIN_CORRELATION               0.8d0

# define PLOT_GRID_MAXIMUM_CELL_DISTANCE           5
# define PLOT_GRID_NX                              75
# define PLOT_GRID_NY                              75
# define PLOT_GRID_NZ                              1
# define PLOT_GRID_X_AXIS                          (/ ONE,ZERO,ZERO/)
# define PLOT_GRID_Y_AXIS                          (/ZERO, ONE,ZERO/)
# define PLOT_GRID_Z_AXIS                          (/ZERO,ZERO, ONE/)
# define PLOT_GRID_WIDTH                           (/ TWO, TWO,ZERO/)
# define PLOT_GRID_PLOT_FORMAT                     "gnuplot.contour"

# define QUADRATURE_ACCURACY                       TOL(6)
# define QUADRATURE_EPS                            TOL(13)
# define QUADRATURE_MAXIT                          10

# define REAL_EPSILON                              TOL(12)
# define REAL_MAX_DECIMAL_PLACES                   18
# define REAL_MAX_ITERATIONS                       1000

# define ROBY_OCCUPIED_ANO_CUTOFF                  0.05d0
# define ROBY_COVALENT_CUTOFF                      89.0d0
# define ROBY_IONIC_CUTOFF                         77.0d0
# define ROBY_ZERO_CUTOFF                          TOL(4)
# define ROBY_PI_ON_2_CUTOFF                       90.0d0
# define ROBY_OUTPUT_THETA_INFO                    TRUE
# define ROBY_ANALYZE_ALL_ATOM_PAIRS               FALSE
# define ROBY_BOND_SCALE_FACTOR                    1.33

# define SCFDATA_DFT_EXCHANGE_FUNCTIONAL           "becke88"
# define SCFDATA_USING_GGA_EXCHANGE                TRUE
# define SCFDATA_DFT_CORRELATION_FUNCTIONAL        "lyp"
# define SCFDATA_USING_GGA_CORRELATION             TRUE
# define SCFDATA_CONVERGENCE                       TOL(3)
# define SCFDATA_USING_DAMPING                     TRUE
# define SCFDATA_USING_LEVEL_SHIFT                 TRUE
# define SCFDATA_ERI_DISK_CUTOFF                   TOL(12)
# define SCFDATA_ERI_SCHWARZ_CUTOFF                TOL(9)
# define SCFDATA_ERI_J_DENSITY_CUTOFF              TOL(9)
# define SCFDATA_ERI_K_DENSITY_CUTOFF              TOL(9)
# define SCFDATA_ERI_BF_OVERLAP_CUTOFF             TOL(9)
# define SCFDATA_ERI_PAIR_CUTOFF                   TOL(6)
# define SCFDATA_ATOM_OVERLAP_CUTOFF               TOL(9)
# define SCFDATA_XC_ATOM_SEPARATION_CUTOFF         15.0
# define SCFDATA_MIN_ITERATIONS                    1
# define SCFDATA_MAX_ITERATIONS                    100
# define SCFDATA_DAMP_FACTOR                       0.5d0
# define SCFDATA_DAMP_FINISH                       3
# define SCFDATA_LEVEL_SHIFT                       0.3d0
# define SCFDATA_LEVEL_SHIFT_FINISH                3
# define SCFDATA_LINEAR_DEPENDENCE_TOL             TOL(5)
# define SCFDATA_LINEAR_DEPENDENCE_SHIFT           1.0d12
# define SCFDATA_CLUSTER_RADIUS                    SIX

# define SHELL_IS_SPHERICAL                        FALSE

# define SHELL2_PAIR_CUTOFF                        TOL(6)

# define SHELL4_ERI_CUTOFF                         1.0d-15

# define SHELL1QUARTET_ERI_PAIR_CUTOFF             TOL(6)

# define SPACEGROUP_MAX_UNIQUE_SYMOPS              1000

# define SYSTEM_ERROR_OUTPUT_UNIT                  7
# define SYSTEM_KEYWORD_ECHO                       FALSE

# define TABLE_COLUMN_WIDTH                        9
# define TABLE_COLUMN_REAL_PRECISION               6
# define TABLE_COLUMN_SPACING                      2
# define TABLE_COLUMN_SPACER                       " "
# define TABLE_COLUMN_CENTER                       FALSE
# define TABLE_COLUMN_LEFT_JUSTIFY                 FALSE
# define TABLE_COLUMN_LIST_AS_COLUMN               FALSE

# define TEXTFILE_IOSTAT_EOF                       -1
# define TEXTFILE_STDIN_UNIT                       5
# define TEXTFILE_STDOUT_UNIT                      6
# define TEXTFILE_STDERR_UNIT                      SYSTEM_ERROR_OUTPUT_UNIT
# define TEXTFILE_COMMENT_CHARS                    "!#"
# define TEXTFILE_QUOTE_CHARS                      "'"""
# define TEXTFILE_USE_FIELDS                       TRUE
# define TEXTFILE_USE_ARRAY_LABELS                 TRUE
# define TEXTFILE_MARGIN_WIDTH                     0
# define TEXTFILE_N_FIELDS_PER_LINE                5
# define TEXTFILE_SPACING                          2
# define TEXTFILE_REAL_WIDTH                       16
# define TEXTFILE_INT_WIDTH                        8
# define TEXTFILE_REAL_PRECISION                   6
# define TEXTFILE_REAL_STYLE                       " f"

# define UNIT_NUMBER_STARTING_UNIT                 10

# define VEC_ATOM_MAX_BONDS_IN_TABLE               250
# define VEC_ATOM_MAX_ANGLES_IN_TABLE              250
# define VEC_ATOM_MAX_TORSIONS_IN_TABLE            250

# define TONTO_VERSION "@TONTO_VERSION@"
# define GIT_VERSION "@TONTO_GIT_REVISION@"
# define TONTO_PLATFORM "@CMAKE_SYSTEM@"
# define TONTO_BUILD_DATE "@TONTO_BUILD_DATE@"

